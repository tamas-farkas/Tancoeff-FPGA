-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tancalc_result_write is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_output_V_AWVALID : OUT STD_LOGIC;
    m_axi_output_V_AWREADY : IN STD_LOGIC;
    m_axi_output_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_output_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_output_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_V_WVALID : OUT STD_LOGIC;
    m_axi_output_V_WREADY : IN STD_LOGIC;
    m_axi_output_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_output_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_output_V_WLAST : OUT STD_LOGIC;
    m_axi_output_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_V_ARVALID : OUT STD_LOGIC;
    m_axi_output_V_ARREADY : IN STD_LOGIC;
    m_axi_output_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_output_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_output_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_V_RVALID : IN STD_LOGIC;
    m_axi_output_V_RREADY : OUT STD_LOGIC;
    m_axi_output_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_output_V_RLAST : IN STD_LOGIC;
    m_axi_output_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_V_BVALID : IN STD_LOGIC;
    m_axi_output_V_BREADY : OUT STD_LOGIC;
    m_axi_output_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    output_V_offset_dout : IN STD_LOGIC_VECTOR (57 downto 0);
    output_V_offset_empty_n : IN STD_LOGIC;
    output_V_offset_read : OUT STD_LOGIC;
    result_local_0_V_read_2 : IN STD_LOGIC_VECTOR (0 downto 0);
    result_local_1_V_read_2 : IN STD_LOGIC_VECTOR (0 downto 0);
    result_local_2_V_read_2 : IN STD_LOGIC_VECTOR (0 downto 0);
    result_local_3_V_read_2 : IN STD_LOGIC_VECTOR (0 downto 0);
    result_local_4_V_read_2 : IN STD_LOGIC_VECTOR (0 downto 0);
    result_local_5_V_read_2 : IN STD_LOGIC_VECTOR (0 downto 0);
    result_local_6_V_read_2 : IN STD_LOGIC_VECTOR (0 downto 0);
    result_local_7_V_read_2 : IN STD_LOGIC_VECTOR (0 downto 0);
    result_local_8_V_read_2 : IN STD_LOGIC_VECTOR (0 downto 0);
    result_local_9_V_read_2 : IN STD_LOGIC_VECTOR (0 downto 0);
    result_local_10_V_read_2 : IN STD_LOGIC_VECTOR (0 downto 0);
    result_local_11_V_read_2 : IN STD_LOGIC_VECTOR (0 downto 0);
    result_local_12_V_read_2 : IN STD_LOGIC_VECTOR (0 downto 0);
    result_local_13_V_read_2 : IN STD_LOGIC_VECTOR (0 downto 0);
    result_local_14_V_read_2 : IN STD_LOGIC_VECTOR (0 downto 0);
    result_local_15_V_read_2 : IN STD_LOGIC_VECTOR (0 downto 0);
    cmpr_chunk_num_0_i_c_dout : IN STD_LOGIC_VECTOR (1 downto 0);
    cmpr_chunk_num_0_i_c_empty_n : IN STD_LOGIC;
    cmpr_chunk_num_0_i_c_read : OUT STD_LOGIC;
    data_num_0_i_c1_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_num_0_i_c1_empty_n : IN STD_LOGIC;
    data_num_0_i_c1_read : OUT STD_LOGIC );
end;


architecture behav of tancalc_result_write is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal output_V_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal output_V_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal output_V_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal output_V_offset_blk_n : STD_LOGIC;
    signal cmpr_chunk_num_0_i_c_blk_n : STD_LOGIC;
    signal data_num_0_i_c1_blk_n : STD_LOGIC;
    signal add_ln332_fu_230_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal add_ln332_reg_340 : STD_LOGIC_VECTOR (58 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal or_ln66_14_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln66_14_reg_345 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln332_2_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_fu_214_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln332_1_fu_226_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal zext_ln332_fu_222_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal or_ln66_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln66_1_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln66_2_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln66_3_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln66_4_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln66_5_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln66_6_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln66_7_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln66_8_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln66_9_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln66_10_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln66_11_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln66_12_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln66_13_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((m_axi_output_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((output_V_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (data_num_0_i_c1_empty_n = ap_const_logic_0) or (cmpr_chunk_num_0_i_c_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln332_reg_340 <= add_ln332_fu_230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_output_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                or_ln66_14_reg_345 <= or_ln66_14_fu_320_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_output_V_AWREADY, m_axi_output_V_WREADY, m_axi_output_V_BVALID, output_V_offset_empty_n, cmpr_chunk_num_0_i_c_empty_n, data_num_0_i_c1_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((output_V_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (data_num_0_i_c1_empty_n = ap_const_logic_0) or (cmpr_chunk_num_0_i_c_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((m_axi_output_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((m_axi_output_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((m_axi_output_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln332_fu_230_p2 <= std_logic_vector(unsigned(zext_ln332_1_fu_226_p1) + unsigned(zext_ln332_fu_222_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, output_V_offset_empty_n, cmpr_chunk_num_0_i_c_empty_n, data_num_0_i_c1_empty_n)
    begin
                ap_block_state1 <= ((output_V_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (data_num_0_i_c1_empty_n = ap_const_logic_0) or (cmpr_chunk_num_0_i_c_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, m_axi_output_V_BVALID, ap_CS_fsm_state8)
    begin
        if (((m_axi_output_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_output_V_BVALID, ap_CS_fsm_state8)
    begin
        if (((m_axi_output_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    cmpr_chunk_num_0_i_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cmpr_chunk_num_0_i_c_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cmpr_chunk_num_0_i_c_blk_n <= cmpr_chunk_num_0_i_c_empty_n;
        else 
            cmpr_chunk_num_0_i_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    cmpr_chunk_num_0_i_c_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, output_V_offset_empty_n, cmpr_chunk_num_0_i_c_empty_n, data_num_0_i_c1_empty_n)
    begin
        if ((not(((output_V_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (data_num_0_i_c1_empty_n = ap_const_logic_0) or (cmpr_chunk_num_0_i_c_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cmpr_chunk_num_0_i_c_read <= ap_const_logic_1;
        else 
            cmpr_chunk_num_0_i_c_read <= ap_const_logic_0;
        end if; 
    end process;


    data_num_0_i_c1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, data_num_0_i_c1_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_num_0_i_c1_blk_n <= data_num_0_i_c1_empty_n;
        else 
            data_num_0_i_c1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_num_0_i_c1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, output_V_offset_empty_n, cmpr_chunk_num_0_i_c_empty_n, data_num_0_i_c1_empty_n)
    begin
        if ((not(((output_V_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (data_num_0_i_c1_empty_n = ap_const_logic_0) or (cmpr_chunk_num_0_i_c_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_num_0_i_c1_read <= ap_const_logic_1;
        else 
            data_num_0_i_c1_read <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_output_V_ARADDR <= ap_const_lv64_0;
    m_axi_output_V_ARBURST <= ap_const_lv2_0;
    m_axi_output_V_ARCACHE <= ap_const_lv4_0;
    m_axi_output_V_ARID <= ap_const_lv1_0;
    m_axi_output_V_ARLEN <= ap_const_lv32_0;
    m_axi_output_V_ARLOCK <= ap_const_lv2_0;
    m_axi_output_V_ARPROT <= ap_const_lv3_0;
    m_axi_output_V_ARQOS <= ap_const_lv4_0;
    m_axi_output_V_ARREGION <= ap_const_lv4_0;
    m_axi_output_V_ARSIZE <= ap_const_lv3_0;
    m_axi_output_V_ARUSER <= ap_const_lv1_0;
    m_axi_output_V_ARVALID <= ap_const_logic_0;
    m_axi_output_V_AWADDR <= zext_ln332_2_fu_326_p1;
    m_axi_output_V_AWBURST <= ap_const_lv2_0;
    m_axi_output_V_AWCACHE <= ap_const_lv4_0;
    m_axi_output_V_AWID <= ap_const_lv1_0;
    m_axi_output_V_AWLEN <= ap_const_lv32_1;
    m_axi_output_V_AWLOCK <= ap_const_lv2_0;
    m_axi_output_V_AWPROT <= ap_const_lv3_0;
    m_axi_output_V_AWQOS <= ap_const_lv4_0;
    m_axi_output_V_AWREGION <= ap_const_lv4_0;
    m_axi_output_V_AWSIZE <= ap_const_lv3_0;
    m_axi_output_V_AWUSER <= ap_const_lv1_0;

    m_axi_output_V_AWVALID_assign_proc : process(m_axi_output_V_AWREADY, ap_CS_fsm_state2)
    begin
        if (((m_axi_output_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_output_V_AWVALID <= ap_const_logic_1;
        else 
            m_axi_output_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_output_V_BREADY_assign_proc : process(m_axi_output_V_BVALID, ap_CS_fsm_state8)
    begin
        if (((m_axi_output_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            m_axi_output_V_BREADY <= ap_const_logic_1;
        else 
            m_axi_output_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_output_V_RREADY <= ap_const_logic_0;
    m_axi_output_V_WDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln66_14_reg_345),512));
    m_axi_output_V_WID <= ap_const_lv1_0;
    m_axi_output_V_WLAST <= ap_const_logic_0;
    m_axi_output_V_WSTRB <= ap_const_lv64_FFFFFFFFFFFFFFFF;
    m_axi_output_V_WUSER <= ap_const_lv1_0;

    m_axi_output_V_WVALID_assign_proc : process(m_axi_output_V_WREADY, ap_CS_fsm_state3)
    begin
        if (((m_axi_output_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_output_V_WVALID <= ap_const_logic_1;
        else 
            m_axi_output_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln66_10_fu_296_p2 <= (result_local_11_V_read_2 or or_ln66_9_fu_290_p2);
    or_ln66_11_fu_302_p2 <= (result_local_12_V_read_2 or or_ln66_10_fu_296_p2);
    or_ln66_12_fu_308_p2 <= (result_local_13_V_read_2 or or_ln66_11_fu_302_p2);
    or_ln66_13_fu_314_p2 <= (result_local_15_V_read_2 or result_local_14_V_read_2);
    or_ln66_14_fu_320_p2 <= (or_ln66_13_fu_314_p2 or or_ln66_12_fu_308_p2);
    or_ln66_1_fu_242_p2 <= (result_local_2_V_read_2 or or_ln66_fu_236_p2);
    or_ln66_2_fu_248_p2 <= (result_local_3_V_read_2 or or_ln66_1_fu_242_p2);
    or_ln66_3_fu_254_p2 <= (result_local_4_V_read_2 or or_ln66_2_fu_248_p2);
    or_ln66_4_fu_260_p2 <= (result_local_5_V_read_2 or or_ln66_3_fu_254_p2);
    or_ln66_5_fu_266_p2 <= (result_local_6_V_read_2 or or_ln66_4_fu_260_p2);
    or_ln66_6_fu_272_p2 <= (result_local_7_V_read_2 or or_ln66_5_fu_266_p2);
    or_ln66_7_fu_278_p2 <= (result_local_8_V_read_2 or or_ln66_6_fu_272_p2);
    or_ln66_8_fu_284_p2 <= (result_local_9_V_read_2 or or_ln66_7_fu_278_p2);
    or_ln66_9_fu_290_p2 <= (result_local_10_V_read_2 or or_ln66_8_fu_284_p2);
    or_ln66_fu_236_p2 <= (result_local_1_V_read_2 or result_local_0_V_read_2);

    output_V_blk_n_AW_assign_proc : process(m_axi_output_V_AWREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_V_blk_n_AW <= m_axi_output_V_AWREADY;
        else 
            output_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    output_V_blk_n_B_assign_proc : process(m_axi_output_V_BVALID, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_V_blk_n_B <= m_axi_output_V_BVALID;
        else 
            output_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    output_V_blk_n_W_assign_proc : process(m_axi_output_V_WREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_V_blk_n_W <= m_axi_output_V_WREADY;
        else 
            output_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    output_V_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, output_V_offset_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            output_V_offset_blk_n <= output_V_offset_empty_n;
        else 
            output_V_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    output_V_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, output_V_offset_empty_n, cmpr_chunk_num_0_i_c_empty_n, data_num_0_i_c1_empty_n)
    begin
        if ((not(((output_V_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (data_num_0_i_c1_empty_n = ap_const_logic_0) or (cmpr_chunk_num_0_i_c_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            output_V_offset_read <= ap_const_logic_1;
        else 
            output_V_offset_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_i_i_fu_214_p3 <= (cmpr_chunk_num_0_i_c_dout & data_num_0_i_c1_dout);
    zext_ln332_1_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_V_offset_dout),59));
    zext_ln332_2_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln332_reg_340),64));
    zext_ln332_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i_fu_214_p3),59));
end behav;
