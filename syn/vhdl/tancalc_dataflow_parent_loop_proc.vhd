-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tancalc_dataflow_parent_loop_proc is
port (
    m_axi_input_V_AWVALID : OUT STD_LOGIC;
    m_axi_input_V_AWREADY : IN STD_LOGIC;
    m_axi_input_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_input_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_V_WVALID : OUT STD_LOGIC;
    m_axi_input_V_WREADY : IN STD_LOGIC;
    m_axi_input_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_input_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_input_V_WLAST : OUT STD_LOGIC;
    m_axi_input_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_V_ARVALID : OUT STD_LOGIC;
    m_axi_input_V_ARREADY : IN STD_LOGIC;
    m_axi_input_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_input_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_V_RVALID : IN STD_LOGIC;
    m_axi_input_V_RREADY : OUT STD_LOGIC;
    m_axi_input_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_input_V_RLAST : IN STD_LOGIC;
    m_axi_input_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_V_BVALID : IN STD_LOGIC;
    m_axi_input_V_BREADY : OUT STD_LOGIC;
    m_axi_input_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
    p_read : IN STD_LOGIC_VECTOR (1023 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (1023 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (1023 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (1023 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (1023 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (1023 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (1023 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (1023 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (1023 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (1023 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (1023 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (1023 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (1023 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (1023 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (1023 downto 0);
    p_read15 : IN STD_LOGIC_VECTOR (1023 downto 0);
    p_read16 : IN STD_LOGIC_VECTOR (10 downto 0);
    p_read17 : IN STD_LOGIC_VECTOR (10 downto 0);
    p_read18 : IN STD_LOGIC_VECTOR (10 downto 0);
    p_read19 : IN STD_LOGIC_VECTOR (10 downto 0);
    p_read20 : IN STD_LOGIC_VECTOR (10 downto 0);
    p_read21 : IN STD_LOGIC_VECTOR (10 downto 0);
    p_read22 : IN STD_LOGIC_VECTOR (10 downto 0);
    p_read23 : IN STD_LOGIC_VECTOR (10 downto 0);
    p_read24 : IN STD_LOGIC_VECTOR (10 downto 0);
    p_read25 : IN STD_LOGIC_VECTOR (10 downto 0);
    p_read26 : IN STD_LOGIC_VECTOR (10 downto 0);
    p_read27 : IN STD_LOGIC_VECTOR (10 downto 0);
    p_read28 : IN STD_LOGIC_VECTOR (10 downto 0);
    p_read29 : IN STD_LOGIC_VECTOR (10 downto 0);
    p_read30 : IN STD_LOGIC_VECTOR (10 downto 0);
    p_read31 : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_output_V_AWVALID : OUT STD_LOGIC;
    m_axi_output_V_AWREADY : IN STD_LOGIC;
    m_axi_output_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_output_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_output_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_V_WVALID : OUT STD_LOGIC;
    m_axi_output_V_WREADY : IN STD_LOGIC;
    m_axi_output_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_output_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_output_V_WLAST : OUT STD_LOGIC;
    m_axi_output_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_V_ARVALID : OUT STD_LOGIC;
    m_axi_output_V_ARREADY : IN STD_LOGIC;
    m_axi_output_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_output_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_output_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_V_RVALID : IN STD_LOGIC;
    m_axi_output_V_RREADY : OUT STD_LOGIC;
    m_axi_output_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_output_V_RLAST : IN STD_LOGIC;
    m_axi_output_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_V_BVALID : IN STD_LOGIC;
    m_axi_output_V_BREADY : OUT STD_LOGIC;
    m_axi_output_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    output_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
    cmpr_chunk_num_0_i : IN STD_LOGIC_VECTOR (2 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    input_V_offset_ap_vld : IN STD_LOGIC;
    p_read_ap_vld : IN STD_LOGIC;
    p_read1_ap_vld : IN STD_LOGIC;
    p_read2_ap_vld : IN STD_LOGIC;
    p_read3_ap_vld : IN STD_LOGIC;
    p_read4_ap_vld : IN STD_LOGIC;
    p_read5_ap_vld : IN STD_LOGIC;
    p_read6_ap_vld : IN STD_LOGIC;
    p_read7_ap_vld : IN STD_LOGIC;
    p_read8_ap_vld : IN STD_LOGIC;
    p_read9_ap_vld : IN STD_LOGIC;
    p_read10_ap_vld : IN STD_LOGIC;
    p_read11_ap_vld : IN STD_LOGIC;
    p_read12_ap_vld : IN STD_LOGIC;
    p_read13_ap_vld : IN STD_LOGIC;
    p_read14_ap_vld : IN STD_LOGIC;
    p_read15_ap_vld : IN STD_LOGIC;
    p_read16_ap_vld : IN STD_LOGIC;
    p_read17_ap_vld : IN STD_LOGIC;
    p_read18_ap_vld : IN STD_LOGIC;
    p_read19_ap_vld : IN STD_LOGIC;
    p_read20_ap_vld : IN STD_LOGIC;
    p_read21_ap_vld : IN STD_LOGIC;
    p_read22_ap_vld : IN STD_LOGIC;
    p_read23_ap_vld : IN STD_LOGIC;
    p_read24_ap_vld : IN STD_LOGIC;
    p_read25_ap_vld : IN STD_LOGIC;
    p_read26_ap_vld : IN STD_LOGIC;
    p_read27_ap_vld : IN STD_LOGIC;
    p_read28_ap_vld : IN STD_LOGIC;
    p_read29_ap_vld : IN STD_LOGIC;
    p_read30_ap_vld : IN STD_LOGIC;
    p_read31_ap_vld : IN STD_LOGIC;
    output_V_offset_ap_vld : IN STD_LOGIC;
    cmpr_chunk_num_0_i_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of tancalc_dataflow_parent_loop_proc is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv512_lc_3 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal dataflow_in_loop_subloop_U0_m_axi_input_V_AWVALID : STD_LOGIC;
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_WVALID : STD_LOGIC;
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_WLAST : STD_LOGIC;
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_ARVALID : STD_LOGIC;
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_RREADY : STD_LOGIC;
    signal dataflow_in_loop_subloop_U0_m_axi_input_V_BREADY : STD_LOGIC;
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_AWVALID : STD_LOGIC;
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_WVALID : STD_LOGIC;
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_WLAST : STD_LOGIC;
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_ARVALID : STD_LOGIC;
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_RREADY : STD_LOGIC;
    signal dataflow_in_loop_subloop_U0_m_axi_output_V_BREADY : STD_LOGIC;
    signal dataflow_in_loop_subloop_U0_cmpr_chunk_num_0_i : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_subloop_U0_ap_start : STD_LOGIC;
    signal dataflow_in_loop_subloop_U0_ap_done : STD_LOGIC;
    signal dataflow_in_loop_subloop_U0_ap_ready : STD_LOGIC;
    signal dataflow_in_loop_subloop_U0_ap_idle : STD_LOGIC;
    signal dataflow_in_loop_subloop_U0_ap_continue : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal loop_dataflow_input_count : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal loop_dataflow_output_count : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal bound_minus_1 : STD_LOGIC_VECTOR (6 downto 0);
    signal dataflow_in_loop_subloop_U0_start_full_n : STD_LOGIC;
    signal dataflow_in_loop_subloop_U0_start_write : STD_LOGIC;

    component tancalc_dataflow_in_loop_subloop IS
    port (
        m_axi_input_V_AWVALID : OUT STD_LOGIC;
        m_axi_input_V_AWREADY : IN STD_LOGIC;
        m_axi_input_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_input_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_WVALID : OUT STD_LOGIC;
        m_axi_input_V_WREADY : IN STD_LOGIC;
        m_axi_input_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_input_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_input_V_WLAST : OUT STD_LOGIC;
        m_axi_input_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_ARVALID : OUT STD_LOGIC;
        m_axi_input_V_ARREADY : IN STD_LOGIC;
        m_axi_input_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_input_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_RVALID : IN STD_LOGIC;
        m_axi_input_V_RREADY : OUT STD_LOGIC;
        m_axi_input_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_input_V_RLAST : IN STD_LOGIC;
        m_axi_input_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_BVALID : IN STD_LOGIC;
        m_axi_input_V_BREADY : OUT STD_LOGIC;
        m_axi_input_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
        data_num_0_i : IN STD_LOGIC_VECTOR (6 downto 0);
        p_read : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read15 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read16 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read17 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read18 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read19 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read20 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read21 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read22 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read23 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read24 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read25 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read26 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read27 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read28 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read29 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read30 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read31 : IN STD_LOGIC_VECTOR (9 downto 0);
        m_axi_output_V_AWVALID : OUT STD_LOGIC;
        m_axi_output_V_AWREADY : IN STD_LOGIC;
        m_axi_output_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_output_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_V_WVALID : OUT STD_LOGIC;
        m_axi_output_V_WREADY : IN STD_LOGIC;
        m_axi_output_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_output_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_output_V_WLAST : OUT STD_LOGIC;
        m_axi_output_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_V_ARVALID : OUT STD_LOGIC;
        m_axi_output_V_ARREADY : IN STD_LOGIC;
        m_axi_output_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_output_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_V_RVALID : IN STD_LOGIC;
        m_axi_output_V_RREADY : OUT STD_LOGIC;
        m_axi_output_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_output_V_RLAST : IN STD_LOGIC;
        m_axi_output_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_V_BVALID : IN STD_LOGIC;
        m_axi_output_V_BREADY : OUT STD_LOGIC;
        m_axi_output_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        output_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
        cmpr_chunk_num_0_i : IN STD_LOGIC_VECTOR (1 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        input_V_offset_ap_vld : IN STD_LOGIC;
        data_num_0_i_ap_vld : IN STD_LOGIC;
        p_read_ap_vld : IN STD_LOGIC;
        p_read1_ap_vld : IN STD_LOGIC;
        p_read2_ap_vld : IN STD_LOGIC;
        p_read3_ap_vld : IN STD_LOGIC;
        p_read4_ap_vld : IN STD_LOGIC;
        p_read5_ap_vld : IN STD_LOGIC;
        p_read6_ap_vld : IN STD_LOGIC;
        p_read7_ap_vld : IN STD_LOGIC;
        p_read8_ap_vld : IN STD_LOGIC;
        p_read9_ap_vld : IN STD_LOGIC;
        p_read10_ap_vld : IN STD_LOGIC;
        p_read11_ap_vld : IN STD_LOGIC;
        p_read12_ap_vld : IN STD_LOGIC;
        p_read13_ap_vld : IN STD_LOGIC;
        p_read14_ap_vld : IN STD_LOGIC;
        p_read15_ap_vld : IN STD_LOGIC;
        p_read16_ap_vld : IN STD_LOGIC;
        p_read17_ap_vld : IN STD_LOGIC;
        p_read18_ap_vld : IN STD_LOGIC;
        p_read19_ap_vld : IN STD_LOGIC;
        p_read20_ap_vld : IN STD_LOGIC;
        p_read21_ap_vld : IN STD_LOGIC;
        p_read22_ap_vld : IN STD_LOGIC;
        p_read23_ap_vld : IN STD_LOGIC;
        p_read24_ap_vld : IN STD_LOGIC;
        p_read25_ap_vld : IN STD_LOGIC;
        p_read26_ap_vld : IN STD_LOGIC;
        p_read27_ap_vld : IN STD_LOGIC;
        p_read28_ap_vld : IN STD_LOGIC;
        p_read29_ap_vld : IN STD_LOGIC;
        p_read30_ap_vld : IN STD_LOGIC;
        p_read31_ap_vld : IN STD_LOGIC;
        cmpr_chunk_num_0_i_ap_vld : IN STD_LOGIC;
        output_V_offset_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    dataflow_in_loop_subloop_U0 : component tancalc_dataflow_in_loop_subloop
    port map (
        m_axi_input_V_AWVALID => dataflow_in_loop_subloop_U0_m_axi_input_V_AWVALID,
        m_axi_input_V_AWREADY => ap_const_logic_0,
        m_axi_input_V_AWADDR => dataflow_in_loop_subloop_U0_m_axi_input_V_AWADDR,
        m_axi_input_V_AWID => dataflow_in_loop_subloop_U0_m_axi_input_V_AWID,
        m_axi_input_V_AWLEN => dataflow_in_loop_subloop_U0_m_axi_input_V_AWLEN,
        m_axi_input_V_AWSIZE => dataflow_in_loop_subloop_U0_m_axi_input_V_AWSIZE,
        m_axi_input_V_AWBURST => dataflow_in_loop_subloop_U0_m_axi_input_V_AWBURST,
        m_axi_input_V_AWLOCK => dataflow_in_loop_subloop_U0_m_axi_input_V_AWLOCK,
        m_axi_input_V_AWCACHE => dataflow_in_loop_subloop_U0_m_axi_input_V_AWCACHE,
        m_axi_input_V_AWPROT => dataflow_in_loop_subloop_U0_m_axi_input_V_AWPROT,
        m_axi_input_V_AWQOS => dataflow_in_loop_subloop_U0_m_axi_input_V_AWQOS,
        m_axi_input_V_AWREGION => dataflow_in_loop_subloop_U0_m_axi_input_V_AWREGION,
        m_axi_input_V_AWUSER => dataflow_in_loop_subloop_U0_m_axi_input_V_AWUSER,
        m_axi_input_V_WVALID => dataflow_in_loop_subloop_U0_m_axi_input_V_WVALID,
        m_axi_input_V_WREADY => ap_const_logic_0,
        m_axi_input_V_WDATA => dataflow_in_loop_subloop_U0_m_axi_input_V_WDATA,
        m_axi_input_V_WSTRB => dataflow_in_loop_subloop_U0_m_axi_input_V_WSTRB,
        m_axi_input_V_WLAST => dataflow_in_loop_subloop_U0_m_axi_input_V_WLAST,
        m_axi_input_V_WID => dataflow_in_loop_subloop_U0_m_axi_input_V_WID,
        m_axi_input_V_WUSER => dataflow_in_loop_subloop_U0_m_axi_input_V_WUSER,
        m_axi_input_V_ARVALID => dataflow_in_loop_subloop_U0_m_axi_input_V_ARVALID,
        m_axi_input_V_ARREADY => m_axi_input_V_ARREADY,
        m_axi_input_V_ARADDR => dataflow_in_loop_subloop_U0_m_axi_input_V_ARADDR,
        m_axi_input_V_ARID => dataflow_in_loop_subloop_U0_m_axi_input_V_ARID,
        m_axi_input_V_ARLEN => dataflow_in_loop_subloop_U0_m_axi_input_V_ARLEN,
        m_axi_input_V_ARSIZE => dataflow_in_loop_subloop_U0_m_axi_input_V_ARSIZE,
        m_axi_input_V_ARBURST => dataflow_in_loop_subloop_U0_m_axi_input_V_ARBURST,
        m_axi_input_V_ARLOCK => dataflow_in_loop_subloop_U0_m_axi_input_V_ARLOCK,
        m_axi_input_V_ARCACHE => dataflow_in_loop_subloop_U0_m_axi_input_V_ARCACHE,
        m_axi_input_V_ARPROT => dataflow_in_loop_subloop_U0_m_axi_input_V_ARPROT,
        m_axi_input_V_ARQOS => dataflow_in_loop_subloop_U0_m_axi_input_V_ARQOS,
        m_axi_input_V_ARREGION => dataflow_in_loop_subloop_U0_m_axi_input_V_ARREGION,
        m_axi_input_V_ARUSER => dataflow_in_loop_subloop_U0_m_axi_input_V_ARUSER,
        m_axi_input_V_RVALID => m_axi_input_V_RVALID,
        m_axi_input_V_RREADY => dataflow_in_loop_subloop_U0_m_axi_input_V_RREADY,
        m_axi_input_V_RDATA => m_axi_input_V_RDATA,
        m_axi_input_V_RLAST => m_axi_input_V_RLAST,
        m_axi_input_V_RID => m_axi_input_V_RID,
        m_axi_input_V_RUSER => m_axi_input_V_RUSER,
        m_axi_input_V_RRESP => m_axi_input_V_RRESP,
        m_axi_input_V_BVALID => ap_const_logic_0,
        m_axi_input_V_BREADY => dataflow_in_loop_subloop_U0_m_axi_input_V_BREADY,
        m_axi_input_V_BRESP => ap_const_lv2_0,
        m_axi_input_V_BID => ap_const_lv1_0,
        m_axi_input_V_BUSER => ap_const_lv1_0,
        input_V_offset => input_V_offset,
        data_num_0_i => loop_dataflow_input_count,
        p_read => p_read,
        p_read1 => p_read1,
        p_read2 => p_read2,
        p_read3 => p_read3,
        p_read4 => p_read4,
        p_read5 => p_read5,
        p_read6 => p_read6,
        p_read7 => p_read7,
        p_read8 => p_read8,
        p_read9 => p_read9,
        p_read10 => p_read10,
        p_read11 => p_read11,
        p_read12 => p_read12,
        p_read13 => p_read13,
        p_read14 => p_read14,
        p_read15 => p_read15,
        p_read16 => p_read16,
        p_read17 => p_read17,
        p_read18 => p_read18,
        p_read19 => p_read19,
        p_read20 => p_read20,
        p_read21 => p_read21,
        p_read22 => p_read22,
        p_read23 => p_read23,
        p_read24 => p_read24,
        p_read25 => p_read25,
        p_read26 => p_read26,
        p_read27 => p_read27,
        p_read28 => p_read28,
        p_read29 => p_read29,
        p_read30 => p_read30,
        p_read31 => p_read31,
        m_axi_output_V_AWVALID => dataflow_in_loop_subloop_U0_m_axi_output_V_AWVALID,
        m_axi_output_V_AWREADY => m_axi_output_V_AWREADY,
        m_axi_output_V_AWADDR => dataflow_in_loop_subloop_U0_m_axi_output_V_AWADDR,
        m_axi_output_V_AWID => dataflow_in_loop_subloop_U0_m_axi_output_V_AWID,
        m_axi_output_V_AWLEN => dataflow_in_loop_subloop_U0_m_axi_output_V_AWLEN,
        m_axi_output_V_AWSIZE => dataflow_in_loop_subloop_U0_m_axi_output_V_AWSIZE,
        m_axi_output_V_AWBURST => dataflow_in_loop_subloop_U0_m_axi_output_V_AWBURST,
        m_axi_output_V_AWLOCK => dataflow_in_loop_subloop_U0_m_axi_output_V_AWLOCK,
        m_axi_output_V_AWCACHE => dataflow_in_loop_subloop_U0_m_axi_output_V_AWCACHE,
        m_axi_output_V_AWPROT => dataflow_in_loop_subloop_U0_m_axi_output_V_AWPROT,
        m_axi_output_V_AWQOS => dataflow_in_loop_subloop_U0_m_axi_output_V_AWQOS,
        m_axi_output_V_AWREGION => dataflow_in_loop_subloop_U0_m_axi_output_V_AWREGION,
        m_axi_output_V_AWUSER => dataflow_in_loop_subloop_U0_m_axi_output_V_AWUSER,
        m_axi_output_V_WVALID => dataflow_in_loop_subloop_U0_m_axi_output_V_WVALID,
        m_axi_output_V_WREADY => m_axi_output_V_WREADY,
        m_axi_output_V_WDATA => dataflow_in_loop_subloop_U0_m_axi_output_V_WDATA,
        m_axi_output_V_WSTRB => dataflow_in_loop_subloop_U0_m_axi_output_V_WSTRB,
        m_axi_output_V_WLAST => dataflow_in_loop_subloop_U0_m_axi_output_V_WLAST,
        m_axi_output_V_WID => dataflow_in_loop_subloop_U0_m_axi_output_V_WID,
        m_axi_output_V_WUSER => dataflow_in_loop_subloop_U0_m_axi_output_V_WUSER,
        m_axi_output_V_ARVALID => dataflow_in_loop_subloop_U0_m_axi_output_V_ARVALID,
        m_axi_output_V_ARREADY => ap_const_logic_0,
        m_axi_output_V_ARADDR => dataflow_in_loop_subloop_U0_m_axi_output_V_ARADDR,
        m_axi_output_V_ARID => dataflow_in_loop_subloop_U0_m_axi_output_V_ARID,
        m_axi_output_V_ARLEN => dataflow_in_loop_subloop_U0_m_axi_output_V_ARLEN,
        m_axi_output_V_ARSIZE => dataflow_in_loop_subloop_U0_m_axi_output_V_ARSIZE,
        m_axi_output_V_ARBURST => dataflow_in_loop_subloop_U0_m_axi_output_V_ARBURST,
        m_axi_output_V_ARLOCK => dataflow_in_loop_subloop_U0_m_axi_output_V_ARLOCK,
        m_axi_output_V_ARCACHE => dataflow_in_loop_subloop_U0_m_axi_output_V_ARCACHE,
        m_axi_output_V_ARPROT => dataflow_in_loop_subloop_U0_m_axi_output_V_ARPROT,
        m_axi_output_V_ARQOS => dataflow_in_loop_subloop_U0_m_axi_output_V_ARQOS,
        m_axi_output_V_ARREGION => dataflow_in_loop_subloop_U0_m_axi_output_V_ARREGION,
        m_axi_output_V_ARUSER => dataflow_in_loop_subloop_U0_m_axi_output_V_ARUSER,
        m_axi_output_V_RVALID => ap_const_logic_0,
        m_axi_output_V_RREADY => dataflow_in_loop_subloop_U0_m_axi_output_V_RREADY,
        m_axi_output_V_RDATA => ap_const_lv512_lc_1,
        m_axi_output_V_RLAST => ap_const_logic_0,
        m_axi_output_V_RID => ap_const_lv1_0,
        m_axi_output_V_RUSER => ap_const_lv1_0,
        m_axi_output_V_RRESP => ap_const_lv2_0,
        m_axi_output_V_BVALID => m_axi_output_V_BVALID,
        m_axi_output_V_BREADY => dataflow_in_loop_subloop_U0_m_axi_output_V_BREADY,
        m_axi_output_V_BRESP => m_axi_output_V_BRESP,
        m_axi_output_V_BID => m_axi_output_V_BID,
        m_axi_output_V_BUSER => m_axi_output_V_BUSER,
        output_V_offset => output_V_offset,
        cmpr_chunk_num_0_i => dataflow_in_loop_subloop_U0_cmpr_chunk_num_0_i,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        input_V_offset_ap_vld => input_V_offset_ap_vld,
        data_num_0_i_ap_vld => ap_const_logic_0,
        p_read_ap_vld => p_read_ap_vld,
        p_read1_ap_vld => p_read1_ap_vld,
        p_read2_ap_vld => p_read2_ap_vld,
        p_read3_ap_vld => p_read3_ap_vld,
        p_read4_ap_vld => p_read4_ap_vld,
        p_read5_ap_vld => p_read5_ap_vld,
        p_read6_ap_vld => p_read6_ap_vld,
        p_read7_ap_vld => p_read7_ap_vld,
        p_read8_ap_vld => p_read8_ap_vld,
        p_read9_ap_vld => p_read9_ap_vld,
        p_read10_ap_vld => p_read10_ap_vld,
        p_read11_ap_vld => p_read11_ap_vld,
        p_read12_ap_vld => p_read12_ap_vld,
        p_read13_ap_vld => p_read13_ap_vld,
        p_read14_ap_vld => p_read14_ap_vld,
        p_read15_ap_vld => p_read15_ap_vld,
        p_read16_ap_vld => p_read16_ap_vld,
        p_read17_ap_vld => p_read17_ap_vld,
        p_read18_ap_vld => p_read18_ap_vld,
        p_read19_ap_vld => p_read19_ap_vld,
        p_read20_ap_vld => p_read20_ap_vld,
        p_read21_ap_vld => p_read21_ap_vld,
        p_read22_ap_vld => p_read22_ap_vld,
        p_read23_ap_vld => p_read23_ap_vld,
        p_read24_ap_vld => p_read24_ap_vld,
        p_read25_ap_vld => p_read25_ap_vld,
        p_read26_ap_vld => p_read26_ap_vld,
        p_read27_ap_vld => p_read27_ap_vld,
        p_read28_ap_vld => p_read28_ap_vld,
        p_read29_ap_vld => p_read29_ap_vld,
        p_read30_ap_vld => p_read30_ap_vld,
        p_read31_ap_vld => p_read31_ap_vld,
        cmpr_chunk_num_0_i_ap_vld => cmpr_chunk_num_0_i_ap_vld,
        output_V_offset_ap_vld => output_V_offset_ap_vld,
        ap_start => dataflow_in_loop_subloop_U0_ap_start,
        ap_done => dataflow_in_loop_subloop_U0_ap_done,
        ap_ready => dataflow_in_loop_subloop_U0_ap_ready,
        ap_idle => dataflow_in_loop_subloop_U0_ap_idle,
        ap_continue => dataflow_in_loop_subloop_U0_ap_continue);





    loop_dataflow_input_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                loop_dataflow_input_count <= ap_const_lv7_0;
            else
                if ((not((loop_dataflow_input_count = bound_minus_1)) and (ap_start = ap_const_logic_1) and (dataflow_in_loop_subloop_U0_ap_ready = ap_const_logic_1))) then 
                    loop_dataflow_input_count <= std_logic_vector(unsigned(loop_dataflow_input_count) + unsigned(ap_const_lv7_1));
                elsif (((loop_dataflow_input_count = bound_minus_1) and (ap_start = ap_const_logic_1) and (dataflow_in_loop_subloop_U0_ap_ready = ap_const_logic_1))) then 
                    loop_dataflow_input_count <= ap_const_lv7_0;
                end if; 
            end if;
        end if;
    end process;


    loop_dataflow_output_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                loop_dataflow_output_count <= ap_const_lv7_0;
            else
                if ((not((loop_dataflow_output_count = bound_minus_1)) and (dataflow_in_loop_subloop_U0_ap_continue = ap_const_logic_1) and (dataflow_in_loop_subloop_U0_ap_done = ap_const_logic_1))) then 
                    loop_dataflow_output_count <= std_logic_vector(unsigned(loop_dataflow_output_count) + unsigned(ap_const_lv7_1));
                elsif (((loop_dataflow_output_count = bound_minus_1) and (dataflow_in_loop_subloop_U0_ap_continue = ap_const_logic_1) and (dataflow_in_loop_subloop_U0_ap_done = ap_const_logic_1))) then 
                    loop_dataflow_output_count <= ap_const_lv7_0;
                end if; 
            end if;
        end if;
    end process;


    ap_done_assign_proc : process(dataflow_in_loop_subloop_U0_ap_done, loop_dataflow_output_count, bound_minus_1)
    begin
        if (((loop_dataflow_output_count = bound_minus_1) and (dataflow_in_loop_subloop_U0_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(dataflow_in_loop_subloop_U0_ap_idle, ap_start, loop_dataflow_output_count)
    begin
        if (((loop_dataflow_output_count = ap_const_lv7_0) and (ap_start = ap_const_logic_0) and (dataflow_in_loop_subloop_U0_ap_idle = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(dataflow_in_loop_subloop_U0_ap_ready, ap_start, loop_dataflow_input_count, bound_minus_1)
    begin
        if (((loop_dataflow_input_count = bound_minus_1) and (ap_start = ap_const_logic_1) and (dataflow_in_loop_subloop_U0_ap_ready = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_continue <= ap_continue;
    ap_sync_done <= dataflow_in_loop_subloop_U0_ap_done;
    ap_sync_ready <= dataflow_in_loop_subloop_U0_ap_ready;
    bound_minus_1 <= std_logic_vector(unsigned(ap_const_lv7_40) - unsigned(ap_const_lv7_1));

    dataflow_in_loop_subloop_U0_ap_continue_assign_proc : process(ap_continue, loop_dataflow_output_count, bound_minus_1)
    begin
        if ((not((loop_dataflow_output_count = bound_minus_1)) or (ap_continue = ap_const_logic_1))) then 
            dataflow_in_loop_subloop_U0_ap_continue <= ap_const_logic_1;
        else 
            dataflow_in_loop_subloop_U0_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    dataflow_in_loop_subloop_U0_ap_start <= ap_start;
    
    dataflow_in_loop_subloop_U0_cmpr_chunk_num_0_i_proc : process(cmpr_chunk_num_0_i)
    variable vlo_cpy : STD_LOGIC_VECTOR(3+3 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(3+3 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(3 - 1 downto 0);
    variable dataflow_in_loop_subloop_U0_cmpr_chunk_num_0_i_i : integer;
    variable section : STD_LOGIC_VECTOR(3 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(3 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(3 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(2 - 1 downto 0) := ap_const_lv3_0(2 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(2 - 1 downto 0) := ap_const_lv3_2(2 - 1 downto 0);
        v0_cpy := cmpr_chunk_num_0_i;
        if (vlo_cpy(2 - 1 downto 0) > vhi_cpy(2 - 1 downto 0)) then
            vhi_cpy(2-1 downto 0) := std_logic_vector(3-1-unsigned(ap_const_lv3_2(2-1 downto 0)));
            vlo_cpy(2-1 downto 0) := std_logic_vector(3-1-unsigned(ap_const_lv3_0(2-1 downto 0)));
            for dataflow_in_loop_subloop_U0_cmpr_chunk_num_0_i_i in 0 to 3-1 loop
                v0_cpy(dataflow_in_loop_subloop_U0_cmpr_chunk_num_0_i_i) := cmpr_chunk_num_0_i(3-1-dataflow_in_loop_subloop_U0_cmpr_chunk_num_0_i_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(2-1 downto 0)))));

        section := (others=>'0');
        section(2-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(2-1 downto 0)) - unsigned(vlo_cpy(2-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(3-1 downto 0)))));
        res_mask := res_mask(3-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        dataflow_in_loop_subloop_U0_cmpr_chunk_num_0_i <= resvalue(2-1 downto 0);
    end process;

    dataflow_in_loop_subloop_U0_start_full_n <= ap_const_logic_1;
    dataflow_in_loop_subloop_U0_start_write <= ap_const_logic_0;
    m_axi_input_V_ARADDR <= dataflow_in_loop_subloop_U0_m_axi_input_V_ARADDR;
    m_axi_input_V_ARBURST <= dataflow_in_loop_subloop_U0_m_axi_input_V_ARBURST;
    m_axi_input_V_ARCACHE <= dataflow_in_loop_subloop_U0_m_axi_input_V_ARCACHE;
    m_axi_input_V_ARID <= dataflow_in_loop_subloop_U0_m_axi_input_V_ARID;
    m_axi_input_V_ARLEN <= dataflow_in_loop_subloop_U0_m_axi_input_V_ARLEN;
    m_axi_input_V_ARLOCK <= dataflow_in_loop_subloop_U0_m_axi_input_V_ARLOCK;
    m_axi_input_V_ARPROT <= dataflow_in_loop_subloop_U0_m_axi_input_V_ARPROT;
    m_axi_input_V_ARQOS <= dataflow_in_loop_subloop_U0_m_axi_input_V_ARQOS;
    m_axi_input_V_ARREGION <= dataflow_in_loop_subloop_U0_m_axi_input_V_ARREGION;
    m_axi_input_V_ARSIZE <= dataflow_in_loop_subloop_U0_m_axi_input_V_ARSIZE;
    m_axi_input_V_ARUSER <= dataflow_in_loop_subloop_U0_m_axi_input_V_ARUSER;
    m_axi_input_V_ARVALID <= dataflow_in_loop_subloop_U0_m_axi_input_V_ARVALID;
    m_axi_input_V_AWADDR <= ap_const_lv64_0;
    m_axi_input_V_AWBURST <= ap_const_lv2_0;
    m_axi_input_V_AWCACHE <= ap_const_lv4_0;
    m_axi_input_V_AWID <= ap_const_lv1_0;
    m_axi_input_V_AWLEN <= ap_const_lv32_0;
    m_axi_input_V_AWLOCK <= ap_const_lv2_0;
    m_axi_input_V_AWPROT <= ap_const_lv3_0;
    m_axi_input_V_AWQOS <= ap_const_lv4_0;
    m_axi_input_V_AWREGION <= ap_const_lv4_0;
    m_axi_input_V_AWSIZE <= ap_const_lv3_0;
    m_axi_input_V_AWUSER <= ap_const_lv1_0;
    m_axi_input_V_AWVALID <= ap_const_logic_0;
    m_axi_input_V_BREADY <= ap_const_logic_0;
    m_axi_input_V_RREADY <= dataflow_in_loop_subloop_U0_m_axi_input_V_RREADY;
    m_axi_input_V_WDATA <= ap_const_lv512_lc_1;
    m_axi_input_V_WID <= ap_const_lv1_0;
    m_axi_input_V_WLAST <= ap_const_logic_0;
    m_axi_input_V_WSTRB <= ap_const_lv64_0;
    m_axi_input_V_WUSER <= ap_const_lv1_0;
    m_axi_input_V_WVALID <= ap_const_logic_0;
    m_axi_output_V_ARADDR <= ap_const_lv64_0;
    m_axi_output_V_ARBURST <= ap_const_lv2_0;
    m_axi_output_V_ARCACHE <= ap_const_lv4_0;
    m_axi_output_V_ARID <= ap_const_lv1_0;
    m_axi_output_V_ARLEN <= ap_const_lv32_0;
    m_axi_output_V_ARLOCK <= ap_const_lv2_0;
    m_axi_output_V_ARPROT <= ap_const_lv3_0;
    m_axi_output_V_ARQOS <= ap_const_lv4_0;
    m_axi_output_V_ARREGION <= ap_const_lv4_0;
    m_axi_output_V_ARSIZE <= ap_const_lv3_0;
    m_axi_output_V_ARUSER <= ap_const_lv1_0;
    m_axi_output_V_ARVALID <= ap_const_logic_0;
    m_axi_output_V_AWADDR <= dataflow_in_loop_subloop_U0_m_axi_output_V_AWADDR;
    m_axi_output_V_AWBURST <= dataflow_in_loop_subloop_U0_m_axi_output_V_AWBURST;
    m_axi_output_V_AWCACHE <= dataflow_in_loop_subloop_U0_m_axi_output_V_AWCACHE;
    m_axi_output_V_AWID <= dataflow_in_loop_subloop_U0_m_axi_output_V_AWID;
    m_axi_output_V_AWLEN <= dataflow_in_loop_subloop_U0_m_axi_output_V_AWLEN;
    m_axi_output_V_AWLOCK <= dataflow_in_loop_subloop_U0_m_axi_output_V_AWLOCK;
    m_axi_output_V_AWPROT <= dataflow_in_loop_subloop_U0_m_axi_output_V_AWPROT;
    m_axi_output_V_AWQOS <= dataflow_in_loop_subloop_U0_m_axi_output_V_AWQOS;
    m_axi_output_V_AWREGION <= dataflow_in_loop_subloop_U0_m_axi_output_V_AWREGION;
    m_axi_output_V_AWSIZE <= dataflow_in_loop_subloop_U0_m_axi_output_V_AWSIZE;
    m_axi_output_V_AWUSER <= dataflow_in_loop_subloop_U0_m_axi_output_V_AWUSER;
    m_axi_output_V_AWVALID <= dataflow_in_loop_subloop_U0_m_axi_output_V_AWVALID;
    m_axi_output_V_BREADY <= dataflow_in_loop_subloop_U0_m_axi_output_V_BREADY;
    m_axi_output_V_RREADY <= ap_const_logic_0;
    m_axi_output_V_WDATA <= dataflow_in_loop_subloop_U0_m_axi_output_V_WDATA;
    m_axi_output_V_WID <= dataflow_in_loop_subloop_U0_m_axi_output_V_WID;
    m_axi_output_V_WLAST <= dataflow_in_loop_subloop_U0_m_axi_output_V_WLAST;
    m_axi_output_V_WSTRB <= dataflow_in_loop_subloop_U0_m_axi_output_V_WSTRB;
    m_axi_output_V_WUSER <= dataflow_in_loop_subloop_U0_m_axi_output_V_WUSER;
    m_axi_output_V_WVALID <= dataflow_in_loop_subloop_U0_m_axi_output_V_WVALID;
end behav;
