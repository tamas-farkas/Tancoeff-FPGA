-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tancalc_tancalc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input1_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    input1_ce0 : OUT STD_LOGIC;
    input1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input2_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    input2_ce0 : OUT STD_LOGIC;
    input2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    size : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of tancalc_tancalc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "tancalc_tancalc,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-fsgd2104-2L-e,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.428500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=341,HLS_SYN_LUT=1751,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv16_80 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_reg : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg : signal is "no";
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal result_local_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal result_local_ce0 : STD_LOGIC;
    signal result_local_we0 : STD_LOGIC;
    signal result_local_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_0_reg_138 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_0_reg_150 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln61_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal cmpr_chunk_num_fu_205_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmpr_chunk_num_reg_267 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln64_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ref_chunk_num_fu_211_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln71_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state8_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_fu_223_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal result_fu_238_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state8 : STD_LOGIC;
    signal ref_local_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal ref_local_ce0 : STD_LOGIC;
    signal ref_local_we0 : STD_LOGIC;
    signal ref_local_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal refpop_local_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal refpop_local_ce0 : STD_LOGIC;
    signal refpop_local_we0 : STD_LOGIC;
    signal refpop_local_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal cmpr_local_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal cmpr_local_ce0 : STD_LOGIC;
    signal cmpr_local_we0 : STD_LOGIC;
    signal cmpr_local_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmprpop_local_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal cmprpop_local_ce0 : STD_LOGIC;
    signal cmprpop_local_we0 : STD_LOGIC;
    signal cmprpop_local_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_calculation_fu_161_ap_start : STD_LOGIC;
    signal grp_calculation_fu_161_ap_done : STD_LOGIC;
    signal grp_calculation_fu_161_ap_idle : STD_LOGIC;
    signal grp_calculation_fu_161_ap_ready : STD_LOGIC;
    signal grp_calculation_fu_161_ref_local_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_calculation_fu_161_ref_local_ce0 : STD_LOGIC;
    signal grp_calculation_fu_161_cmpr_local_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_calculation_fu_161_cmpr_local_ce0 : STD_LOGIC;
    signal grp_calculation_fu_161_refpop_local_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_calculation_fu_161_refpop_local_ce0 : STD_LOGIC;
    signal grp_calculation_fu_161_cmprpop_local_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_calculation_fu_161_cmprpop_local_ce0 : STD_LOGIC;
    signal grp_calculation_fu_161_result_local_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_calculation_fu_161_result_local_ce0 : STD_LOGIC;
    signal grp_calculation_fu_161_result_local_we0 : STD_LOGIC;
    signal grp_calculation_fu_161_result_local_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cmpr_read_fu_171_ap_start : STD_LOGIC;
    signal grp_cmpr_read_fu_171_ap_done : STD_LOGIC;
    signal grp_cmpr_read_fu_171_ap_idle : STD_LOGIC;
    signal grp_cmpr_read_fu_171_ap_ready : STD_LOGIC;
    signal grp_cmpr_read_fu_171_input_r_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_cmpr_read_fu_171_input_r_ce0 : STD_LOGIC;
    signal grp_cmpr_read_fu_171_cmpr_local_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_cmpr_read_fu_171_cmpr_local_ce0 : STD_LOGIC;
    signal grp_cmpr_read_fu_171_cmpr_local_we0 : STD_LOGIC;
    signal grp_cmpr_read_fu_171_cmpr_local_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cmpr_read_fu_171_cmprpop_local_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_cmpr_read_fu_171_cmprpop_local_ce0 : STD_LOGIC;
    signal grp_cmpr_read_fu_171_cmprpop_local_we0 : STD_LOGIC;
    signal grp_cmpr_read_fu_171_cmprpop_local_d0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_ref_read_fu_181_ap_start : STD_LOGIC;
    signal grp_ref_read_fu_181_ap_done : STD_LOGIC;
    signal grp_ref_read_fu_181_ap_idle : STD_LOGIC;
    signal grp_ref_read_fu_181_ap_ready : STD_LOGIC;
    signal grp_ref_read_fu_181_input_r_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_ref_read_fu_181_input_r_ce0 : STD_LOGIC;
    signal grp_ref_read_fu_181_ref_local_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_ref_read_fu_181_ref_local_ce0 : STD_LOGIC;
    signal grp_ref_read_fu_181_ref_local_we0 : STD_LOGIC;
    signal grp_ref_read_fu_181_ref_local_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ref_read_fu_181_refpop_local_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_ref_read_fu_181_refpop_local_ce0 : STD_LOGIC;
    signal grp_ref_read_fu_181_refpop_local_we0 : STD_LOGIC;
    signal grp_ref_read_fu_181_refpop_local_d0 : STD_LOGIC_VECTOR (5 downto 0);
    signal ref_chunk_num_0_reg_114 : STD_LOGIC_VECTOR (15 downto 0);
    signal cmpr_chunk_num_0_reg_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_calculation_fu_161_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_cmpr_read_fu_171_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_ref_read_fu_181_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln72_fu_229_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln61_fu_191_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln72_1_fu_234_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component tancalc_calculation IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ref_local_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ref_local_ce0 : OUT STD_LOGIC;
        ref_local_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cmpr_local_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        cmpr_local_ce0 : OUT STD_LOGIC;
        cmpr_local_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        refpop_local_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        refpop_local_ce0 : OUT STD_LOGIC;
        refpop_local_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
        cmprpop_local_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        cmprpop_local_ce0 : OUT STD_LOGIC;
        cmprpop_local_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
        result_local_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        result_local_ce0 : OUT STD_LOGIC;
        result_local_we0 : OUT STD_LOGIC;
        result_local_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component tancalc_cmpr_read IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cmpr_local_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        cmpr_local_ce0 : OUT STD_LOGIC;
        cmpr_local_we0 : OUT STD_LOGIC;
        cmpr_local_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        cmprpop_local_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        cmprpop_local_ce0 : OUT STD_LOGIC;
        cmprpop_local_we0 : OUT STD_LOGIC;
        cmprpop_local_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        chunk_num : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component tancalc_ref_read IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ref_local_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ref_local_ce0 : OUT STD_LOGIC;
        ref_local_we0 : OUT STD_LOGIC;
        ref_local_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        refpop_local_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        refpop_local_ce0 : OUT STD_LOGIC;
        refpop_local_we0 : OUT STD_LOGIC;
        refpop_local_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        chunk_num : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component tancalc_tancalc_result_local IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component tancalc_tancalc_ref_local IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component tancalc_tancalc_refpop_local IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (5 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    result_local_U : component tancalc_tancalc_result_local
    generic map (
        DataWidth => 1,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_reg,
        address0 => result_local_address0,
        ce0 => result_local_ce0,
        we0 => result_local_we0,
        d0 => grp_calculation_fu_161_result_local_d0,
        q0 => result_local_q0);

    ref_local_U : component tancalc_tancalc_ref_local
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_reg,
        address0 => ref_local_address0,
        ce0 => ref_local_ce0,
        we0 => ref_local_we0,
        d0 => grp_ref_read_fu_181_ref_local_d0,
        q0 => ref_local_q0);

    refpop_local_U : component tancalc_tancalc_refpop_local
    generic map (
        DataWidth => 6,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_reg,
        address0 => refpop_local_address0,
        ce0 => refpop_local_ce0,
        we0 => refpop_local_we0,
        d0 => grp_ref_read_fu_181_refpop_local_d0,
        q0 => refpop_local_q0);

    cmpr_local_U : component tancalc_tancalc_ref_local
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_reg,
        address0 => cmpr_local_address0,
        ce0 => cmpr_local_ce0,
        we0 => cmpr_local_we0,
        d0 => grp_cmpr_read_fu_171_cmpr_local_d0,
        q0 => cmpr_local_q0);

    cmprpop_local_U : component tancalc_tancalc_refpop_local
    generic map (
        DataWidth => 6,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_reg,
        address0 => cmprpop_local_address0,
        ce0 => cmprpop_local_ce0,
        we0 => cmprpop_local_we0,
        d0 => grp_cmpr_read_fu_171_cmprpop_local_d0,
        q0 => cmprpop_local_q0);

    grp_calculation_fu_161 : component tancalc_calculation
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_reg,
        ap_start => grp_calculation_fu_161_ap_start,
        ap_done => grp_calculation_fu_161_ap_done,
        ap_idle => grp_calculation_fu_161_ap_idle,
        ap_ready => grp_calculation_fu_161_ap_ready,
        ref_local_address0 => grp_calculation_fu_161_ref_local_address0,
        ref_local_ce0 => grp_calculation_fu_161_ref_local_ce0,
        ref_local_q0 => ref_local_q0,
        cmpr_local_address0 => grp_calculation_fu_161_cmpr_local_address0,
        cmpr_local_ce0 => grp_calculation_fu_161_cmpr_local_ce0,
        cmpr_local_q0 => cmpr_local_q0,
        refpop_local_address0 => grp_calculation_fu_161_refpop_local_address0,
        refpop_local_ce0 => grp_calculation_fu_161_refpop_local_ce0,
        refpop_local_q0 => refpop_local_q0,
        cmprpop_local_address0 => grp_calculation_fu_161_cmprpop_local_address0,
        cmprpop_local_ce0 => grp_calculation_fu_161_cmprpop_local_ce0,
        cmprpop_local_q0 => cmprpop_local_q0,
        result_local_address0 => grp_calculation_fu_161_result_local_address0,
        result_local_ce0 => grp_calculation_fu_161_result_local_ce0,
        result_local_we0 => grp_calculation_fu_161_result_local_we0,
        result_local_d0 => grp_calculation_fu_161_result_local_d0);

    grp_cmpr_read_fu_171 : component tancalc_cmpr_read
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_reg,
        ap_start => grp_cmpr_read_fu_171_ap_start,
        ap_done => grp_cmpr_read_fu_171_ap_done,
        ap_idle => grp_cmpr_read_fu_171_ap_idle,
        ap_ready => grp_cmpr_read_fu_171_ap_ready,
        input_r_address0 => grp_cmpr_read_fu_171_input_r_address0,
        input_r_ce0 => grp_cmpr_read_fu_171_input_r_ce0,
        input_r_q0 => input2_q0,
        cmpr_local_address0 => grp_cmpr_read_fu_171_cmpr_local_address0,
        cmpr_local_ce0 => grp_cmpr_read_fu_171_cmpr_local_ce0,
        cmpr_local_we0 => grp_cmpr_read_fu_171_cmpr_local_we0,
        cmpr_local_d0 => grp_cmpr_read_fu_171_cmpr_local_d0,
        cmprpop_local_address0 => grp_cmpr_read_fu_171_cmprpop_local_address0,
        cmprpop_local_ce0 => grp_cmpr_read_fu_171_cmprpop_local_ce0,
        cmprpop_local_we0 => grp_cmpr_read_fu_171_cmprpop_local_we0,
        cmprpop_local_d0 => grp_cmpr_read_fu_171_cmprpop_local_d0,
        chunk_num => cmpr_chunk_num_0_reg_126);

    grp_ref_read_fu_181 : component tancalc_ref_read
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_reg,
        ap_start => grp_ref_read_fu_181_ap_start,
        ap_done => grp_ref_read_fu_181_ap_done,
        ap_idle => grp_ref_read_fu_181_ap_idle,
        ap_ready => grp_ref_read_fu_181_ap_ready,
        input_r_address0 => grp_ref_read_fu_181_input_r_address0,
        input_r_ce0 => grp_ref_read_fu_181_input_r_ce0,
        input_r_q0 => input1_q0,
        ref_local_address0 => grp_ref_read_fu_181_ref_local_address0,
        ref_local_ce0 => grp_ref_read_fu_181_ref_local_ce0,
        ref_local_we0 => grp_ref_read_fu_181_ref_local_we0,
        ref_local_d0 => grp_ref_read_fu_181_ref_local_d0,
        refpop_local_address0 => grp_ref_read_fu_181_refpop_local_address0,
        refpop_local_ce0 => grp_ref_read_fu_181_refpop_local_ce0,
        refpop_local_we0 => grp_ref_read_fu_181_refpop_local_we0,
        refpop_local_d0 => grp_ref_read_fu_181_refpop_local_d0,
        chunk_num => ref_chunk_num_0_reg_114);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_reg = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_reg = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln61_fu_195_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_reg = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state8);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln61_fu_195_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_calculation_fu_161_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_reg = '1') then
                grp_calculation_fu_161_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_calculation_fu_161_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_calculation_fu_161_ap_ready = ap_const_logic_1)) then 
                    grp_calculation_fu_161_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_cmpr_read_fu_171_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_reg = '1') then
                grp_cmpr_read_fu_171_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln64_fu_200_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    grp_cmpr_read_fu_171_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cmpr_read_fu_171_ap_ready = ap_const_logic_1)) then 
                    grp_cmpr_read_fu_171_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ref_read_fu_181_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_reg = '1') then
                grp_ref_read_fu_181_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln61_fu_195_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_ref_read_fu_181_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ref_read_fu_181_ap_ready = ap_const_logic_1)) then 
                    grp_ref_read_fu_181_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_2 <= ap_rst;
        end if;
    end process;

    cmpr_chunk_num_0_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_calculation_fu_161_ap_done = ap_const_logic_1))) then 
                cmpr_chunk_num_0_reg_126 <= cmpr_chunk_num_reg_267;
            elsif (((grp_ref_read_fu_181_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                cmpr_chunk_num_0_reg_126 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    j_0_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln61_fu_195_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_150 <= ap_const_lv8_0;
            elsif (((icmp_ln71_fu_217_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_0_reg_150 <= j_fu_223_p2;
            end if; 
        end if;
    end process;

    ref_chunk_num_0_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ref_chunk_num_0_reg_114 <= ap_const_lv16_0;
            elsif (((icmp_ln64_fu_200_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                ref_chunk_num_0_reg_114 <= ref_chunk_num_fu_211_p2;
            end if; 
        end if;
    end process;

    result_0_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln61_fu_195_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                result_0_reg_138 <= ap_const_lv8_0;
            elsif (((icmp_ln71_reg_277 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                result_0_reg_138 <= result_fu_238_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_fu_200_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                cmpr_chunk_num_reg_267 <= cmpr_chunk_num_fu_205_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln71_reg_277 <= icmp_ln71_fu_217_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln61_fu_195_p2, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln64_fu_200_p2, icmp_ln71_fu_217_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, grp_calculation_fu_161_ap_done, grp_cmpr_read_fu_171_ap_done, grp_ref_read_fu_181_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln61_fu_195_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_ref_read_fu_181_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln64_fu_200_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((grp_cmpr_read_fu_171_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_calculation_fu_161_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln71_fu_217_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln71_fu_217_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state8_assign_proc : process(icmp_ln71_fu_217_p2)
    begin
        if ((icmp_ln71_fu_217_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cmpr_chunk_num_fu_205_p2 <= std_logic_vector(unsigned(cmpr_chunk_num_0_reg_126) + unsigned(ap_const_lv32_80));

    cmpr_local_address0_assign_proc : process(grp_calculation_fu_161_cmpr_local_address0, grp_cmpr_read_fu_171_cmpr_local_address0, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cmpr_local_address0 <= grp_cmpr_read_fu_171_cmpr_local_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cmpr_local_address0 <= grp_calculation_fu_161_cmpr_local_address0;
        else 
            cmpr_local_address0 <= "XXXXXXX";
        end if; 
    end process;


    cmpr_local_ce0_assign_proc : process(grp_calculation_fu_161_cmpr_local_ce0, grp_cmpr_read_fu_171_cmpr_local_ce0, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cmpr_local_ce0 <= grp_cmpr_read_fu_171_cmpr_local_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cmpr_local_ce0 <= grp_calculation_fu_161_cmpr_local_ce0;
        else 
            cmpr_local_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cmpr_local_we0_assign_proc : process(grp_cmpr_read_fu_171_cmpr_local_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cmpr_local_we0 <= grp_cmpr_read_fu_171_cmpr_local_we0;
        else 
            cmpr_local_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cmprpop_local_address0_assign_proc : process(grp_calculation_fu_161_cmprpop_local_address0, grp_cmpr_read_fu_171_cmprpop_local_address0, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cmprpop_local_address0 <= grp_cmpr_read_fu_171_cmprpop_local_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cmprpop_local_address0 <= grp_calculation_fu_161_cmprpop_local_address0;
        else 
            cmprpop_local_address0 <= "XXXXXXX";
        end if; 
    end process;


    cmprpop_local_ce0_assign_proc : process(grp_calculation_fu_161_cmprpop_local_ce0, grp_cmpr_read_fu_171_cmprpop_local_ce0, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cmprpop_local_ce0 <= grp_cmpr_read_fu_171_cmprpop_local_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cmprpop_local_ce0 <= grp_calculation_fu_161_cmprpop_local_ce0;
        else 
            cmprpop_local_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cmprpop_local_we0_assign_proc : process(grp_cmpr_read_fu_171_cmprpop_local_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cmprpop_local_we0 <= grp_cmpr_read_fu_171_cmprpop_local_we0;
        else 
            cmprpop_local_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_calculation_fu_161_ap_start <= grp_calculation_fu_161_ap_start_reg;
    grp_cmpr_read_fu_171_ap_start <= grp_cmpr_read_fu_171_ap_start_reg;
    grp_ref_read_fu_181_ap_start <= grp_ref_read_fu_181_ap_start_reg;
    icmp_ln61_fu_195_p2 <= "1" when (unsigned(zext_ln61_fu_191_p1) < unsigned(size)) else "0";
    icmp_ln64_fu_200_p2 <= "1" when (unsigned(cmpr_chunk_num_0_reg_126) < unsigned(size)) else "0";
    icmp_ln71_fu_217_p2 <= "1" when (j_0_reg_150 = ap_const_lv8_80) else "0";
    input1_address0 <= grp_ref_read_fu_181_input_r_address0;
    input1_ce0 <= grp_ref_read_fu_181_input_r_ce0;
    input2_address0 <= grp_cmpr_read_fu_171_input_r_address0;
    input2_ce0 <= grp_cmpr_read_fu_171_input_r_ce0;
    j_fu_223_p2 <= std_logic_vector(unsigned(j_0_reg_150) + unsigned(ap_const_lv8_1));
    output_r_address0 <= ap_const_lv64_0(1 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(result_0_reg_138),32));

    output_r_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ref_chunk_num_fu_211_p2 <= std_logic_vector(unsigned(ref_chunk_num_0_reg_114) + unsigned(ap_const_lv16_80));

    ref_local_address0_assign_proc : process(grp_calculation_fu_161_ref_local_address0, grp_ref_read_fu_181_ref_local_address0, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ref_local_address0 <= grp_ref_read_fu_181_ref_local_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ref_local_address0 <= grp_calculation_fu_161_ref_local_address0;
        else 
            ref_local_address0 <= "XXXXXXX";
        end if; 
    end process;


    ref_local_ce0_assign_proc : process(grp_calculation_fu_161_ref_local_ce0, grp_ref_read_fu_181_ref_local_ce0, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ref_local_ce0 <= grp_ref_read_fu_181_ref_local_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ref_local_ce0 <= grp_calculation_fu_161_ref_local_ce0;
        else 
            ref_local_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ref_local_we0_assign_proc : process(grp_ref_read_fu_181_ref_local_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ref_local_we0 <= grp_ref_read_fu_181_ref_local_we0;
        else 
            ref_local_we0 <= ap_const_logic_0;
        end if; 
    end process;


    refpop_local_address0_assign_proc : process(grp_calculation_fu_161_refpop_local_address0, grp_ref_read_fu_181_refpop_local_address0, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            refpop_local_address0 <= grp_ref_read_fu_181_refpop_local_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            refpop_local_address0 <= grp_calculation_fu_161_refpop_local_address0;
        else 
            refpop_local_address0 <= "XXXXXXX";
        end if; 
    end process;


    refpop_local_ce0_assign_proc : process(grp_calculation_fu_161_refpop_local_ce0, grp_ref_read_fu_181_refpop_local_ce0, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            refpop_local_ce0 <= grp_ref_read_fu_181_refpop_local_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            refpop_local_ce0 <= grp_calculation_fu_161_refpop_local_ce0;
        else 
            refpop_local_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    refpop_local_we0_assign_proc : process(grp_ref_read_fu_181_refpop_local_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            refpop_local_we0 <= grp_ref_read_fu_181_refpop_local_we0;
        else 
            refpop_local_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_fu_238_p2 <= std_logic_vector(unsigned(zext_ln72_1_fu_234_p1) + unsigned(result_0_reg_138));

    result_local_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, grp_calculation_fu_161_result_local_address0, ap_CS_fsm_state7, ap_block_pp0_stage0, zext_ln72_fu_229_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_local_address0 <= zext_ln72_fu_229_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            result_local_address0 <= grp_calculation_fu_161_result_local_address0;
        else 
            result_local_address0 <= "XXXXXXX";
        end if; 
    end process;


    result_local_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, grp_calculation_fu_161_result_local_ce0, ap_CS_fsm_state7)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            result_local_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            result_local_ce0 <= grp_calculation_fu_161_result_local_ce0;
        else 
            result_local_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_local_we0_assign_proc : process(grp_calculation_fu_161_result_local_we0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            result_local_we0 <= grp_calculation_fu_161_result_local_we0;
        else 
            result_local_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln61_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ref_chunk_num_0_reg_114),32));
    zext_ln72_1_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(result_local_q0),8));
    zext_ln72_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_150),64));
end behav;
