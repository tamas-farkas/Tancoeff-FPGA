// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "tancalc_result_write.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic tancalc_result_write::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic tancalc_result_write::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> tancalc_result_write::ap_ST_fsm_state1 = "1";
const sc_lv<8> tancalc_result_write::ap_ST_fsm_state2 = "10";
const sc_lv<8> tancalc_result_write::ap_ST_fsm_state3 = "100";
const sc_lv<8> tancalc_result_write::ap_ST_fsm_state4 = "1000";
const sc_lv<8> tancalc_result_write::ap_ST_fsm_state5 = "10000";
const sc_lv<8> tancalc_result_write::ap_ST_fsm_state6 = "100000";
const sc_lv<8> tancalc_result_write::ap_ST_fsm_state7 = "1000000";
const sc_lv<8> tancalc_result_write::ap_ST_fsm_state8 = "10000000";
const sc_lv<32> tancalc_result_write::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<64> tancalc_result_write::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<1> tancalc_result_write::ap_const_lv1_0 = "0";
const sc_lv<3> tancalc_result_write::ap_const_lv3_0 = "000";
const sc_lv<2> tancalc_result_write::ap_const_lv2_0 = "00";
const sc_lv<4> tancalc_result_write::ap_const_lv4_0 = "0000";
const sc_lv<32> tancalc_result_write::ap_const_lv32_1 = "1";
const sc_lv<32> tancalc_result_write::ap_const_lv32_2 = "10";
const sc_lv<32> tancalc_result_write::ap_const_lv32_7 = "111";
const sc_lv<64> tancalc_result_write::ap_const_lv64_FFFFFFFFFFFFFFFF = "1111111111111111111111111111111111111111111111111111111111111111";
const bool tancalc_result_write::ap_const_boolean_1 = true;

tancalc_result_write::tancalc_result_write(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln332_fu_230_p2);
    sensitive << ( zext_ln332_1_fu_226_p1 );
    sensitive << ( zext_ln332_fu_222_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( output_V_offset_empty_n );
    sensitive << ( cmpr_chunk_num_0_i_c_empty_n );
    sensitive << ( data_num_0_i_c1_empty_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( m_axi_output_V_BVALID );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( m_axi_output_V_BVALID );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_cmpr_chunk_num_0_i_c_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( cmpr_chunk_num_0_i_c_empty_n );

    SC_METHOD(thread_cmpr_chunk_num_0_i_c_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( output_V_offset_empty_n );
    sensitive << ( cmpr_chunk_num_0_i_c_empty_n );
    sensitive << ( data_num_0_i_c1_empty_n );

    SC_METHOD(thread_data_num_0_i_c1_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( data_num_0_i_c1_empty_n );

    SC_METHOD(thread_data_num_0_i_c1_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( output_V_offset_empty_n );
    sensitive << ( cmpr_chunk_num_0_i_c_empty_n );
    sensitive << ( data_num_0_i_c1_empty_n );

    SC_METHOD(thread_m_axi_output_V_ARADDR);

    SC_METHOD(thread_m_axi_output_V_ARBURST);

    SC_METHOD(thread_m_axi_output_V_ARCACHE);

    SC_METHOD(thread_m_axi_output_V_ARID);

    SC_METHOD(thread_m_axi_output_V_ARLEN);

    SC_METHOD(thread_m_axi_output_V_ARLOCK);

    SC_METHOD(thread_m_axi_output_V_ARPROT);

    SC_METHOD(thread_m_axi_output_V_ARQOS);

    SC_METHOD(thread_m_axi_output_V_ARREGION);

    SC_METHOD(thread_m_axi_output_V_ARSIZE);

    SC_METHOD(thread_m_axi_output_V_ARUSER);

    SC_METHOD(thread_m_axi_output_V_ARVALID);

    SC_METHOD(thread_m_axi_output_V_AWADDR);
    sensitive << ( m_axi_output_V_AWREADY );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln332_2_fu_326_p1 );

    SC_METHOD(thread_m_axi_output_V_AWBURST);

    SC_METHOD(thread_m_axi_output_V_AWCACHE);

    SC_METHOD(thread_m_axi_output_V_AWID);

    SC_METHOD(thread_m_axi_output_V_AWLEN);
    sensitive << ( m_axi_output_V_AWREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axi_output_V_AWLOCK);

    SC_METHOD(thread_m_axi_output_V_AWPROT);

    SC_METHOD(thread_m_axi_output_V_AWQOS);

    SC_METHOD(thread_m_axi_output_V_AWREGION);

    SC_METHOD(thread_m_axi_output_V_AWSIZE);

    SC_METHOD(thread_m_axi_output_V_AWUSER);

    SC_METHOD(thread_m_axi_output_V_AWVALID);
    sensitive << ( m_axi_output_V_AWREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axi_output_V_BREADY);
    sensitive << ( m_axi_output_V_BVALID );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_m_axi_output_V_RREADY);

    SC_METHOD(thread_m_axi_output_V_WDATA);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( or_ln66_14_reg_345 );

    SC_METHOD(thread_m_axi_output_V_WID);

    SC_METHOD(thread_m_axi_output_V_WLAST);

    SC_METHOD(thread_m_axi_output_V_WSTRB);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_m_axi_output_V_WUSER);

    SC_METHOD(thread_m_axi_output_V_WVALID);
    sensitive << ( m_axi_output_V_WREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_or_ln66_10_fu_296_p2);
    sensitive << ( result_local_11_V_read_2 );
    sensitive << ( or_ln66_9_fu_290_p2 );

    SC_METHOD(thread_or_ln66_11_fu_302_p2);
    sensitive << ( result_local_12_V_read_2 );
    sensitive << ( or_ln66_10_fu_296_p2 );

    SC_METHOD(thread_or_ln66_12_fu_308_p2);
    sensitive << ( result_local_13_V_read_2 );
    sensitive << ( or_ln66_11_fu_302_p2 );

    SC_METHOD(thread_or_ln66_13_fu_314_p2);
    sensitive << ( result_local_14_V_read_2 );
    sensitive << ( result_local_15_V_read_2 );

    SC_METHOD(thread_or_ln66_14_fu_320_p2);
    sensitive << ( or_ln66_12_fu_308_p2 );
    sensitive << ( or_ln66_13_fu_314_p2 );

    SC_METHOD(thread_or_ln66_1_fu_242_p2);
    sensitive << ( result_local_2_V_read_2 );
    sensitive << ( or_ln66_fu_236_p2 );

    SC_METHOD(thread_or_ln66_2_fu_248_p2);
    sensitive << ( result_local_3_V_read_2 );
    sensitive << ( or_ln66_1_fu_242_p2 );

    SC_METHOD(thread_or_ln66_3_fu_254_p2);
    sensitive << ( result_local_4_V_read_2 );
    sensitive << ( or_ln66_2_fu_248_p2 );

    SC_METHOD(thread_or_ln66_4_fu_260_p2);
    sensitive << ( result_local_5_V_read_2 );
    sensitive << ( or_ln66_3_fu_254_p2 );

    SC_METHOD(thread_or_ln66_5_fu_266_p2);
    sensitive << ( result_local_6_V_read_2 );
    sensitive << ( or_ln66_4_fu_260_p2 );

    SC_METHOD(thread_or_ln66_6_fu_272_p2);
    sensitive << ( result_local_7_V_read_2 );
    sensitive << ( or_ln66_5_fu_266_p2 );

    SC_METHOD(thread_or_ln66_7_fu_278_p2);
    sensitive << ( result_local_8_V_read_2 );
    sensitive << ( or_ln66_6_fu_272_p2 );

    SC_METHOD(thread_or_ln66_8_fu_284_p2);
    sensitive << ( result_local_9_V_read_2 );
    sensitive << ( or_ln66_7_fu_278_p2 );

    SC_METHOD(thread_or_ln66_9_fu_290_p2);
    sensitive << ( result_local_10_V_read_2 );
    sensitive << ( or_ln66_8_fu_284_p2 );

    SC_METHOD(thread_or_ln66_fu_236_p2);
    sensitive << ( result_local_0_V_read_2 );
    sensitive << ( result_local_1_V_read_2 );

    SC_METHOD(thread_output_V_blk_n_AW);
    sensitive << ( m_axi_output_V_AWREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_output_V_blk_n_B);
    sensitive << ( m_axi_output_V_BVALID );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_output_V_blk_n_W);
    sensitive << ( m_axi_output_V_WREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_output_V_offset_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( output_V_offset_empty_n );

    SC_METHOD(thread_output_V_offset_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( output_V_offset_empty_n );
    sensitive << ( cmpr_chunk_num_0_i_c_empty_n );
    sensitive << ( data_num_0_i_c1_empty_n );

    SC_METHOD(thread_tmp_i_i_fu_214_p3);
    sensitive << ( cmpr_chunk_num_0_i_c_dout );
    sensitive << ( data_num_0_i_c1_dout );

    SC_METHOD(thread_zext_ln332_1_fu_226_p1);
    sensitive << ( output_V_offset_dout );

    SC_METHOD(thread_zext_ln332_2_fu_326_p1);
    sensitive << ( add_ln332_reg_340 );

    SC_METHOD(thread_zext_ln332_fu_222_p1);
    sensitive << ( tmp_i_i_fu_214_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_output_V_AWREADY );
    sensitive << ( m_axi_output_V_WREADY );
    sensitive << ( m_axi_output_V_BVALID );
    sensitive << ( output_V_offset_empty_n );
    sensitive << ( cmpr_chunk_num_0_i_c_empty_n );
    sensitive << ( data_num_0_i_c1_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "00000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "tancalc_result_write_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_output_V_AWVALID, "(port)m_axi_output_V_AWVALID");
    sc_trace(mVcdFile, m_axi_output_V_AWREADY, "(port)m_axi_output_V_AWREADY");
    sc_trace(mVcdFile, m_axi_output_V_AWADDR, "(port)m_axi_output_V_AWADDR");
    sc_trace(mVcdFile, m_axi_output_V_AWID, "(port)m_axi_output_V_AWID");
    sc_trace(mVcdFile, m_axi_output_V_AWLEN, "(port)m_axi_output_V_AWLEN");
    sc_trace(mVcdFile, m_axi_output_V_AWSIZE, "(port)m_axi_output_V_AWSIZE");
    sc_trace(mVcdFile, m_axi_output_V_AWBURST, "(port)m_axi_output_V_AWBURST");
    sc_trace(mVcdFile, m_axi_output_V_AWLOCK, "(port)m_axi_output_V_AWLOCK");
    sc_trace(mVcdFile, m_axi_output_V_AWCACHE, "(port)m_axi_output_V_AWCACHE");
    sc_trace(mVcdFile, m_axi_output_V_AWPROT, "(port)m_axi_output_V_AWPROT");
    sc_trace(mVcdFile, m_axi_output_V_AWQOS, "(port)m_axi_output_V_AWQOS");
    sc_trace(mVcdFile, m_axi_output_V_AWREGION, "(port)m_axi_output_V_AWREGION");
    sc_trace(mVcdFile, m_axi_output_V_AWUSER, "(port)m_axi_output_V_AWUSER");
    sc_trace(mVcdFile, m_axi_output_V_WVALID, "(port)m_axi_output_V_WVALID");
    sc_trace(mVcdFile, m_axi_output_V_WREADY, "(port)m_axi_output_V_WREADY");
    sc_trace(mVcdFile, m_axi_output_V_WDATA, "(port)m_axi_output_V_WDATA");
    sc_trace(mVcdFile, m_axi_output_V_WSTRB, "(port)m_axi_output_V_WSTRB");
    sc_trace(mVcdFile, m_axi_output_V_WLAST, "(port)m_axi_output_V_WLAST");
    sc_trace(mVcdFile, m_axi_output_V_WID, "(port)m_axi_output_V_WID");
    sc_trace(mVcdFile, m_axi_output_V_WUSER, "(port)m_axi_output_V_WUSER");
    sc_trace(mVcdFile, m_axi_output_V_ARVALID, "(port)m_axi_output_V_ARVALID");
    sc_trace(mVcdFile, m_axi_output_V_ARREADY, "(port)m_axi_output_V_ARREADY");
    sc_trace(mVcdFile, m_axi_output_V_ARADDR, "(port)m_axi_output_V_ARADDR");
    sc_trace(mVcdFile, m_axi_output_V_ARID, "(port)m_axi_output_V_ARID");
    sc_trace(mVcdFile, m_axi_output_V_ARLEN, "(port)m_axi_output_V_ARLEN");
    sc_trace(mVcdFile, m_axi_output_V_ARSIZE, "(port)m_axi_output_V_ARSIZE");
    sc_trace(mVcdFile, m_axi_output_V_ARBURST, "(port)m_axi_output_V_ARBURST");
    sc_trace(mVcdFile, m_axi_output_V_ARLOCK, "(port)m_axi_output_V_ARLOCK");
    sc_trace(mVcdFile, m_axi_output_V_ARCACHE, "(port)m_axi_output_V_ARCACHE");
    sc_trace(mVcdFile, m_axi_output_V_ARPROT, "(port)m_axi_output_V_ARPROT");
    sc_trace(mVcdFile, m_axi_output_V_ARQOS, "(port)m_axi_output_V_ARQOS");
    sc_trace(mVcdFile, m_axi_output_V_ARREGION, "(port)m_axi_output_V_ARREGION");
    sc_trace(mVcdFile, m_axi_output_V_ARUSER, "(port)m_axi_output_V_ARUSER");
    sc_trace(mVcdFile, m_axi_output_V_RVALID, "(port)m_axi_output_V_RVALID");
    sc_trace(mVcdFile, m_axi_output_V_RREADY, "(port)m_axi_output_V_RREADY");
    sc_trace(mVcdFile, m_axi_output_V_RDATA, "(port)m_axi_output_V_RDATA");
    sc_trace(mVcdFile, m_axi_output_V_RLAST, "(port)m_axi_output_V_RLAST");
    sc_trace(mVcdFile, m_axi_output_V_RID, "(port)m_axi_output_V_RID");
    sc_trace(mVcdFile, m_axi_output_V_RUSER, "(port)m_axi_output_V_RUSER");
    sc_trace(mVcdFile, m_axi_output_V_RRESP, "(port)m_axi_output_V_RRESP");
    sc_trace(mVcdFile, m_axi_output_V_BVALID, "(port)m_axi_output_V_BVALID");
    sc_trace(mVcdFile, m_axi_output_V_BREADY, "(port)m_axi_output_V_BREADY");
    sc_trace(mVcdFile, m_axi_output_V_BRESP, "(port)m_axi_output_V_BRESP");
    sc_trace(mVcdFile, m_axi_output_V_BID, "(port)m_axi_output_V_BID");
    sc_trace(mVcdFile, m_axi_output_V_BUSER, "(port)m_axi_output_V_BUSER");
    sc_trace(mVcdFile, output_V_offset_dout, "(port)output_V_offset_dout");
    sc_trace(mVcdFile, output_V_offset_empty_n, "(port)output_V_offset_empty_n");
    sc_trace(mVcdFile, output_V_offset_read, "(port)output_V_offset_read");
    sc_trace(mVcdFile, result_local_0_V_read_2, "(port)result_local_0_V_read_2");
    sc_trace(mVcdFile, result_local_1_V_read_2, "(port)result_local_1_V_read_2");
    sc_trace(mVcdFile, result_local_2_V_read_2, "(port)result_local_2_V_read_2");
    sc_trace(mVcdFile, result_local_3_V_read_2, "(port)result_local_3_V_read_2");
    sc_trace(mVcdFile, result_local_4_V_read_2, "(port)result_local_4_V_read_2");
    sc_trace(mVcdFile, result_local_5_V_read_2, "(port)result_local_5_V_read_2");
    sc_trace(mVcdFile, result_local_6_V_read_2, "(port)result_local_6_V_read_2");
    sc_trace(mVcdFile, result_local_7_V_read_2, "(port)result_local_7_V_read_2");
    sc_trace(mVcdFile, result_local_8_V_read_2, "(port)result_local_8_V_read_2");
    sc_trace(mVcdFile, result_local_9_V_read_2, "(port)result_local_9_V_read_2");
    sc_trace(mVcdFile, result_local_10_V_read_2, "(port)result_local_10_V_read_2");
    sc_trace(mVcdFile, result_local_11_V_read_2, "(port)result_local_11_V_read_2");
    sc_trace(mVcdFile, result_local_12_V_read_2, "(port)result_local_12_V_read_2");
    sc_trace(mVcdFile, result_local_13_V_read_2, "(port)result_local_13_V_read_2");
    sc_trace(mVcdFile, result_local_14_V_read_2, "(port)result_local_14_V_read_2");
    sc_trace(mVcdFile, result_local_15_V_read_2, "(port)result_local_15_V_read_2");
    sc_trace(mVcdFile, cmpr_chunk_num_0_i_c_dout, "(port)cmpr_chunk_num_0_i_c_dout");
    sc_trace(mVcdFile, cmpr_chunk_num_0_i_c_empty_n, "(port)cmpr_chunk_num_0_i_c_empty_n");
    sc_trace(mVcdFile, cmpr_chunk_num_0_i_c_read, "(port)cmpr_chunk_num_0_i_c_read");
    sc_trace(mVcdFile, data_num_0_i_c1_dout, "(port)data_num_0_i_c1_dout");
    sc_trace(mVcdFile, data_num_0_i_c1_empty_n, "(port)data_num_0_i_c1_empty_n");
    sc_trace(mVcdFile, data_num_0_i_c1_read, "(port)data_num_0_i_c1_read");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, output_V_blk_n_AW, "output_V_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, output_V_blk_n_W, "output_V_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, output_V_blk_n_B, "output_V_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, output_V_offset_blk_n, "output_V_offset_blk_n");
    sc_trace(mVcdFile, cmpr_chunk_num_0_i_c_blk_n, "cmpr_chunk_num_0_i_c_blk_n");
    sc_trace(mVcdFile, data_num_0_i_c1_blk_n, "data_num_0_i_c1_blk_n");
    sc_trace(mVcdFile, add_ln332_fu_230_p2, "add_ln332_fu_230_p2");
    sc_trace(mVcdFile, add_ln332_reg_340, "add_ln332_reg_340");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, or_ln66_14_fu_320_p2, "or_ln66_14_fu_320_p2");
    sc_trace(mVcdFile, or_ln66_14_reg_345, "or_ln66_14_reg_345");
    sc_trace(mVcdFile, zext_ln332_2_fu_326_p1, "zext_ln332_2_fu_326_p1");
    sc_trace(mVcdFile, tmp_i_i_fu_214_p3, "tmp_i_i_fu_214_p3");
    sc_trace(mVcdFile, zext_ln332_1_fu_226_p1, "zext_ln332_1_fu_226_p1");
    sc_trace(mVcdFile, zext_ln332_fu_222_p1, "zext_ln332_fu_222_p1");
    sc_trace(mVcdFile, or_ln66_fu_236_p2, "or_ln66_fu_236_p2");
    sc_trace(mVcdFile, or_ln66_1_fu_242_p2, "or_ln66_1_fu_242_p2");
    sc_trace(mVcdFile, or_ln66_2_fu_248_p2, "or_ln66_2_fu_248_p2");
    sc_trace(mVcdFile, or_ln66_3_fu_254_p2, "or_ln66_3_fu_254_p2");
    sc_trace(mVcdFile, or_ln66_4_fu_260_p2, "or_ln66_4_fu_260_p2");
    sc_trace(mVcdFile, or_ln66_5_fu_266_p2, "or_ln66_5_fu_266_p2");
    sc_trace(mVcdFile, or_ln66_6_fu_272_p2, "or_ln66_6_fu_272_p2");
    sc_trace(mVcdFile, or_ln66_7_fu_278_p2, "or_ln66_7_fu_278_p2");
    sc_trace(mVcdFile, or_ln66_8_fu_284_p2, "or_ln66_8_fu_284_p2");
    sc_trace(mVcdFile, or_ln66_9_fu_290_p2, "or_ln66_9_fu_290_p2");
    sc_trace(mVcdFile, or_ln66_10_fu_296_p2, "or_ln66_10_fu_296_p2");
    sc_trace(mVcdFile, or_ln66_11_fu_302_p2, "or_ln66_11_fu_302_p2");
    sc_trace(mVcdFile, or_ln66_12_fu_308_p2, "or_ln66_12_fu_308_p2");
    sc_trace(mVcdFile, or_ln66_13_fu_314_p2, "or_ln66_13_fu_314_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

tancalc_result_write::~tancalc_result_write() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void tancalc_result_write::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                    esl_seteq<1,1,1>(m_axi_output_V_BVALID.read(), ap_const_logic_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, output_V_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, cmpr_chunk_num_0_i_c_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_num_0_i_c1_empty_n.read())))) {
        add_ln332_reg_340 = add_ln332_fu_230_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(m_axi_output_V_AWREADY.read(), ap_const_logic_1))) {
        or_ln66_14_reg_345 = or_ln66_14_fu_320_p2.read();
    }
}

void tancalc_result_write::thread_add_ln332_fu_230_p2() {
    add_ln332_fu_230_p2 = (!zext_ln332_1_fu_226_p1.read().is_01() || !zext_ln332_fu_222_p1.read().is_01())? sc_lv<59>(): (sc_biguint<59>(zext_ln332_1_fu_226_p1.read()) + sc_biguint<59>(zext_ln332_fu_222_p1.read()));
}

void tancalc_result_write::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void tancalc_result_write::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void tancalc_result_write::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void tancalc_result_write::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void tancalc_result_write::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, output_V_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, cmpr_chunk_num_0_i_c_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_num_0_i_c1_empty_n.read()));
}

void tancalc_result_write::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(m_axi_output_V_BVALID.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void tancalc_result_write::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void tancalc_result_write::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(m_axi_output_V_BVALID.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void tancalc_result_write::thread_cmpr_chunk_num_0_i_c_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        cmpr_chunk_num_0_i_c_blk_n = cmpr_chunk_num_0_i_c_empty_n.read();
    } else {
        cmpr_chunk_num_0_i_c_blk_n = ap_const_logic_1;
    }
}

void tancalc_result_write::thread_cmpr_chunk_num_0_i_c_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, output_V_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, cmpr_chunk_num_0_i_c_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_num_0_i_c1_empty_n.read())))) {
        cmpr_chunk_num_0_i_c_read = ap_const_logic_1;
    } else {
        cmpr_chunk_num_0_i_c_read = ap_const_logic_0;
    }
}

void tancalc_result_write::thread_data_num_0_i_c1_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        data_num_0_i_c1_blk_n = data_num_0_i_c1_empty_n.read();
    } else {
        data_num_0_i_c1_blk_n = ap_const_logic_1;
    }
}

void tancalc_result_write::thread_data_num_0_i_c1_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, output_V_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, cmpr_chunk_num_0_i_c_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_num_0_i_c1_empty_n.read())))) {
        data_num_0_i_c1_read = ap_const_logic_1;
    } else {
        data_num_0_i_c1_read = ap_const_logic_0;
    }
}

void tancalc_result_write::thread_m_axi_output_V_ARADDR() {
    m_axi_output_V_ARADDR = ap_const_lv64_0;
}

void tancalc_result_write::thread_m_axi_output_V_ARBURST() {
    m_axi_output_V_ARBURST = ap_const_lv2_0;
}

void tancalc_result_write::thread_m_axi_output_V_ARCACHE() {
    m_axi_output_V_ARCACHE = ap_const_lv4_0;
}

void tancalc_result_write::thread_m_axi_output_V_ARID() {
    m_axi_output_V_ARID = ap_const_lv1_0;
}

void tancalc_result_write::thread_m_axi_output_V_ARLEN() {
    m_axi_output_V_ARLEN = ap_const_lv32_0;
}

void tancalc_result_write::thread_m_axi_output_V_ARLOCK() {
    m_axi_output_V_ARLOCK = ap_const_lv2_0;
}

void tancalc_result_write::thread_m_axi_output_V_ARPROT() {
    m_axi_output_V_ARPROT = ap_const_lv3_0;
}

void tancalc_result_write::thread_m_axi_output_V_ARQOS() {
    m_axi_output_V_ARQOS = ap_const_lv4_0;
}

void tancalc_result_write::thread_m_axi_output_V_ARREGION() {
    m_axi_output_V_ARREGION = ap_const_lv4_0;
}

void tancalc_result_write::thread_m_axi_output_V_ARSIZE() {
    m_axi_output_V_ARSIZE = ap_const_lv3_0;
}

void tancalc_result_write::thread_m_axi_output_V_ARUSER() {
    m_axi_output_V_ARUSER = ap_const_lv1_0;
}

void tancalc_result_write::thread_m_axi_output_V_ARVALID() {
    m_axi_output_V_ARVALID = ap_const_logic_0;
}

void tancalc_result_write::thread_m_axi_output_V_AWADDR() {
    m_axi_output_V_AWADDR = zext_ln332_2_fu_326_p1.read();
}

void tancalc_result_write::thread_m_axi_output_V_AWBURST() {
    m_axi_output_V_AWBURST = ap_const_lv2_0;
}

void tancalc_result_write::thread_m_axi_output_V_AWCACHE() {
    m_axi_output_V_AWCACHE = ap_const_lv4_0;
}

void tancalc_result_write::thread_m_axi_output_V_AWID() {
    m_axi_output_V_AWID = ap_const_lv1_0;
}

void tancalc_result_write::thread_m_axi_output_V_AWLEN() {
    m_axi_output_V_AWLEN = ap_const_lv32_1;
}

void tancalc_result_write::thread_m_axi_output_V_AWLOCK() {
    m_axi_output_V_AWLOCK = ap_const_lv2_0;
}

void tancalc_result_write::thread_m_axi_output_V_AWPROT() {
    m_axi_output_V_AWPROT = ap_const_lv3_0;
}

void tancalc_result_write::thread_m_axi_output_V_AWQOS() {
    m_axi_output_V_AWQOS = ap_const_lv4_0;
}

void tancalc_result_write::thread_m_axi_output_V_AWREGION() {
    m_axi_output_V_AWREGION = ap_const_lv4_0;
}

void tancalc_result_write::thread_m_axi_output_V_AWSIZE() {
    m_axi_output_V_AWSIZE = ap_const_lv3_0;
}

void tancalc_result_write::thread_m_axi_output_V_AWUSER() {
    m_axi_output_V_AWUSER = ap_const_lv1_0;
}

void tancalc_result_write::thread_m_axi_output_V_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(m_axi_output_V_AWREADY.read(), ap_const_logic_1))) {
        m_axi_output_V_AWVALID = ap_const_logic_1;
    } else {
        m_axi_output_V_AWVALID = ap_const_logic_0;
    }
}

void tancalc_result_write::thread_m_axi_output_V_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(m_axi_output_V_BVALID.read(), ap_const_logic_1))) {
        m_axi_output_V_BREADY = ap_const_logic_1;
    } else {
        m_axi_output_V_BREADY = ap_const_logic_0;
    }
}

void tancalc_result_write::thread_m_axi_output_V_RREADY() {
    m_axi_output_V_RREADY = ap_const_logic_0;
}

void tancalc_result_write::thread_m_axi_output_V_WDATA() {
    m_axi_output_V_WDATA = esl_zext<512,1>(or_ln66_14_reg_345.read());
}

void tancalc_result_write::thread_m_axi_output_V_WID() {
    m_axi_output_V_WID = ap_const_lv1_0;
}

void tancalc_result_write::thread_m_axi_output_V_WLAST() {
    m_axi_output_V_WLAST = ap_const_logic_0;
}

void tancalc_result_write::thread_m_axi_output_V_WSTRB() {
    m_axi_output_V_WSTRB = ap_const_lv64_FFFFFFFFFFFFFFFF;
}

void tancalc_result_write::thread_m_axi_output_V_WUSER() {
    m_axi_output_V_WUSER = ap_const_lv1_0;
}

void tancalc_result_write::thread_m_axi_output_V_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(m_axi_output_V_WREADY.read(), ap_const_logic_1))) {
        m_axi_output_V_WVALID = ap_const_logic_1;
    } else {
        m_axi_output_V_WVALID = ap_const_logic_0;
    }
}

void tancalc_result_write::thread_or_ln66_10_fu_296_p2() {
    or_ln66_10_fu_296_p2 = (or_ln66_9_fu_290_p2.read() | result_local_11_V_read_2.read());
}

void tancalc_result_write::thread_or_ln66_11_fu_302_p2() {
    or_ln66_11_fu_302_p2 = (or_ln66_10_fu_296_p2.read() | result_local_12_V_read_2.read());
}

void tancalc_result_write::thread_or_ln66_12_fu_308_p2() {
    or_ln66_12_fu_308_p2 = (or_ln66_11_fu_302_p2.read() | result_local_13_V_read_2.read());
}

void tancalc_result_write::thread_or_ln66_13_fu_314_p2() {
    or_ln66_13_fu_314_p2 = (result_local_14_V_read_2.read() | result_local_15_V_read_2.read());
}

void tancalc_result_write::thread_or_ln66_14_fu_320_p2() {
    or_ln66_14_fu_320_p2 = (or_ln66_12_fu_308_p2.read() | or_ln66_13_fu_314_p2.read());
}

void tancalc_result_write::thread_or_ln66_1_fu_242_p2() {
    or_ln66_1_fu_242_p2 = (or_ln66_fu_236_p2.read() | result_local_2_V_read_2.read());
}

void tancalc_result_write::thread_or_ln66_2_fu_248_p2() {
    or_ln66_2_fu_248_p2 = (or_ln66_1_fu_242_p2.read() | result_local_3_V_read_2.read());
}

void tancalc_result_write::thread_or_ln66_3_fu_254_p2() {
    or_ln66_3_fu_254_p2 = (or_ln66_2_fu_248_p2.read() | result_local_4_V_read_2.read());
}

void tancalc_result_write::thread_or_ln66_4_fu_260_p2() {
    or_ln66_4_fu_260_p2 = (or_ln66_3_fu_254_p2.read() | result_local_5_V_read_2.read());
}

void tancalc_result_write::thread_or_ln66_5_fu_266_p2() {
    or_ln66_5_fu_266_p2 = (or_ln66_4_fu_260_p2.read() | result_local_6_V_read_2.read());
}

void tancalc_result_write::thread_or_ln66_6_fu_272_p2() {
    or_ln66_6_fu_272_p2 = (or_ln66_5_fu_266_p2.read() | result_local_7_V_read_2.read());
}

void tancalc_result_write::thread_or_ln66_7_fu_278_p2() {
    or_ln66_7_fu_278_p2 = (or_ln66_6_fu_272_p2.read() | result_local_8_V_read_2.read());
}

void tancalc_result_write::thread_or_ln66_8_fu_284_p2() {
    or_ln66_8_fu_284_p2 = (or_ln66_7_fu_278_p2.read() | result_local_9_V_read_2.read());
}

void tancalc_result_write::thread_or_ln66_9_fu_290_p2() {
    or_ln66_9_fu_290_p2 = (or_ln66_8_fu_284_p2.read() | result_local_10_V_read_2.read());
}

void tancalc_result_write::thread_or_ln66_fu_236_p2() {
    or_ln66_fu_236_p2 = (result_local_0_V_read_2.read() | result_local_1_V_read_2.read());
}

void tancalc_result_write::thread_output_V_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        output_V_blk_n_AW = m_axi_output_V_AWREADY.read();
    } else {
        output_V_blk_n_AW = ap_const_logic_1;
    }
}

void tancalc_result_write::thread_output_V_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        output_V_blk_n_B = m_axi_output_V_BVALID.read();
    } else {
        output_V_blk_n_B = ap_const_logic_1;
    }
}

void tancalc_result_write::thread_output_V_blk_n_W() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        output_V_blk_n_W = m_axi_output_V_WREADY.read();
    } else {
        output_V_blk_n_W = ap_const_logic_1;
    }
}

void tancalc_result_write::thread_output_V_offset_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        output_V_offset_blk_n = output_V_offset_empty_n.read();
    } else {
        output_V_offset_blk_n = ap_const_logic_1;
    }
}

void tancalc_result_write::thread_output_V_offset_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, output_V_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, cmpr_chunk_num_0_i_c_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_num_0_i_c1_empty_n.read())))) {
        output_V_offset_read = ap_const_logic_1;
    } else {
        output_V_offset_read = ap_const_logic_0;
    }
}

void tancalc_result_write::thread_tmp_i_i_fu_214_p3() {
    tmp_i_i_fu_214_p3 = esl_concat<2,6>(cmpr_chunk_num_0_i_c_dout.read(), data_num_0_i_c1_dout.read());
}

void tancalc_result_write::thread_zext_ln332_1_fu_226_p1() {
    zext_ln332_1_fu_226_p1 = esl_zext<59,58>(output_V_offset_dout.read());
}

void tancalc_result_write::thread_zext_ln332_2_fu_326_p1() {
    zext_ln332_2_fu_326_p1 = esl_zext<64,59>(add_ln332_reg_340.read());
}

void tancalc_result_write::thread_zext_ln332_fu_222_p1() {
    zext_ln332_fu_222_p1 = esl_zext<59,8>(tmp_i_i_fu_214_p3.read());
}

void tancalc_result_write::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, output_V_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, cmpr_chunk_num_0_i_c_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_num_0_i_c1_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(m_axi_output_V_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(m_axi_output_V_WREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(m_axi_output_V_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXX";
            break;
    }
}

}

