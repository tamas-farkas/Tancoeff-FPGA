-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tancalc_data_read_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_input_V_AWVALID : OUT STD_LOGIC;
    m_axi_input_V_AWREADY : IN STD_LOGIC;
    m_axi_input_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_input_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_V_WVALID : OUT STD_LOGIC;
    m_axi_input_V_WREADY : IN STD_LOGIC;
    m_axi_input_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_input_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_input_V_WLAST : OUT STD_LOGIC;
    m_axi_input_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_V_ARVALID : OUT STD_LOGIC;
    m_axi_input_V_ARREADY : IN STD_LOGIC;
    m_axi_input_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_input_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_V_RVALID : IN STD_LOGIC;
    m_axi_input_V_RREADY : OUT STD_LOGIC;
    m_axi_input_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_input_V_RLAST : IN STD_LOGIC;
    m_axi_input_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_V_BVALID : IN STD_LOGIC;
    m_axi_input_V_BREADY : OUT STD_LOGIC;
    m_axi_input_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
    data_local_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    data_local_V_ce0 : OUT STD_LOGIC;
    data_local_V_we0 : OUT STD_LOGIC_VECTOR (127 downto 0);
    data_local_V_d0 : OUT STD_LOGIC_VECTOR (1023 downto 0);
    data_local_V_q0 : IN STD_LOGIC_VECTOR (1023 downto 0);
    datapop_local_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    datapop_local_V_ce0 : OUT STD_LOGIC;
    datapop_local_V_we0 : OUT STD_LOGIC;
    datapop_local_V_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    datapop_local_V_q0 : IN STD_LOGIC_VECTOR (10 downto 0);
    chunk_num : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of tancalc_data_read_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_800 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv17_1FFFF : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv25_1FF : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000111111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_3FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111111111";
    constant ap_const_lv1024_lc_3 : STD_LOGIC_VECTOR (1023 downto
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal input_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln37_reg_666 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_part_0_reg_145 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_num_0_reg_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_part_num_0_reg_167 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln215_fu_199_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal add_ln215_reg_655 : STD_LOGIC_VECTOR (58 downto 0);
    signal icmp_ln37_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln37_reg_666_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_666_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal data_part_num_fu_221_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_part_num_reg_670 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln37_fu_227_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln37_reg_675 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_part_fu_237_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_part_reg_680 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_num_1_fu_243_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_num_1_reg_685 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_part_1_fu_251_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_part_1_reg_691 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state10_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal trunc_ln46_fu_257_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln46_reg_698 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln46_1_fu_261_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln46_1_reg_703 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln46_2_fu_265_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln46_2_reg_708 : STD_LOGIC_VECTOR (1 downto 0);
    signal input_V_addr_read_reg_713 : STD_LOGIC_VECTOR (511 downto 0);
    signal data_local_V_addr_reg_718 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln414_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_reg_723 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_306_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_730 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln414_fu_313_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln414_reg_736 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln414_fu_335_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal shl_ln414_reg_742 : STD_LOGIC_VECTOR (1023 downto 0);
    signal icmp_ln414_1_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_1_reg_748 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_347_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_reg_754 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln414_1_fu_354_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln414_1_reg_759 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln414_3_fu_380_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln414_3_reg_764 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln414_2_fu_390_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal shl_ln414_2_reg_769 : STD_LOGIC_VECTOR (1023 downto 0);
    signal shl_ln414_4_fu_411_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln414_4_reg_775 : STD_LOGIC_VECTOR (127 downto 0);
    signal icmp_ln647_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln647_reg_780 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln647_fu_423_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln647_reg_787 : STD_LOGIC_VECTOR (10 downto 0);
    signal datapop_local_V_addr_reg_793 : STD_LOGIC_VECTOR (9 downto 0);
    signal datapop_local_V_addr_reg_793_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_s_fu_502_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal p_Result_s_reg_798 : STD_LOGIC_VECTOR (1023 downto 0);
    signal tmp_6_fu_560_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_reg_804 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln647_1_fu_567_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln647_1_reg_811 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln364_fu_640_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln364_reg_816 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal grp_popcnt_fu_178_ap_return : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_popcnt_fu_178_ap_ce : STD_LOGIC;
    signal ap_block_state10_pp0_stage1_iter0_ignore_call82 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter1_ignore_call82 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter2_ignore_call82 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_ignoreCallOp121 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter0_ignore_call82 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1_ignore_call82 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter2_ignore_call82 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter3_ignore_call82 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp127 : BOOLEAN;
    signal ap_phi_mux_data_part_0_phi_fu_149_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_data_num_0_phi_fu_160_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_data_part_num_0_phi_fu_171_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln46_1_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_2_fu_205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_183_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln215_1_fu_195_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal zext_ln215_fu_191_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal data_num_fu_231_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln46_fu_269_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln46_fu_272_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal Lo_assign_fu_284_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal or_ln46_fu_291_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sub_ln414_fu_317_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln414_2_fu_323_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_V_fu_297_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln414_fu_331_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal sub_ln414_2_fu_358_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln414_4_fu_364_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln414_6_fu_372_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln414_3_fu_386_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal tmp_5_fu_396_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln414_fu_403_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln414_6_fu_407_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln414_fu_427_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln414_1_fu_432_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln414_1_fu_437_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_fu_451_p4 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln414_1_fu_443_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln414_2_fu_447_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal shl_ln414_1_fu_466_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln414_fu_472_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln414_fu_478_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal xor_ln414_fu_484_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln414_3_fu_460_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln414_1_fu_490_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln414_2_fu_496_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln414_5_fu_508_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_520_p4 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln414_4_fu_513_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln414_5_fu_517_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal shl_ln414_3_fu_535_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln414_1_fu_541_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln414_7_fu_529_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal and_ln414_3_fu_547_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal sub_ln647_fu_582_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln647_2_fu_586_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_fu_573_p4 : STD_LOGIC_VECTOR (1023 downto 0);
    signal select_ln647_fu_590_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln647_2_fu_603_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln647_3_fu_608_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln647_1_fu_597_p3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln647_fu_614_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln647_1_fu_618_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln647_fu_622_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal lshr_ln647_1_fu_628_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal p_Result_1_fu_634_p2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal zext_ln700_fu_644_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component tancalc_popcnt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        x_V : IN STD_LOGIC_VECTOR (511 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;



begin
    grp_popcnt_fu_178 : component tancalc_popcnt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        x_V => trunc_ln364_reg_816,
        ap_return => grp_popcnt_fu_178_ap_return,
        ap_ce => grp_popcnt_fu_178_ap_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    data_num_0_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_reg_666 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                data_num_0_reg_156 <= data_num_1_reg_685;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                data_num_0_reg_156 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    data_part_0_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_reg_666 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                data_part_0_reg_145 <= data_part_1_reg_691;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                data_part_0_reg_145 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    data_part_num_0_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_reg_666 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                data_part_num_0_reg_167 <= data_part_num_reg_670;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                data_part_num_0_reg_167 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                add_ln215_reg_655 <= add_ln215_fu_199_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_reg_666 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                data_local_V_addr_reg_718 <= sext_ln46_1_fu_278_p1(10 - 1 downto 0);
                datapop_local_V_addr_reg_793 <= sext_ln46_1_fu_278_p1(10 - 1 downto 0);
                icmp_ln414_1_reg_748 <= icmp_ln414_1_fu_341_p2;
                icmp_ln414_reg_723 <= icmp_ln414_fu_300_p2;
                icmp_ln647_reg_780 <= icmp_ln647_fu_417_p2;
                shl_ln414_2_reg_769 <= shl_ln414_2_fu_390_p2;
                shl_ln414_4_reg_775 <= shl_ln414_4_fu_411_p2;
                shl_ln414_reg_742 <= shl_ln414_fu_335_p2;
                sub_ln414_3_reg_764 <= sub_ln414_3_fu_380_p2;
                    tmp_1_reg_730(10 downto 9) <= tmp_1_fu_306_p3(10 downto 9);
                    tmp_3_reg_754(10 downto 9) <= tmp_3_fu_347_p3(10 downto 9);
                    trunc_ln414_1_reg_759(10 downto 9) <= trunc_ln414_1_fu_354_p1(10 downto 9);
                    trunc_ln414_reg_736(10 downto 9) <= trunc_ln414_fu_313_p1(10 downto 9);
                    trunc_ln647_reg_787(10 downto 9) <= trunc_ln647_fu_423_p1(10 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_fu_215_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                data_num_1_reg_685 <= data_num_1_fu_243_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_reg_666 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                data_part_1_reg_691 <= data_part_1_fu_251_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                data_part_num_reg_670 <= data_part_num_fu_221_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_fu_215_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                data_part_reg_680 <= data_part_fu_237_p2;
                trunc_ln37_reg_675 <= trunc_ln37_fu_227_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                datapop_local_V_addr_reg_793_pp0_iter2_reg <= datapop_local_V_addr_reg_793;
                icmp_ln37_reg_666 <= icmp_ln37_fu_215_p2;
                icmp_ln37_reg_666_pp0_iter1_reg <= icmp_ln37_reg_666;
                icmp_ln37_reg_666_pp0_iter2_reg <= icmp_ln37_reg_666_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_reg_666 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                input_V_addr_read_reg_713 <= m_axi_input_V_RDATA;
                trunc_ln46_1_reg_703 <= trunc_ln46_1_fu_261_p1;
                trunc_ln46_2_reg_708 <= trunc_ln46_2_fu_265_p1;
                trunc_ln46_reg_698 <= trunc_ln46_fu_257_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_reg_666_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                p_Result_s_reg_798 <= p_Result_s_fu_502_p2;
                    tmp_6_reg_804(10 downto 9) <= tmp_6_fu_560_p3(10 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_reg_666_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln647_reg_780 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                    sub_ln647_1_reg_811(10 downto 9) <= sub_ln647_1_fu_567_p2(10 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_reg_666_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln364_reg_816 <= trunc_ln364_fu_640_p1;
            end if;
        end if;
    end process;
    tmp_1_reg_730(8 downto 0) <= "000000000";
    trunc_ln414_reg_736(8 downto 0) <= "111111111";
    tmp_3_reg_754(8 downto 0) <= "000000000";
    trunc_ln414_1_reg_759(8 downto 0) <= "111111111";
    trunc_ln647_reg_787(8 downto 0) <= "111111111";
    tmp_6_reg_804(8 downto 0) <= "000000000";
    sub_ln647_1_reg_811(8 downto 0) <= "111111111";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_input_V_ARREADY, ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, icmp_ln37_fu_215_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((m_axi_input_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln37_fu_215_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln37_fu_215_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    Lo_assign_fu_284_p3 <= (data_part_1_reg_691 & ap_const_lv9_0);
    add_ln215_fu_199_p2 <= std_logic_vector(unsigned(zext_ln215_1_fu_195_p1) + unsigned(zext_ln215_fu_191_p1));
    add_ln46_fu_272_p2 <= std_logic_vector(signed(sext_ln46_fu_269_p1) + signed(ap_const_lv17_1FFFF));
    and_ln414_1_fu_490_p2 <= (xor_ln414_fu_484_p2 and data_local_V_q0);
    and_ln414_2_fu_496_p2 <= (select_ln414_3_fu_460_p3 and and_ln414_fu_478_p2);
    and_ln414_3_fu_547_p2 <= (shl_ln414_3_fu_535_p2 and lshr_ln414_1_fu_541_p2);
    and_ln414_fu_478_p2 <= (shl_ln414_1_fu_466_p2 and lshr_ln414_fu_472_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state16 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001_ignoreCallOp127 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(m_axi_input_V_RVALID, ap_enable_reg_pp0_iter0, icmp_ln37_reg_666)
    begin
                ap_block_pp0_stage1_11001 <= ((icmp_ln37_reg_666 = ap_const_lv1_0) and (m_axi_input_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_ignoreCallOp121_assign_proc : process(m_axi_input_V_RVALID, ap_enable_reg_pp0_iter0, icmp_ln37_reg_666)
    begin
                ap_block_pp0_stage1_11001_ignoreCallOp121 <= ((icmp_ln37_reg_666 = ap_const_lv1_0) and (m_axi_input_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(m_axi_input_V_RVALID, ap_enable_reg_pp0_iter0, icmp_ln37_reg_666)
    begin
                ap_block_pp0_stage1_subdone <= ((icmp_ln37_reg_666 = ap_const_lv1_0) and (m_axi_input_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage1_iter0_assign_proc : process(m_axi_input_V_RVALID, icmp_ln37_reg_666)
    begin
                ap_block_state10_pp0_stage1_iter0 <= ((icmp_ln37_reg_666 = ap_const_lv1_0) and (m_axi_input_V_RVALID = ap_const_logic_0));
    end process;


    ap_block_state10_pp0_stage1_iter0_ignore_call82_assign_proc : process(m_axi_input_V_RVALID, icmp_ln37_reg_666)
    begin
                ap_block_state10_pp0_stage1_iter0_ignore_call82 <= ((icmp_ln37_reg_666 = ap_const_lv1_0) and (m_axi_input_V_RVALID = ap_const_logic_0));
    end process;

        ap_block_state11_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter1_ignore_call82 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter1_ignore_call82 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter2_ignore_call82 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter2_ignore_call82 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter3_ignore_call82 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0_ignore_call82 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln37_fu_215_p2)
    begin
        if ((icmp_ln37_fu_215_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_data_num_0_phi_fu_160_p4_assign_proc : process(icmp_ln37_reg_666, data_num_0_reg_156, ap_CS_fsm_pp0_stage0, data_num_1_reg_685, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln37_reg_666 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_data_num_0_phi_fu_160_p4 <= data_num_1_reg_685;
        else 
            ap_phi_mux_data_num_0_phi_fu_160_p4 <= data_num_0_reg_156;
        end if; 
    end process;


    ap_phi_mux_data_part_0_phi_fu_149_p4_assign_proc : process(icmp_ln37_reg_666, data_part_0_reg_145, ap_CS_fsm_pp0_stage0, data_part_1_reg_691, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln37_reg_666 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_data_part_0_phi_fu_149_p4 <= data_part_1_reg_691;
        else 
            ap_phi_mux_data_part_0_phi_fu_149_p4 <= data_part_0_reg_145;
        end if; 
    end process;


    ap_phi_mux_data_part_num_0_phi_fu_171_p4_assign_proc : process(icmp_ln37_reg_666, data_part_num_0_reg_167, ap_CS_fsm_pp0_stage0, data_part_num_reg_670, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln37_reg_666 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_data_part_num_0_phi_fu_171_p4 <= data_part_num_reg_670;
        else 
            ap_phi_mux_data_part_num_0_phi_fu_171_p4 <= data_part_num_0_reg_167;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    data_local_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, data_local_V_addr_reg_718, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, sext_ln46_1_fu_278_p1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                data_local_V_address0 <= data_local_V_addr_reg_718;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                data_local_V_address0 <= sext_ln46_1_fu_278_p1(10 - 1 downto 0);
            else 
                data_local_V_address0 <= "XXXXXXXXXX";
            end if;
        else 
            data_local_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    data_local_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            data_local_V_ce0 <= ap_const_logic_1;
        else 
            data_local_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_local_V_d0 <= (select_ln414_7_fu_529_p3 and and_ln414_3_fu_547_p2);

    data_local_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln37_reg_666_pp0_iter1_reg, ap_block_pp0_stage1_11001, shl_ln414_4_reg_775, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln37_reg_666_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            data_local_V_we0 <= shl_ln414_4_reg_775;
        else 
            data_local_V_we0 <= ap_const_lv128_lc_1;
        end if; 
    end process;

    data_num_1_fu_243_p3 <= 
        ap_phi_mux_data_num_0_phi_fu_160_p4 when (trunc_ln37_fu_227_p1(0) = '1') else 
        data_num_fu_231_p2;
    data_num_fu_231_p2 <= std_logic_vector(unsigned(ap_phi_mux_data_num_0_phi_fu_160_p4) + unsigned(ap_const_lv16_1));
    data_part_1_fu_251_p3 <= 
        data_part_reg_680 when (trunc_ln37_reg_675(0) = '1') else 
        ap_const_lv16_0;
    data_part_fu_237_p2 <= std_logic_vector(unsigned(ap_phi_mux_data_part_0_phi_fu_149_p4) + unsigned(ap_const_lv16_1));
    data_part_num_fu_221_p2 <= std_logic_vector(unsigned(ap_phi_mux_data_part_num_0_phi_fu_171_p4) + unsigned(ap_const_lv12_1));
    datapop_local_V_address0 <= datapop_local_V_addr_reg_793_pp0_iter2_reg;

    datapop_local_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            datapop_local_V_ce0 <= ap_const_logic_1;
        else 
            datapop_local_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    datapop_local_V_d0 <= std_logic_vector(unsigned(zext_ln700_fu_644_p1) + unsigned(datapop_local_V_q0));

    datapop_local_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln37_reg_666_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((icmp_ln37_reg_666_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            datapop_local_V_we0 <= ap_const_logic_1;
        else 
            datapop_local_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_popcnt_fu_178_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage1_11001_ignoreCallOp121, ap_block_pp0_stage0_11001_ignoreCallOp127)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp127) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001_ignoreCallOp121) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_popcnt_fu_178_ap_ce <= ap_const_logic_1;
        else 
            grp_popcnt_fu_178_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln37_fu_215_p2 <= "1" when (ap_phi_mux_data_part_num_0_phi_fu_171_p4 = ap_const_lv12_800) else "0";
    icmp_ln414_1_fu_341_p2 <= "1" when (unsigned(Lo_assign_fu_284_p3) > unsigned(or_ln46_fu_291_p2)) else "0";
    icmp_ln414_fu_300_p2 <= "1" when (unsigned(Lo_assign_fu_284_p3) > unsigned(or_ln46_fu_291_p2)) else "0";
    icmp_ln647_fu_417_p2 <= "1" when (unsigned(Lo_assign_fu_284_p3) > unsigned(or_ln46_fu_291_p2)) else "0";

    input_V_blk_n_AR_assign_proc : process(m_axi_input_V_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_V_blk_n_AR <= m_axi_input_V_ARREADY;
        else 
            input_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    input_V_blk_n_R_assign_proc : process(m_axi_input_V_RVALID, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln37_reg_666)
    begin
        if (((icmp_ln37_reg_666 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            input_V_blk_n_R <= m_axi_input_V_RVALID;
        else 
            input_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    lshr_ln414_1_fu_541_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv1024_lc_3),to_integer(unsigned('0' & zext_ln414_5_fu_517_p1(31-1 downto 0)))));
    lshr_ln414_fu_472_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv1024_lc_3),to_integer(unsigned('0' & zext_ln414_2_fu_447_p1(31-1 downto 0)))));
    lshr_ln647_1_fu_628_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv1024_lc_3),to_integer(unsigned('0' & zext_ln647_1_fu_618_p1(31-1 downto 0)))));
    lshr_ln647_fu_622_p2 <= std_logic_vector(shift_right(unsigned(select_ln647_1_fu_597_p3),to_integer(unsigned('0' & zext_ln647_fu_614_p1(31-1 downto 0)))));
    m_axi_input_V_ARADDR <= zext_ln215_2_fu_205_p1;
    m_axi_input_V_ARBURST <= ap_const_lv2_0;
    m_axi_input_V_ARCACHE <= ap_const_lv4_0;
    m_axi_input_V_ARID <= ap_const_lv1_0;
    m_axi_input_V_ARLEN <= ap_const_lv32_800;
    m_axi_input_V_ARLOCK <= ap_const_lv2_0;
    m_axi_input_V_ARPROT <= ap_const_lv3_0;
    m_axi_input_V_ARQOS <= ap_const_lv4_0;
    m_axi_input_V_ARREGION <= ap_const_lv4_0;
    m_axi_input_V_ARSIZE <= ap_const_lv3_0;
    m_axi_input_V_ARUSER <= ap_const_lv1_0;

    m_axi_input_V_ARVALID_assign_proc : process(m_axi_input_V_ARREADY, ap_CS_fsm_state2)
    begin
        if (((m_axi_input_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_input_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_input_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input_V_AWADDR <= ap_const_lv64_0;
    m_axi_input_V_AWBURST <= ap_const_lv2_0;
    m_axi_input_V_AWCACHE <= ap_const_lv4_0;
    m_axi_input_V_AWID <= ap_const_lv1_0;
    m_axi_input_V_AWLEN <= ap_const_lv32_0;
    m_axi_input_V_AWLOCK <= ap_const_lv2_0;
    m_axi_input_V_AWPROT <= ap_const_lv3_0;
    m_axi_input_V_AWQOS <= ap_const_lv4_0;
    m_axi_input_V_AWREGION <= ap_const_lv4_0;
    m_axi_input_V_AWSIZE <= ap_const_lv3_0;
    m_axi_input_V_AWUSER <= ap_const_lv1_0;
    m_axi_input_V_AWVALID <= ap_const_logic_0;
    m_axi_input_V_BREADY <= ap_const_logic_0;

    m_axi_input_V_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln37_reg_666, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln37_reg_666 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            m_axi_input_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_input_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input_V_WDATA <= ap_const_lv512_lc_1;
    m_axi_input_V_WID <= ap_const_lv1_0;
    m_axi_input_V_WLAST <= ap_const_logic_0;
    m_axi_input_V_WSTRB <= ap_const_lv64_0;
    m_axi_input_V_WUSER <= ap_const_lv1_0;
    m_axi_input_V_WVALID <= ap_const_logic_0;
    or_ln46_fu_291_p2 <= (ap_const_lv25_1FF or Lo_assign_fu_284_p3);
    p_Result_1_fu_634_p2 <= (lshr_ln647_fu_622_p2 and lshr_ln647_1_fu_628_p2);
    p_Result_s_fu_502_p2 <= (and_ln414_2_fu_496_p2 or and_ln414_1_fu_490_p2);
    select_ln414_1_fu_432_p3 <= 
        trunc_ln414_reg_736 when (icmp_ln414_reg_723(0) = '1') else 
        tmp_1_reg_730;
    select_ln414_2_fu_323_p3 <= 
        sub_ln414_fu_317_p2 when (icmp_ln414_fu_300_p2(0) = '1') else 
        tmp_1_fu_306_p3;
    select_ln414_3_fu_460_p3 <= 
        tmp_2_fu_451_p4 when (icmp_ln414_reg_723(0) = '1') else 
        shl_ln414_reg_742;
    select_ln414_4_fu_364_p3 <= 
        tmp_3_fu_347_p3 when (icmp_ln414_1_fu_341_p2(0) = '1') else 
        trunc_ln414_1_fu_354_p1;
    select_ln414_5_fu_508_p3 <= 
        trunc_ln414_1_reg_759 when (icmp_ln414_1_reg_748(0) = '1') else 
        tmp_3_reg_754;
    select_ln414_6_fu_372_p3 <= 
        sub_ln414_2_fu_358_p2 when (icmp_ln414_1_fu_341_p2(0) = '1') else 
        tmp_3_fu_347_p3;
    select_ln414_7_fu_529_p3 <= 
        tmp_4_fu_520_p4 when (icmp_ln414_1_reg_748(0) = '1') else 
        shl_ln414_2_reg_769;
    select_ln414_fu_427_p3 <= 
        tmp_1_reg_730 when (icmp_ln414_reg_723(0) = '1') else 
        trunc_ln414_reg_736;
    select_ln647_1_fu_597_p3 <= 
        tmp_7_fu_573_p4 when (icmp_ln647_reg_780(0) = '1') else 
        p_Result_s_reg_798;
    select_ln647_2_fu_603_p3 <= 
        sub_ln647_1_reg_811 when (icmp_ln647_reg_780(0) = '1') else 
        tmp_6_reg_804;
    select_ln647_fu_590_p3 <= 
        sub_ln647_fu_582_p2 when (icmp_ln647_reg_780(0) = '1') else 
        sub_ln647_2_fu_586_p2;
        sext_ln414_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_396_p3),29));

        sext_ln46_1_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln46_fu_272_p2),64));

        sext_ln46_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_num_1_reg_685),17));

    shl_ln414_1_fu_466_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv1024_lc_3),to_integer(unsigned('0' & zext_ln414_1_fu_443_p1(31-1 downto 0)))));
    shl_ln414_2_fu_390_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_fu_297_p1),to_integer(unsigned('0' & zext_ln414_3_fu_386_p1(31-1 downto 0)))));
    shl_ln414_3_fu_535_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv1024_lc_3),to_integer(unsigned('0' & zext_ln414_4_fu_513_p1(31-1 downto 0)))));
    shl_ln414_4_fu_411_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln414_6_fu_407_p1(31-1 downto 0)))));
    shl_ln414_fu_335_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_fu_297_p1),to_integer(unsigned('0' & zext_ln414_fu_331_p1(31-1 downto 0)))));
    shl_ln_fu_183_p3 <= (chunk_num & ap_const_lv1_0);
    sub_ln414_1_fu_437_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(select_ln414_fu_427_p3));
    sub_ln414_2_fu_358_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_3_fu_347_p3));
    sub_ln414_3_fu_380_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(select_ln414_4_fu_364_p3));
    sub_ln414_fu_317_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_1_fu_306_p3));
    sub_ln647_1_fu_567_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_6_fu_560_p3));
    sub_ln647_2_fu_586_p2 <= std_logic_vector(unsigned(trunc_ln647_reg_787) - unsigned(tmp_6_reg_804));
    sub_ln647_3_fu_608_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(select_ln647_fu_590_p3));
    sub_ln647_fu_582_p2 <= std_logic_vector(unsigned(tmp_6_reg_804) - unsigned(trunc_ln647_reg_787));
    tmp_1_fu_306_p3 <= (trunc_ln46_2_reg_708 & ap_const_lv9_0);
    
    tmp_2_fu_451_p4_proc : process(shl_ln414_reg_742)
    variable vlo_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_2_fu_451_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_3FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := shl_ln414_reg_742;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_3FF(10-1 downto 0)));
            for tmp_2_fu_451_p4_i in 0 to 1024-1 loop
                v0_cpy(tmp_2_fu_451_p4_i) := shl_ln414_reg_742(1024-1-tmp_2_fu_451_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1024-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_2_fu_451_p4 <= resvalue(1024-1 downto 0);
    end process;

    tmp_3_fu_347_p3 <= (trunc_ln46_1_reg_703 & ap_const_lv9_0);
    
    tmp_4_fu_520_p4_proc : process(shl_ln414_2_reg_769)
    variable vlo_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_4_fu_520_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_3FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := shl_ln414_2_reg_769;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_3FF(10-1 downto 0)));
            for tmp_4_fu_520_p4_i in 0 to 1024-1 loop
                v0_cpy(tmp_4_fu_520_p4_i) := shl_ln414_2_reg_769(1024-1-tmp_4_fu_520_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1024-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_4_fu_520_p4 <= resvalue(1024-1 downto 0);
    end process;

    tmp_5_fu_396_p3 <= (data_part_1_reg_691 & ap_const_lv6_0);
    tmp_6_fu_560_p3 <= (trunc_ln46_reg_698 & ap_const_lv9_0);
    
    tmp_7_fu_573_p4_proc : process(p_Result_s_reg_798)
    variable vlo_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_7_fu_573_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_3FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := p_Result_s_reg_798;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_3FF(10-1 downto 0)));
            for tmp_7_fu_573_p4_i in 0 to 1024-1 loop
                v0_cpy(tmp_7_fu_573_p4_i) := p_Result_s_reg_798(1024-1-tmp_7_fu_573_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1024-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_7_fu_573_p4 <= resvalue(1024-1 downto 0);
    end process;

    tmp_V_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_V_addr_read_reg_713),1024));
    trunc_ln364_fu_640_p1 <= p_Result_1_fu_634_p2(512 - 1 downto 0);
    trunc_ln37_fu_227_p1 <= ap_phi_mux_data_part_num_0_phi_fu_171_p4(1 - 1 downto 0);
    trunc_ln414_1_fu_354_p1 <= or_ln46_fu_291_p2(11 - 1 downto 0);
    trunc_ln414_fu_313_p1 <= or_ln46_fu_291_p2(11 - 1 downto 0);
    trunc_ln46_1_fu_261_p1 <= data_part_1_fu_251_p3(2 - 1 downto 0);
    trunc_ln46_2_fu_265_p1 <= data_part_1_fu_251_p3(2 - 1 downto 0);
    trunc_ln46_fu_257_p1 <= data_part_1_fu_251_p3(2 - 1 downto 0);
    trunc_ln647_fu_423_p1 <= or_ln46_fu_291_p2(11 - 1 downto 0);
    xor_ln414_fu_484_p2 <= (ap_const_lv1024_lc_3 xor and_ln414_fu_478_p2);
    zext_ln215_1_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_V_offset),59));
    zext_ln215_2_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_reg_655),64));
    zext_ln215_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_183_p3),59));
    zext_ln414_1_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_1_fu_432_p3),1024));
    zext_ln414_2_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln414_1_fu_437_p2),1024));
    zext_ln414_3_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_6_fu_372_p3),1024));
    zext_ln414_4_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_5_fu_508_p3),1024));
    zext_ln414_5_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln414_3_reg_764),1024));
    zext_ln414_6_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln414_fu_403_p1),128));
    zext_ln414_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_2_fu_323_p3),1024));
    zext_ln647_1_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln647_3_fu_608_p2),1024));
    zext_ln647_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln647_2_fu_603_p3),1024));
    zext_ln700_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_popcnt_fu_178_ap_return),11));
end behav;
