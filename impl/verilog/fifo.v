// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fifo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        input_line_0_V_V_dout,
        input_line_0_V_V_empty_n,
        input_line_0_V_V_read,
        input_line_1_V_V_dout,
        input_line_1_V_V_empty_n,
        input_line_1_V_V_read,
        input_line_2_V_V_dout,
        input_line_2_V_V_empty_n,
        input_line_2_V_V_read,
        input_line_3_V_V_dout,
        input_line_3_V_V_empty_n,
        input_line_3_V_V_read,
        input_line_4_V_V_dout,
        input_line_4_V_V_empty_n,
        input_line_4_V_V_read,
        input_line_5_V_V_dout,
        input_line_5_V_V_empty_n,
        input_line_5_V_V_read,
        input_line_6_V_V_dout,
        input_line_6_V_V_empty_n,
        input_line_6_V_V_read,
        input_line_7_V_V_dout,
        input_line_7_V_V_empty_n,
        input_line_7_V_V_read,
        m_axi_output_V_AWVALID,
        m_axi_output_V_AWREADY,
        m_axi_output_V_AWADDR,
        m_axi_output_V_AWID,
        m_axi_output_V_AWLEN,
        m_axi_output_V_AWSIZE,
        m_axi_output_V_AWBURST,
        m_axi_output_V_AWLOCK,
        m_axi_output_V_AWCACHE,
        m_axi_output_V_AWPROT,
        m_axi_output_V_AWQOS,
        m_axi_output_V_AWREGION,
        m_axi_output_V_AWUSER,
        m_axi_output_V_WVALID,
        m_axi_output_V_WREADY,
        m_axi_output_V_WDATA,
        m_axi_output_V_WSTRB,
        m_axi_output_V_WLAST,
        m_axi_output_V_WID,
        m_axi_output_V_WUSER,
        m_axi_output_V_ARVALID,
        m_axi_output_V_ARREADY,
        m_axi_output_V_ARADDR,
        m_axi_output_V_ARID,
        m_axi_output_V_ARLEN,
        m_axi_output_V_ARSIZE,
        m_axi_output_V_ARBURST,
        m_axi_output_V_ARLOCK,
        m_axi_output_V_ARCACHE,
        m_axi_output_V_ARPROT,
        m_axi_output_V_ARQOS,
        m_axi_output_V_ARREGION,
        m_axi_output_V_ARUSER,
        m_axi_output_V_RVALID,
        m_axi_output_V_RREADY,
        m_axi_output_V_RDATA,
        m_axi_output_V_RLAST,
        m_axi_output_V_RID,
        m_axi_output_V_RUSER,
        m_axi_output_V_RRESP,
        m_axi_output_V_BVALID,
        m_axi_output_V_BREADY,
        m_axi_output_V_BRESP,
        m_axi_output_V_BID,
        m_axi_output_V_BUSER,
        output_V_offset_dout,
        output_V_offset_empty_n,
        output_V_offset_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state11 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] input_line_0_V_V_dout;
input   input_line_0_V_V_empty_n;
output   input_line_0_V_V_read;
input  [31:0] input_line_1_V_V_dout;
input   input_line_1_V_V_empty_n;
output   input_line_1_V_V_read;
input  [31:0] input_line_2_V_V_dout;
input   input_line_2_V_V_empty_n;
output   input_line_2_V_V_read;
input  [31:0] input_line_3_V_V_dout;
input   input_line_3_V_V_empty_n;
output   input_line_3_V_V_read;
input  [31:0] input_line_4_V_V_dout;
input   input_line_4_V_V_empty_n;
output   input_line_4_V_V_read;
input  [31:0] input_line_5_V_V_dout;
input   input_line_5_V_V_empty_n;
output   input_line_5_V_V_read;
input  [31:0] input_line_6_V_V_dout;
input   input_line_6_V_V_empty_n;
output   input_line_6_V_V_read;
input  [31:0] input_line_7_V_V_dout;
input   input_line_7_V_V_empty_n;
output   input_line_7_V_V_read;
output   m_axi_output_V_AWVALID;
input   m_axi_output_V_AWREADY;
output  [63:0] m_axi_output_V_AWADDR;
output  [0:0] m_axi_output_V_AWID;
output  [31:0] m_axi_output_V_AWLEN;
output  [2:0] m_axi_output_V_AWSIZE;
output  [1:0] m_axi_output_V_AWBURST;
output  [1:0] m_axi_output_V_AWLOCK;
output  [3:0] m_axi_output_V_AWCACHE;
output  [2:0] m_axi_output_V_AWPROT;
output  [3:0] m_axi_output_V_AWQOS;
output  [3:0] m_axi_output_V_AWREGION;
output  [0:0] m_axi_output_V_AWUSER;
output   m_axi_output_V_WVALID;
input   m_axi_output_V_WREADY;
output  [511:0] m_axi_output_V_WDATA;
output  [63:0] m_axi_output_V_WSTRB;
output   m_axi_output_V_WLAST;
output  [0:0] m_axi_output_V_WID;
output  [0:0] m_axi_output_V_WUSER;
output   m_axi_output_V_ARVALID;
input   m_axi_output_V_ARREADY;
output  [63:0] m_axi_output_V_ARADDR;
output  [0:0] m_axi_output_V_ARID;
output  [31:0] m_axi_output_V_ARLEN;
output  [2:0] m_axi_output_V_ARSIZE;
output  [1:0] m_axi_output_V_ARBURST;
output  [1:0] m_axi_output_V_ARLOCK;
output  [3:0] m_axi_output_V_ARCACHE;
output  [2:0] m_axi_output_V_ARPROT;
output  [3:0] m_axi_output_V_ARQOS;
output  [3:0] m_axi_output_V_ARREGION;
output  [0:0] m_axi_output_V_ARUSER;
input   m_axi_output_V_RVALID;
output   m_axi_output_V_RREADY;
input  [511:0] m_axi_output_V_RDATA;
input   m_axi_output_V_RLAST;
input  [0:0] m_axi_output_V_RID;
input  [0:0] m_axi_output_V_RUSER;
input  [1:0] m_axi_output_V_RRESP;
input   m_axi_output_V_BVALID;
output   m_axi_output_V_BREADY;
input  [1:0] m_axi_output_V_BRESP;
input  [0:0] m_axi_output_V_BID;
input  [0:0] m_axi_output_V_BUSER;
input  [63:0] output_V_offset_dout;
input   output_V_offset_empty_n;
output   output_V_offset_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_line_0_V_V_read;
reg input_line_1_V_V_read;
reg input_line_2_V_V_read;
reg input_line_3_V_V_read;
reg input_line_4_V_V_read;
reg input_line_5_V_V_read;
reg input_line_6_V_V_read;
reg input_line_7_V_V_read;
reg m_axi_output_V_AWVALID;
reg m_axi_output_V_WVALID;
reg m_axi_output_V_BREADY;
reg output_V_offset_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    input_line_0_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten_i_reg_429;
reg   [2:0] tmp_502_reg_438;
reg   [0:0] ap_phi_mux_tmp_503_phi_fu_275_p16;
reg    input_line_1_V_V_blk_n;
reg    input_line_2_V_V_blk_n;
reg    input_line_3_V_V_blk_n;
reg    input_line_4_V_V_blk_n;
reg    input_line_5_V_V_blk_n;
reg    input_line_6_V_V_blk_n;
reg    input_line_7_V_V_blk_n;
reg    output_V_blk_n_AW;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] tmp_503_reg_272;
reg    output_V_blk_n_W;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] tmp_503_reg_272_pp0_iter2_reg;
reg    output_V_blk_n_B;
reg    ap_enable_reg_pp0_iter8;
reg   [0:0] tmp_503_reg_272_pp0_iter7_reg;
reg    output_V_offset_blk_n;
reg   [9:0] indvar_flatten_i_reg_250;
reg   [3:0] buffer_num_i_reg_261;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_predicate_op69_read_state3;
reg    ap_predicate_op71_read_state3;
reg    ap_predicate_op73_read_state3;
reg    ap_predicate_op75_read_state3;
reg    ap_predicate_op77_read_state3;
reg    ap_predicate_op79_read_state3;
reg    ap_predicate_op81_read_state3;
reg    ap_predicate_op83_read_state3;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_sig_ioackin_m_axi_output_V_AWREADY;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_sig_ioackin_m_axi_output_V_WREADY;
reg    ap_block_state5_io;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
reg    ap_block_state10_pp0_stage0_iter8;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_503_reg_272_pp0_iter3_reg;
reg   [0:0] tmp_503_reg_272_pp0_iter4_reg;
reg   [0:0] tmp_503_reg_272_pp0_iter5_reg;
reg   [0:0] tmp_503_reg_272_pp0_iter6_reg;
reg   [31:0] temp_V_reg_302;
wire   [58:0] tmp_cast_i_fu_334_p1;
reg   [58:0] tmp_cast_i_reg_424;
reg    ap_block_state1;
wire   [0:0] exitcond_flatten_i_fu_343_p2;
wire   [9:0] indvar_flatten_next_i_fu_349_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] tmp_502_fu_369_p1;
wire   [3:0] buffer_num_fu_373_p2;
wire   [58:0] sum_i_fu_392_p2;
reg   [58:0] sum_i_reg_487;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
wire   [0:0] ap_phi_reg_pp0_iter1_tmp_503_reg_272;
wire   [31:0] ap_phi_reg_pp0_iter0_temp_V_reg_302;
reg   [31:0] ap_phi_reg_pp0_iter1_temp_V_reg_302;
reg   [31:0] ap_phi_reg_pp0_iter2_temp_V_reg_302;
wire   [63:0] sum_cast_i_fu_402_p1;
reg    ap_reg_ioackin_m_axi_output_V_AWREADY;
reg    ap_block_pp0_stage0_01001;
reg    ap_reg_ioackin_m_axi_output_V_WREADY;
reg   [15:0] data_num_fu_112;
wire   [15:0] data_num_1_fu_382_p2;
wire   [57:0] tmp_fu_324_p4;
wire   [0:0] exitcond3_i_fu_355_p2;
wire   [3:0] buffer_num_mid2_i_fu_361_p3;
wire   [58:0] tmp_cast_i_25_fu_388_p1;
wire    ap_CS_fsm_state11;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_560;
reg    ap_condition_181;
reg    ap_condition_175;
reg    ap_condition_169;
reg    ap_condition_163;
reg    ap_condition_157;
reg    ap_condition_151;
reg    ap_condition_145;
reg    ap_condition_139;
reg    ap_condition_382;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_reg_ioackin_m_axi_output_V_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_output_V_WREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (output_V_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end else if ((~((ap_start == 1'b0) | (output_V_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_output_V_AWREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_503_reg_272 == 1'd1))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_m_axi_output_V_AWREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (m_axi_output_V_AWREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_output_V_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_output_V_WREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter3 == 1'b1) & (tmp_503_reg_272_pp0_iter2_reg == 1'd1))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_m_axi_output_V_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (m_axi_output_V_WREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_output_V_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_382)) begin
        if ((1'b1 == ap_condition_139)) begin
            ap_phi_reg_pp0_iter2_temp_V_reg_302 <= input_line_0_V_V_dout;
        end else if ((1'b1 == ap_condition_145)) begin
            ap_phi_reg_pp0_iter2_temp_V_reg_302 <= input_line_1_V_V_dout;
        end else if ((1'b1 == ap_condition_151)) begin
            ap_phi_reg_pp0_iter2_temp_V_reg_302 <= input_line_2_V_V_dout;
        end else if ((1'b1 == ap_condition_157)) begin
            ap_phi_reg_pp0_iter2_temp_V_reg_302 <= input_line_3_V_V_dout;
        end else if ((1'b1 == ap_condition_163)) begin
            ap_phi_reg_pp0_iter2_temp_V_reg_302 <= input_line_4_V_V_dout;
        end else if ((1'b1 == ap_condition_169)) begin
            ap_phi_reg_pp0_iter2_temp_V_reg_302 <= input_line_5_V_V_dout;
        end else if ((1'b1 == ap_condition_175)) begin
            ap_phi_reg_pp0_iter2_temp_V_reg_302 <= input_line_6_V_V_dout;
        end else if ((1'b1 == ap_condition_181)) begin
            ap_phi_reg_pp0_iter2_temp_V_reg_302 <= input_line_7_V_V_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_temp_V_reg_302 <= ap_phi_reg_pp0_iter1_temp_V_reg_302;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_i_fu_343_p2 == 1'd0))) begin
        buffer_num_i_reg_261 <= buffer_num_fu_373_p2;
    end else if ((~((ap_start == 1'b0) | (output_V_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        buffer_num_i_reg_261 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_phi_mux_tmp_503_phi_fu_275_p16 == 1'd1))) begin
        data_num_fu_112 <= data_num_1_fu_382_p2;
    end else if ((~((ap_start == 1'b0) | (output_V_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        data_num_fu_112 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_i_fu_343_p2 == 1'd0))) begin
        indvar_flatten_i_reg_250 <= indvar_flatten_next_i_fu_349_p2;
    end else if ((~((ap_start == 1'b0) | (output_V_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_i_reg_250 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_382)) begin
        if (((tmp_502_reg_438 == 3'd7) & (exitcond_flatten_i_reg_429 == 1'd0))) begin
            tmp_503_reg_272 <= input_line_7_V_V_empty_n;
        end else if (((tmp_502_reg_438 == 3'd6) & (exitcond_flatten_i_reg_429 == 1'd0))) begin
            tmp_503_reg_272 <= input_line_6_V_V_empty_n;
        end else if (((tmp_502_reg_438 == 3'd5) & (exitcond_flatten_i_reg_429 == 1'd0))) begin
            tmp_503_reg_272 <= input_line_5_V_V_empty_n;
        end else if (((tmp_502_reg_438 == 3'd4) & (exitcond_flatten_i_reg_429 == 1'd0))) begin
            tmp_503_reg_272 <= input_line_4_V_V_empty_n;
        end else if (((tmp_502_reg_438 == 3'd3) & (exitcond_flatten_i_reg_429 == 1'd0))) begin
            tmp_503_reg_272 <= input_line_3_V_V_empty_n;
        end else if (((tmp_502_reg_438 == 3'd2) & (exitcond_flatten_i_reg_429 == 1'd0))) begin
            tmp_503_reg_272 <= input_line_2_V_V_empty_n;
        end else if (((tmp_502_reg_438 == 3'd1) & (exitcond_flatten_i_reg_429 == 1'd0))) begin
            tmp_503_reg_272 <= input_line_1_V_V_empty_n;
        end else if (((tmp_502_reg_438 == 3'd0) & (exitcond_flatten_i_reg_429 == 1'd0))) begin
            tmp_503_reg_272 <= input_line_0_V_V_empty_n;
        end else if ((1'b1 == 1'b1)) begin
            tmp_503_reg_272 <= ap_phi_reg_pp0_iter1_tmp_503_reg_272;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_temp_V_reg_302 <= ap_phi_reg_pp0_iter0_temp_V_reg_302;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_i_reg_429 <= exitcond_flatten_i_fu_343_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_phi_mux_tmp_503_phi_fu_275_p16 == 1'd1))) begin
        sum_i_reg_487 <= sum_i_fu_392_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        temp_V_reg_302 <= ap_phi_reg_pp0_iter2_temp_V_reg_302;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_i_fu_343_p2 == 1'd0))) begin
        tmp_502_reg_438 <= tmp_502_fu_369_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_503_reg_272_pp0_iter2_reg <= tmp_503_reg_272;
        tmp_503_reg_272_pp0_iter3_reg <= tmp_503_reg_272_pp0_iter2_reg;
        tmp_503_reg_272_pp0_iter4_reg <= tmp_503_reg_272_pp0_iter3_reg;
        tmp_503_reg_272_pp0_iter5_reg <= tmp_503_reg_272_pp0_iter4_reg;
        tmp_503_reg_272_pp0_iter6_reg <= tmp_503_reg_272_pp0_iter5_reg;
        tmp_503_reg_272_pp0_iter7_reg <= tmp_503_reg_272_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (output_V_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_cast_i_reg_424[57 : 0] <= tmp_cast_i_fu_334_p1[57 : 0];
    end
end

always @ (*) begin
    if ((exitcond_flatten_i_fu_343_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_560)) begin
        if ((tmp_502_reg_438 == 3'd7)) begin
            ap_phi_mux_tmp_503_phi_fu_275_p16 = input_line_7_V_V_empty_n;
        end else if ((tmp_502_reg_438 == 3'd6)) begin
            ap_phi_mux_tmp_503_phi_fu_275_p16 = input_line_6_V_V_empty_n;
        end else if ((tmp_502_reg_438 == 3'd5)) begin
            ap_phi_mux_tmp_503_phi_fu_275_p16 = input_line_5_V_V_empty_n;
        end else if ((tmp_502_reg_438 == 3'd4)) begin
            ap_phi_mux_tmp_503_phi_fu_275_p16 = input_line_4_V_V_empty_n;
        end else if ((tmp_502_reg_438 == 3'd3)) begin
            ap_phi_mux_tmp_503_phi_fu_275_p16 = input_line_3_V_V_empty_n;
        end else if ((tmp_502_reg_438 == 3'd2)) begin
            ap_phi_mux_tmp_503_phi_fu_275_p16 = input_line_2_V_V_empty_n;
        end else if ((tmp_502_reg_438 == 3'd1)) begin
            ap_phi_mux_tmp_503_phi_fu_275_p16 = input_line_1_V_V_empty_n;
        end else if ((tmp_502_reg_438 == 3'd0)) begin
            ap_phi_mux_tmp_503_phi_fu_275_p16 = input_line_0_V_V_empty_n;
        end else begin
            ap_phi_mux_tmp_503_phi_fu_275_p16 = ap_phi_reg_pp0_iter1_tmp_503_reg_272;
        end
    end else begin
        ap_phi_mux_tmp_503_phi_fu_275_p16 = ap_phi_reg_pp0_iter1_tmp_503_reg_272;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_output_V_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_output_V_AWREADY = m_axi_output_V_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_output_V_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_output_V_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_output_V_WREADY = m_axi_output_V_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_output_V_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_phi_mux_tmp_503_phi_fu_275_p16 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (tmp_502_reg_438 == 3'd0) & (exitcond_flatten_i_reg_429 == 1'd0))) begin
        input_line_0_V_V_blk_n = input_line_0_V_V_empty_n;
    end else begin
        input_line_0_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op81_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_line_0_V_V_read = 1'b1;
    end else begin
        input_line_0_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_phi_mux_tmp_503_phi_fu_275_p16 == 1'd1) & (tmp_502_reg_438 == 3'd1) & (1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_i_reg_429 == 1'd0))) begin
        input_line_1_V_V_blk_n = input_line_1_V_V_empty_n;
    end else begin
        input_line_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op79_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_line_1_V_V_read = 1'b1;
    end else begin
        input_line_1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_phi_mux_tmp_503_phi_fu_275_p16 == 1'd1) & (tmp_502_reg_438 == 3'd2) & (1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_i_reg_429 == 1'd0))) begin
        input_line_2_V_V_blk_n = input_line_2_V_V_empty_n;
    end else begin
        input_line_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op77_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_line_2_V_V_read = 1'b1;
    end else begin
        input_line_2_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_phi_mux_tmp_503_phi_fu_275_p16 == 1'd1) & (tmp_502_reg_438 == 3'd3) & (1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_i_reg_429 == 1'd0))) begin
        input_line_3_V_V_blk_n = input_line_3_V_V_empty_n;
    end else begin
        input_line_3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op75_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_line_3_V_V_read = 1'b1;
    end else begin
        input_line_3_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_phi_mux_tmp_503_phi_fu_275_p16 == 1'd1) & (tmp_502_reg_438 == 3'd4) & (1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_i_reg_429 == 1'd0))) begin
        input_line_4_V_V_blk_n = input_line_4_V_V_empty_n;
    end else begin
        input_line_4_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op73_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_line_4_V_V_read = 1'b1;
    end else begin
        input_line_4_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_phi_mux_tmp_503_phi_fu_275_p16 == 1'd1) & (tmp_502_reg_438 == 3'd5) & (1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_i_reg_429 == 1'd0))) begin
        input_line_5_V_V_blk_n = input_line_5_V_V_empty_n;
    end else begin
        input_line_5_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op71_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_line_5_V_V_read = 1'b1;
    end else begin
        input_line_5_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_phi_mux_tmp_503_phi_fu_275_p16 == 1'd1) & (tmp_502_reg_438 == 3'd6) & (1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_i_reg_429 == 1'd0))) begin
        input_line_6_V_V_blk_n = input_line_6_V_V_empty_n;
    end else begin
        input_line_6_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op69_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_line_6_V_V_read = 1'b1;
    end else begin
        input_line_6_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_phi_mux_tmp_503_phi_fu_275_p16 == 1'd1) & (tmp_502_reg_438 == 3'd7) & (1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_i_reg_429 == 1'd0))) begin
        input_line_7_V_V_blk_n = input_line_7_V_V_empty_n;
    end else begin
        input_line_7_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op83_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_line_7_V_V_read = 1'b1;
    end else begin
        input_line_7_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_m_axi_output_V_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_503_reg_272 == 1'd1))) begin
        m_axi_output_V_AWVALID = 1'b1;
    end else begin
        m_axi_output_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (tmp_503_reg_272_pp0_iter7_reg == 1'd1))) begin
        m_axi_output_V_BREADY = 1'b1;
    end else begin
        m_axi_output_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_m_axi_output_V_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (tmp_503_reg_272_pp0_iter2_reg == 1'd1))) begin
        m_axi_output_V_WVALID = 1'b1;
    end else begin
        m_axi_output_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_503_reg_272 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        output_V_blk_n_AW = m_axi_output_V_AWREADY;
    end else begin
        output_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (tmp_503_reg_272_pp0_iter7_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        output_V_blk_n_B = m_axi_output_V_BVALID;
    end else begin
        output_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (tmp_503_reg_272_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        output_V_blk_n_W = m_axi_output_V_WREADY;
    end else begin
        output_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        output_V_offset_blk_n = output_V_offset_empty_n;
    end else begin
        output_V_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (output_V_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        output_V_offset_read = 1'b1;
    end else begin
        output_V_offset_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (output_V_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_i_fu_343_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter7 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_i_fu_343_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter7 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((m_axi_output_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (tmp_503_reg_272_pp0_iter7_reg == 1'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((input_line_7_V_V_empty_n == 1'b0) & (ap_predicate_op83_read_state3 == 1'b1)) | ((input_line_0_V_V_empty_n == 1'b0) & (ap_predicate_op81_read_state3 == 1'b1)) | ((input_line_1_V_V_empty_n == 1'b0) & (ap_predicate_op79_read_state3 == 1'b1)) | ((input_line_2_V_V_empty_n == 1'b0) & (ap_predicate_op77_read_state3 == 1'b1)) | ((input_line_3_V_V_empty_n == 1'b0) & (ap_predicate_op75_read_state3 == 1'b1)) | ((input_line_4_V_V_empty_n == 1'b0) & (ap_predicate_op73_read_state3 == 1'b1)) | ((input_line_5_V_V_empty_n == 1'b0) & (ap_predicate_op71_read_state3 == 1'b1)) | ((input_line_6_V_V_empty_n == 1'b0) & (ap_predicate_op69_read_state3 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_output_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (tmp_503_reg_272_pp0_iter7_reg == 1'd1)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((input_line_7_V_V_empty_n == 1'b0) & (ap_predicate_op83_read_state3 == 1'b1)) | ((input_line_0_V_V_empty_n == 1'b0) & (ap_predicate_op81_read_state3 == 1'b1)) | ((input_line_1_V_V_empty_n == 1'b0) & (ap_predicate_op79_read_state3 == 1'b1)) | ((input_line_2_V_V_empty_n == 1'b0) & (ap_predicate_op77_read_state3 == 1'b1)) | ((input_line_3_V_V_empty_n == 1'b0) & (ap_predicate_op75_read_state3 == 1'b1)) | ((input_line_4_V_V_empty_n == 1'b0) & (ap_predicate_op73_read_state3 == 1'b1)) | ((input_line_5_V_V_empty_n == 1'b0) & (ap_predicate_op71_read_state3 == 1'b1)) | ((input_line_6_V_V_empty_n == 1'b0) & (ap_predicate_op69_read_state3 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_output_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (tmp_503_reg_272_pp0_iter7_reg == 1'd1)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((input_line_7_V_V_empty_n == 1'b0) & (ap_predicate_op83_read_state3 == 1'b1)) | ((input_line_0_V_V_empty_n == 1'b0) & (ap_predicate_op81_read_state3 == 1'b1)) | ((input_line_1_V_V_empty_n == 1'b0) & (ap_predicate_op79_read_state3 == 1'b1)) | ((input_line_2_V_V_empty_n == 1'b0) & (ap_predicate_op77_read_state3 == 1'b1)) | ((input_line_3_V_V_empty_n == 1'b0) & (ap_predicate_op75_read_state3 == 1'b1)) | ((input_line_4_V_V_empty_n == 1'b0) & (ap_predicate_op73_read_state3 == 1'b1)) | ((input_line_5_V_V_empty_n == 1'b0) & (ap_predicate_op71_read_state3 == 1'b1)) | ((input_line_6_V_V_empty_n == 1'b0) & (ap_predicate_op69_read_state3 == 1'b1)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (output_V_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter8 = ((m_axi_output_V_BVALID == 1'b0) & (tmp_503_reg_272_pp0_iter7_reg == 1'd1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((input_line_7_V_V_empty_n == 1'b0) & (ap_predicate_op83_read_state3 == 1'b1)) | ((input_line_0_V_V_empty_n == 1'b0) & (ap_predicate_op81_read_state3 == 1'b1)) | ((input_line_1_V_V_empty_n == 1'b0) & (ap_predicate_op79_read_state3 == 1'b1)) | ((input_line_2_V_V_empty_n == 1'b0) & (ap_predicate_op77_read_state3 == 1'b1)) | ((input_line_3_V_V_empty_n == 1'b0) & (ap_predicate_op75_read_state3 == 1'b1)) | ((input_line_4_V_V_empty_n == 1'b0) & (ap_predicate_op73_read_state3 == 1'b1)) | ((input_line_5_V_V_empty_n == 1'b0) & (ap_predicate_op71_read_state3 == 1'b1)) | ((input_line_6_V_V_empty_n == 1'b0) & (ap_predicate_op69_read_state3 == 1'b1)));
end

always @ (*) begin
    ap_block_state4_io = ((ap_sig_ioackin_m_axi_output_V_AWREADY == 1'b0) & (tmp_503_reg_272 == 1'd1));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((ap_sig_ioackin_m_axi_output_V_WREADY == 1'b0) & (tmp_503_reg_272_pp0_iter2_reg == 1'd1));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_139 = ((ap_phi_mux_tmp_503_phi_fu_275_p16 == 1'd1) & (tmp_502_reg_438 == 3'd0) & (exitcond_flatten_i_reg_429 == 1'd0));
end

always @ (*) begin
    ap_condition_145 = ((ap_phi_mux_tmp_503_phi_fu_275_p16 == 1'd1) & (tmp_502_reg_438 == 3'd1) & (exitcond_flatten_i_reg_429 == 1'd0));
end

always @ (*) begin
    ap_condition_151 = ((ap_phi_mux_tmp_503_phi_fu_275_p16 == 1'd1) & (tmp_502_reg_438 == 3'd2) & (exitcond_flatten_i_reg_429 == 1'd0));
end

always @ (*) begin
    ap_condition_157 = ((ap_phi_mux_tmp_503_phi_fu_275_p16 == 1'd1) & (tmp_502_reg_438 == 3'd3) & (exitcond_flatten_i_reg_429 == 1'd0));
end

always @ (*) begin
    ap_condition_163 = ((ap_phi_mux_tmp_503_phi_fu_275_p16 == 1'd1) & (tmp_502_reg_438 == 3'd4) & (exitcond_flatten_i_reg_429 == 1'd0));
end

always @ (*) begin
    ap_condition_169 = ((ap_phi_mux_tmp_503_phi_fu_275_p16 == 1'd1) & (tmp_502_reg_438 == 3'd5) & (exitcond_flatten_i_reg_429 == 1'd0));
end

always @ (*) begin
    ap_condition_175 = ((ap_phi_mux_tmp_503_phi_fu_275_p16 == 1'd1) & (tmp_502_reg_438 == 3'd6) & (exitcond_flatten_i_reg_429 == 1'd0));
end

always @ (*) begin
    ap_condition_181 = ((ap_phi_mux_tmp_503_phi_fu_275_p16 == 1'd1) & (tmp_502_reg_438 == 3'd7) & (exitcond_flatten_i_reg_429 == 1'd0));
end

always @ (*) begin
    ap_condition_382 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_560 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_i_reg_429 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_temp_V_reg_302 = 'bx;

assign ap_phi_reg_pp0_iter1_tmp_503_reg_272 = 'bx;

always @ (*) begin
    ap_predicate_op69_read_state3 = ((ap_phi_mux_tmp_503_phi_fu_275_p16 == 1'd1) & (tmp_502_reg_438 == 3'd6) & (exitcond_flatten_i_reg_429 == 1'd0));
end

always @ (*) begin
    ap_predicate_op71_read_state3 = ((ap_phi_mux_tmp_503_phi_fu_275_p16 == 1'd1) & (tmp_502_reg_438 == 3'd5) & (exitcond_flatten_i_reg_429 == 1'd0));
end

always @ (*) begin
    ap_predicate_op73_read_state3 = ((ap_phi_mux_tmp_503_phi_fu_275_p16 == 1'd1) & (tmp_502_reg_438 == 3'd4) & (exitcond_flatten_i_reg_429 == 1'd0));
end

always @ (*) begin
    ap_predicate_op75_read_state3 = ((ap_phi_mux_tmp_503_phi_fu_275_p16 == 1'd1) & (tmp_502_reg_438 == 3'd3) & (exitcond_flatten_i_reg_429 == 1'd0));
end

always @ (*) begin
    ap_predicate_op77_read_state3 = ((ap_phi_mux_tmp_503_phi_fu_275_p16 == 1'd1) & (tmp_502_reg_438 == 3'd2) & (exitcond_flatten_i_reg_429 == 1'd0));
end

always @ (*) begin
    ap_predicate_op79_read_state3 = ((ap_phi_mux_tmp_503_phi_fu_275_p16 == 1'd1) & (tmp_502_reg_438 == 3'd1) & (exitcond_flatten_i_reg_429 == 1'd0));
end

always @ (*) begin
    ap_predicate_op81_read_state3 = ((ap_phi_mux_tmp_503_phi_fu_275_p16 == 1'd1) & (tmp_502_reg_438 == 3'd0) & (exitcond_flatten_i_reg_429 == 1'd0));
end

always @ (*) begin
    ap_predicate_op83_read_state3 = ((ap_phi_mux_tmp_503_phi_fu_275_p16 == 1'd1) & (tmp_502_reg_438 == 3'd7) & (exitcond_flatten_i_reg_429 == 1'd0));
end

assign buffer_num_fu_373_p2 = (buffer_num_mid2_i_fu_361_p3 + 4'd1);

assign buffer_num_mid2_i_fu_361_p3 = ((exitcond3_i_fu_355_p2[0:0] === 1'b1) ? 4'd0 : buffer_num_i_reg_261);

assign data_num_1_fu_382_p2 = (data_num_fu_112 + 16'd1);

assign exitcond3_i_fu_355_p2 = ((buffer_num_i_reg_261 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond_flatten_i_fu_343_p2 = ((indvar_flatten_i_reg_250 == 10'd640) ? 1'b1 : 1'b0);

assign indvar_flatten_next_i_fu_349_p2 = (indvar_flatten_i_reg_250 + 10'd1);

assign m_axi_output_V_ARADDR = 64'd0;

assign m_axi_output_V_ARBURST = 2'd0;

assign m_axi_output_V_ARCACHE = 4'd0;

assign m_axi_output_V_ARID = 1'd0;

assign m_axi_output_V_ARLEN = 32'd0;

assign m_axi_output_V_ARLOCK = 2'd0;

assign m_axi_output_V_ARPROT = 3'd0;

assign m_axi_output_V_ARQOS = 4'd0;

assign m_axi_output_V_ARREGION = 4'd0;

assign m_axi_output_V_ARSIZE = 3'd0;

assign m_axi_output_V_ARUSER = 1'd0;

assign m_axi_output_V_ARVALID = 1'b0;

assign m_axi_output_V_AWADDR = sum_cast_i_fu_402_p1;

assign m_axi_output_V_AWBURST = 2'd0;

assign m_axi_output_V_AWCACHE = 4'd0;

assign m_axi_output_V_AWID = 1'd0;

assign m_axi_output_V_AWLEN = 32'd1;

assign m_axi_output_V_AWLOCK = 2'd0;

assign m_axi_output_V_AWPROT = 3'd0;

assign m_axi_output_V_AWQOS = 4'd0;

assign m_axi_output_V_AWREGION = 4'd0;

assign m_axi_output_V_AWSIZE = 3'd0;

assign m_axi_output_V_AWUSER = 1'd0;

assign m_axi_output_V_RREADY = 1'b0;

assign m_axi_output_V_WDATA = temp_V_reg_302;

assign m_axi_output_V_WID = 1'd0;

assign m_axi_output_V_WLAST = 1'b0;

assign m_axi_output_V_WSTRB = 64'd18446744073709551615;

assign m_axi_output_V_WUSER = 1'd0;

assign sum_cast_i_fu_402_p1 = sum_i_reg_487;

assign sum_i_fu_392_p2 = (tmp_cast_i_reg_424 + tmp_cast_i_25_fu_388_p1);

assign tmp_502_fu_369_p1 = buffer_num_mid2_i_fu_361_p3[2:0];

assign tmp_cast_i_25_fu_388_p1 = data_num_fu_112;

assign tmp_cast_i_fu_334_p1 = tmp_fu_324_p4;

assign tmp_fu_324_p4 = {{output_V_offset_dout[63:6]}};

always @ (posedge ap_clk) begin
    tmp_cast_i_reg_424[58] <= 1'b0;
end

endmodule //fifo
