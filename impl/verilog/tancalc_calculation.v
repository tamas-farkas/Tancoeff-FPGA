// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tancalc_calculation (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ref_local_address0,
        ref_local_ce0,
        ref_local_q0,
        cmpr_local_address0,
        cmpr_local_ce0,
        cmpr_local_q0,
        refpop_local_address0,
        refpop_local_ce0,
        refpop_local_q0,
        cmprpop_local_address0,
        cmprpop_local_ce0,
        cmprpop_local_q0,
        result_local_address0,
        result_local_ce0,
        result_local_we0,
        result_local_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] ref_local_address0;
output   ref_local_ce0;
input  [31:0] ref_local_q0;
output  [6:0] cmpr_local_address0;
output   cmpr_local_ce0;
input  [31:0] cmpr_local_q0;
output  [6:0] refpop_local_address0;
output   refpop_local_ce0;
input  [5:0] refpop_local_q0;
output  [6:0] cmprpop_local_address0;
output   cmprpop_local_ce0;
input  [5:0] cmprpop_local_q0;
output  [6:0] result_local_address0;
output   result_local_ce0;
output   result_local_we0;
output  [0:0] result_local_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ref_local_ce0;
reg cmpr_local_ce0;
reg refpop_local_ce0;
reg cmprpop_local_ce0;
reg result_local_ce0;
reg result_local_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [14:0] indvar_flatten_reg_210;
reg   [7:0] ref_num_0_reg_221;
reg   [7:0] cmpr_num_0_reg_232;
wire   [0:0] icmp_ln33_fu_243_p2;
reg   [0:0] icmp_ln33_reg_1265;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln33_reg_1265_pp0_iter1_reg;
wire   [14:0] add_ln33_fu_249_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [7:0] select_ln36_1_fu_275_p3;
reg   [7:0] select_ln36_1_reg_1274;
wire   [63:0] zext_ln36_fu_283_p1;
reg   [63:0] zext_ln36_reg_1279;
reg   [63:0] zext_ln36_reg_1279_pp0_iter1_reg;
wire   [63:0] zext_ln36_1_fu_288_p1;
reg   [63:0] zext_ln36_1_reg_1290;
wire   [7:0] cmpr_num_fu_293_p2;
wire   [4:0] add_ln36_14_fu_1059_p2;
reg   [4:0] add_ln36_14_reg_1305;
wire   [4:0] add_ln36_29_fu_1205_p2;
reg   [4:0] add_ln36_29_reg_1310;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [7:0] ap_phi_mux_ref_num_0_phi_fu_225_p4;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln37_fu_1259_p2;
wire   [0:0] icmp_ln34_fu_255_p2;
wire   [7:0] add_ln33_1_fu_269_p2;
wire   [7:0] select_ln36_fu_261_p3;
wire   [30:0] trunc_ln36_31_fu_423_p1;
wire   [30:0] trunc_ln36_30_fu_419_p1;
wire   [29:0] trunc_ln36_29_fu_415_p1;
wire   [29:0] trunc_ln36_28_fu_411_p1;
wire   [28:0] trunc_ln36_27_fu_407_p1;
wire   [28:0] trunc_ln36_26_fu_403_p1;
wire   [27:0] trunc_ln36_25_fu_399_p1;
wire   [27:0] trunc_ln36_24_fu_395_p1;
wire   [26:0] trunc_ln36_23_fu_391_p1;
wire   [26:0] trunc_ln36_22_fu_387_p1;
wire   [25:0] trunc_ln36_21_fu_383_p1;
wire   [25:0] trunc_ln36_20_fu_379_p1;
wire   [24:0] trunc_ln36_19_fu_375_p1;
wire   [24:0] trunc_ln36_18_fu_371_p1;
wire   [23:0] trunc_ln36_17_fu_367_p1;
wire   [23:0] trunc_ln36_16_fu_363_p1;
wire   [22:0] trunc_ln36_15_fu_359_p1;
wire   [22:0] trunc_ln36_14_fu_355_p1;
wire   [21:0] trunc_ln36_13_fu_351_p1;
wire   [21:0] trunc_ln36_12_fu_347_p1;
wire   [20:0] trunc_ln36_11_fu_343_p1;
wire   [20:0] trunc_ln36_10_fu_339_p1;
wire   [19:0] trunc_ln36_9_fu_335_p1;
wire   [19:0] trunc_ln36_8_fu_331_p1;
wire   [18:0] trunc_ln36_7_fu_327_p1;
wire   [18:0] trunc_ln36_6_fu_323_p1;
wire   [17:0] trunc_ln36_5_fu_319_p1;
wire   [17:0] trunc_ln36_4_fu_315_p1;
wire   [16:0] trunc_ln36_3_fu_311_p1;
wire   [16:0] trunc_ln36_2_fu_307_p1;
wire   [15:0] trunc_ln36_1_fu_303_p1;
wire   [15:0] trunc_ln36_fu_299_p1;
wire   [15:0] and_ln3_15_fu_523_p2;
wire   [16:0] and_ln3_14_fu_517_p2;
wire   [0:0] trunc_ln7_fu_529_p1;
wire   [0:0] trunc_ln7_1_fu_533_p1;
wire   [0:0] and_ln7_fu_553_p2;
wire   [0:0] tmp_fu_537_p3;
wire   [0:0] tmp_61_fu_545_p3;
wire   [17:0] and_ln3_13_fu_511_p2;
wire   [18:0] and_ln3_12_fu_505_p2;
wire   [0:0] tmp_62_fu_571_p3;
wire   [0:0] tmp_63_fu_579_p3;
wire   [19:0] and_ln3_11_fu_499_p2;
wire   [20:0] and_ln3_10_fu_493_p2;
wire   [0:0] tmp_64_fu_595_p3;
wire   [0:0] tmp_65_fu_603_p3;
wire   [21:0] and_ln3_9_fu_487_p2;
wire   [22:0] and_ln3_8_fu_481_p2;
wire   [0:0] tmp_66_fu_619_p3;
wire   [0:0] tmp_67_fu_627_p3;
wire   [23:0] and_ln3_7_fu_475_p2;
wire   [24:0] and_ln3_6_fu_469_p2;
wire   [0:0] tmp_68_fu_643_p3;
wire   [0:0] tmp_69_fu_651_p3;
wire   [25:0] and_ln3_5_fu_463_p2;
wire   [26:0] and_ln3_4_fu_457_p2;
wire   [0:0] tmp_70_fu_667_p3;
wire   [0:0] tmp_71_fu_675_p3;
wire   [27:0] and_ln3_3_fu_451_p2;
wire   [28:0] and_ln3_2_fu_445_p2;
wire   [0:0] tmp_72_fu_691_p3;
wire   [0:0] tmp_73_fu_699_p3;
wire   [29:0] and_ln3_1_fu_439_p2;
wire   [30:0] and_ln3_fu_433_p2;
wire   [0:0] tmp_74_fu_715_p3;
wire   [0:0] tmp_75_fu_723_p3;
wire   [31:0] and_ln36_fu_427_p2;
wire   [0:0] tmp_76_fu_739_p3;
wire   [0:0] tmp_77_fu_747_p3;
wire   [0:0] tmp_78_fu_763_p3;
wire   [0:0] tmp_79_fu_771_p3;
wire   [0:0] tmp_80_fu_787_p3;
wire   [0:0] tmp_81_fu_795_p3;
wire   [0:0] tmp_82_fu_811_p3;
wire   [0:0] tmp_83_fu_819_p3;
wire   [0:0] tmp_84_fu_835_p3;
wire   [0:0] tmp_85_fu_843_p3;
wire   [0:0] tmp_86_fu_859_p3;
wire   [0:0] tmp_87_fu_867_p3;
wire   [0:0] tmp_88_fu_883_p3;
wire   [0:0] tmp_89_fu_891_p3;
wire   [0:0] tmp_90_fu_907_p3;
wire   [1:0] zext_ln7_121_fu_563_p1;
wire   [1:0] zext_ln7_fu_559_p1;
wire   [1:0] add_ln36_fu_919_p2;
wire   [1:0] zext_ln7_122_fu_567_p1;
wire   [1:0] zext_ln7_123_fu_587_p1;
wire   [1:0] add_ln36_1_fu_929_p2;
wire   [2:0] zext_ln36_3_fu_935_p1;
wire   [2:0] zext_ln36_2_fu_925_p1;
wire   [2:0] add_ln36_2_fu_939_p2;
wire   [1:0] zext_ln7_124_fu_591_p1;
wire   [1:0] zext_ln7_125_fu_611_p1;
wire   [1:0] add_ln36_3_fu_949_p2;
wire   [1:0] zext_ln7_126_fu_615_p1;
wire   [1:0] zext_ln7_127_fu_635_p1;
wire   [1:0] add_ln36_4_fu_959_p2;
wire   [2:0] zext_ln36_6_fu_965_p1;
wire   [2:0] zext_ln36_5_fu_955_p1;
wire   [2:0] add_ln36_5_fu_969_p2;
wire   [3:0] zext_ln36_7_fu_975_p1;
wire   [3:0] zext_ln36_4_fu_945_p1;
wire   [3:0] add_ln36_6_fu_979_p2;
wire   [1:0] zext_ln7_128_fu_639_p1;
wire   [1:0] zext_ln7_129_fu_659_p1;
wire   [1:0] add_ln36_7_fu_989_p2;
wire   [1:0] zext_ln7_130_fu_663_p1;
wire   [1:0] zext_ln7_131_fu_683_p1;
wire   [1:0] add_ln36_8_fu_999_p2;
wire   [2:0] zext_ln36_10_fu_1005_p1;
wire   [2:0] zext_ln36_9_fu_995_p1;
wire   [2:0] add_ln36_9_fu_1009_p2;
wire   [1:0] zext_ln7_132_fu_687_p1;
wire   [1:0] zext_ln7_133_fu_707_p1;
wire   [1:0] add_ln36_10_fu_1019_p2;
wire   [1:0] zext_ln7_134_fu_711_p1;
wire   [1:0] zext_ln7_135_fu_731_p1;
wire   [1:0] add_ln36_11_fu_1029_p2;
wire   [2:0] zext_ln36_13_fu_1035_p1;
wire   [2:0] zext_ln36_12_fu_1025_p1;
wire   [2:0] add_ln36_12_fu_1039_p2;
wire   [3:0] zext_ln36_14_fu_1045_p1;
wire   [3:0] zext_ln36_11_fu_1015_p1;
wire   [3:0] add_ln36_13_fu_1049_p2;
wire   [4:0] zext_ln36_15_fu_1055_p1;
wire   [4:0] zext_ln36_8_fu_985_p1;
wire   [1:0] zext_ln7_136_fu_735_p1;
wire   [1:0] zext_ln7_137_fu_755_p1;
wire   [1:0] add_ln36_15_fu_1065_p2;
wire   [1:0] zext_ln7_138_fu_759_p1;
wire   [1:0] zext_ln7_139_fu_779_p1;
wire   [1:0] add_ln36_16_fu_1075_p2;
wire   [2:0] zext_ln36_18_fu_1081_p1;
wire   [2:0] zext_ln36_17_fu_1071_p1;
wire   [2:0] add_ln36_17_fu_1085_p2;
wire   [1:0] zext_ln7_140_fu_783_p1;
wire   [1:0] zext_ln7_141_fu_803_p1;
wire   [1:0] add_ln36_18_fu_1095_p2;
wire   [1:0] zext_ln7_142_fu_807_p1;
wire   [1:0] zext_ln7_143_fu_827_p1;
wire   [1:0] add_ln36_19_fu_1105_p2;
wire   [2:0] zext_ln36_21_fu_1111_p1;
wire   [2:0] zext_ln36_20_fu_1101_p1;
wire   [2:0] add_ln36_20_fu_1115_p2;
wire   [3:0] zext_ln36_22_fu_1121_p1;
wire   [3:0] zext_ln36_19_fu_1091_p1;
wire   [3:0] add_ln36_21_fu_1125_p2;
wire   [1:0] zext_ln7_144_fu_831_p1;
wire   [1:0] zext_ln7_145_fu_851_p1;
wire   [1:0] add_ln36_22_fu_1135_p2;
wire   [1:0] zext_ln7_146_fu_855_p1;
wire   [1:0] zext_ln7_147_fu_875_p1;
wire   [1:0] add_ln36_23_fu_1145_p2;
wire   [2:0] zext_ln36_25_fu_1151_p1;
wire   [2:0] zext_ln36_24_fu_1141_p1;
wire   [2:0] add_ln36_24_fu_1155_p2;
wire   [1:0] zext_ln7_148_fu_879_p1;
wire   [1:0] zext_ln7_149_fu_899_p1;
wire   [1:0] add_ln36_25_fu_1165_p2;
wire   [1:0] zext_ln7_150_fu_903_p1;
wire   [1:0] zext_ln36_32_fu_915_p1;
wire   [1:0] add_ln36_26_fu_1175_p2;
wire   [2:0] zext_ln36_28_fu_1181_p1;
wire   [2:0] zext_ln36_27_fu_1171_p1;
wire   [2:0] add_ln36_27_fu_1185_p2;
wire   [3:0] zext_ln36_29_fu_1191_p1;
wire   [3:0] zext_ln36_26_fu_1161_p1;
wire   [3:0] add_ln36_28_fu_1195_p2;
wire   [4:0] zext_ln36_30_fu_1201_p1;
wire   [4:0] zext_ln36_23_fu_1131_p1;
wire   [5:0] zext_ln36_31_fu_1214_p1;
wire   [5:0] zext_ln36_16_fu_1211_p1;
wire   [5:0] add_ln36_30_fu_1217_p2;
wire   [6:0] temp_fu_1223_p3;
wire   [6:0] zext_ln37_1_fu_1235_p1;
wire   [6:0] zext_ln37_2_fu_1239_p1;
wire   [6:0] add_ln37_fu_1243_p2;
wire   [7:0] zext_ln37_3_fu_1249_p1;
wire   [7:0] zext_ln37_fu_1231_p1;
wire   [7:0] sub_ln37_fu_1253_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln33_fu_243_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cmpr_num_0_reg_232 <= cmpr_num_fu_293_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cmpr_num_0_reg_232 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln33_fu_243_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_210 <= add_ln33_fu_249_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_210 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln33_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ref_num_0_reg_221 <= select_ln36_1_reg_1274;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ref_num_0_reg_221 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln33_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln36_14_reg_1305 <= add_ln36_14_fu_1059_p2;
        add_ln36_29_reg_1310 <= add_ln36_29_fu_1205_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln33_reg_1265 <= icmp_ln33_fu_243_p2;
        icmp_ln33_reg_1265_pp0_iter1_reg <= icmp_ln33_reg_1265;
        zext_ln36_reg_1279_pp0_iter1_reg[7 : 0] <= zext_ln36_reg_1279[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln33_fu_243_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln36_1_reg_1274 <= select_ln36_1_fu_275_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln33_fu_243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln36_1_reg_1290[7 : 0] <= zext_ln36_1_fu_288_p1[7 : 0];
        zext_ln36_reg_1279[7 : 0] <= zext_ln36_fu_283_p1[7 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln33_fu_243_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln33_reg_1265 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_ref_num_0_phi_fu_225_p4 = select_ln36_1_reg_1274;
    end else begin
        ap_phi_mux_ref_num_0_phi_fu_225_p4 = ref_num_0_reg_221;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cmpr_local_ce0 = 1'b1;
    end else begin
        cmpr_local_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        cmprpop_local_ce0 = 1'b1;
    end else begin
        cmprpop_local_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ref_local_ce0 = 1'b1;
    end else begin
        ref_local_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        refpop_local_ce0 = 1'b1;
    end else begin
        refpop_local_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        result_local_ce0 = 1'b1;
    end else begin
        result_local_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_1259_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        result_local_we0 = 1'b1;
    end else begin
        result_local_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln33_fu_243_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln33_fu_243_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln33_1_fu_269_p2 = (8'd1 + ap_phi_mux_ref_num_0_phi_fu_225_p4);

assign add_ln33_fu_249_p2 = (indvar_flatten_reg_210 + 15'd1);

assign add_ln36_10_fu_1019_p2 = (zext_ln7_132_fu_687_p1 + zext_ln7_133_fu_707_p1);

assign add_ln36_11_fu_1029_p2 = (zext_ln7_134_fu_711_p1 + zext_ln7_135_fu_731_p1);

assign add_ln36_12_fu_1039_p2 = (zext_ln36_13_fu_1035_p1 + zext_ln36_12_fu_1025_p1);

assign add_ln36_13_fu_1049_p2 = (zext_ln36_14_fu_1045_p1 + zext_ln36_11_fu_1015_p1);

assign add_ln36_14_fu_1059_p2 = (zext_ln36_15_fu_1055_p1 + zext_ln36_8_fu_985_p1);

assign add_ln36_15_fu_1065_p2 = (zext_ln7_136_fu_735_p1 + zext_ln7_137_fu_755_p1);

assign add_ln36_16_fu_1075_p2 = (zext_ln7_138_fu_759_p1 + zext_ln7_139_fu_779_p1);

assign add_ln36_17_fu_1085_p2 = (zext_ln36_18_fu_1081_p1 + zext_ln36_17_fu_1071_p1);

assign add_ln36_18_fu_1095_p2 = (zext_ln7_140_fu_783_p1 + zext_ln7_141_fu_803_p1);

assign add_ln36_19_fu_1105_p2 = (zext_ln7_142_fu_807_p1 + zext_ln7_143_fu_827_p1);

assign add_ln36_1_fu_929_p2 = (zext_ln7_122_fu_567_p1 + zext_ln7_123_fu_587_p1);

assign add_ln36_20_fu_1115_p2 = (zext_ln36_21_fu_1111_p1 + zext_ln36_20_fu_1101_p1);

assign add_ln36_21_fu_1125_p2 = (zext_ln36_22_fu_1121_p1 + zext_ln36_19_fu_1091_p1);

assign add_ln36_22_fu_1135_p2 = (zext_ln7_144_fu_831_p1 + zext_ln7_145_fu_851_p1);

assign add_ln36_23_fu_1145_p2 = (zext_ln7_146_fu_855_p1 + zext_ln7_147_fu_875_p1);

assign add_ln36_24_fu_1155_p2 = (zext_ln36_25_fu_1151_p1 + zext_ln36_24_fu_1141_p1);

assign add_ln36_25_fu_1165_p2 = (zext_ln7_148_fu_879_p1 + zext_ln7_149_fu_899_p1);

assign add_ln36_26_fu_1175_p2 = (zext_ln7_150_fu_903_p1 + zext_ln36_32_fu_915_p1);

assign add_ln36_27_fu_1185_p2 = (zext_ln36_28_fu_1181_p1 + zext_ln36_27_fu_1171_p1);

assign add_ln36_28_fu_1195_p2 = (zext_ln36_29_fu_1191_p1 + zext_ln36_26_fu_1161_p1);

assign add_ln36_29_fu_1205_p2 = (zext_ln36_30_fu_1201_p1 + zext_ln36_23_fu_1131_p1);

assign add_ln36_2_fu_939_p2 = (zext_ln36_3_fu_935_p1 + zext_ln36_2_fu_925_p1);

assign add_ln36_30_fu_1217_p2 = (zext_ln36_31_fu_1214_p1 + zext_ln36_16_fu_1211_p1);

assign add_ln36_3_fu_949_p2 = (zext_ln7_124_fu_591_p1 + zext_ln7_125_fu_611_p1);

assign add_ln36_4_fu_959_p2 = (zext_ln7_126_fu_615_p1 + zext_ln7_127_fu_635_p1);

assign add_ln36_5_fu_969_p2 = (zext_ln36_6_fu_965_p1 + zext_ln36_5_fu_955_p1);

assign add_ln36_6_fu_979_p2 = (zext_ln36_7_fu_975_p1 + zext_ln36_4_fu_945_p1);

assign add_ln36_7_fu_989_p2 = (zext_ln7_128_fu_639_p1 + zext_ln7_129_fu_659_p1);

assign add_ln36_8_fu_999_p2 = (zext_ln7_130_fu_663_p1 + zext_ln7_131_fu_683_p1);

assign add_ln36_9_fu_1009_p2 = (zext_ln36_10_fu_1005_p1 + zext_ln36_9_fu_995_p1);

assign add_ln36_fu_919_p2 = (zext_ln7_121_fu_563_p1 + zext_ln7_fu_559_p1);

assign add_ln37_fu_1243_p2 = (zext_ln37_1_fu_1235_p1 + zext_ln37_2_fu_1239_p1);

assign and_ln36_fu_427_p2 = (ref_local_q0 & cmpr_local_q0);

assign and_ln3_10_fu_493_p2 = (trunc_ln36_11_fu_343_p1 & trunc_ln36_10_fu_339_p1);

assign and_ln3_11_fu_499_p2 = (trunc_ln36_9_fu_335_p1 & trunc_ln36_8_fu_331_p1);

assign and_ln3_12_fu_505_p2 = (trunc_ln36_7_fu_327_p1 & trunc_ln36_6_fu_323_p1);

assign and_ln3_13_fu_511_p2 = (trunc_ln36_5_fu_319_p1 & trunc_ln36_4_fu_315_p1);

assign and_ln3_14_fu_517_p2 = (trunc_ln36_3_fu_311_p1 & trunc_ln36_2_fu_307_p1);

assign and_ln3_15_fu_523_p2 = (trunc_ln36_fu_299_p1 & trunc_ln36_1_fu_303_p1);

assign and_ln3_1_fu_439_p2 = (trunc_ln36_29_fu_415_p1 & trunc_ln36_28_fu_411_p1);

assign and_ln3_2_fu_445_p2 = (trunc_ln36_27_fu_407_p1 & trunc_ln36_26_fu_403_p1);

assign and_ln3_3_fu_451_p2 = (trunc_ln36_25_fu_399_p1 & trunc_ln36_24_fu_395_p1);

assign and_ln3_4_fu_457_p2 = (trunc_ln36_23_fu_391_p1 & trunc_ln36_22_fu_387_p1);

assign and_ln3_5_fu_463_p2 = (trunc_ln36_21_fu_383_p1 & trunc_ln36_20_fu_379_p1);

assign and_ln3_6_fu_469_p2 = (trunc_ln36_19_fu_375_p1 & trunc_ln36_18_fu_371_p1);

assign and_ln3_7_fu_475_p2 = (trunc_ln36_17_fu_367_p1 & trunc_ln36_16_fu_363_p1);

assign and_ln3_8_fu_481_p2 = (trunc_ln36_15_fu_359_p1 & trunc_ln36_14_fu_355_p1);

assign and_ln3_9_fu_487_p2 = (trunc_ln36_13_fu_351_p1 & trunc_ln36_12_fu_347_p1);

assign and_ln3_fu_433_p2 = (trunc_ln36_31_fu_423_p1 & trunc_ln36_30_fu_419_p1);

assign and_ln7_fu_553_p2 = (trunc_ln7_fu_529_p1 & trunc_ln7_1_fu_533_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign cmpr_local_address0 = zext_ln36_1_fu_288_p1;

assign cmpr_num_fu_293_p2 = (select_ln36_fu_261_p3 + 8'd1);

assign cmprpop_local_address0 = zext_ln36_1_reg_1290;

assign icmp_ln33_fu_243_p2 = ((indvar_flatten_reg_210 == 15'd16384) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_255_p2 = ((cmpr_num_0_reg_232 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_1259_p2 = ((zext_ln37_fu_1231_p1 < sub_ln37_fu_1253_p2) ? 1'b1 : 1'b0);

assign ref_local_address0 = zext_ln36_fu_283_p1;

assign refpop_local_address0 = zext_ln36_reg_1279;

assign result_local_address0 = zext_ln36_reg_1279_pp0_iter1_reg;

assign result_local_d0 = 1'd1;

assign select_ln36_1_fu_275_p3 = ((icmp_ln34_fu_255_p2[0:0] === 1'b1) ? add_ln33_1_fu_269_p2 : ap_phi_mux_ref_num_0_phi_fu_225_p4);

assign select_ln36_fu_261_p3 = ((icmp_ln34_fu_255_p2[0:0] === 1'b1) ? 8'd0 : cmpr_num_0_reg_232);

assign sub_ln37_fu_1253_p2 = (zext_ln37_3_fu_1249_p1 - zext_ln37_fu_1231_p1);

assign temp_fu_1223_p3 = {{add_ln36_30_fu_1217_p2}, {1'd0}};

assign tmp_61_fu_545_p3 = and_ln3_14_fu_517_p2[32'd2];

assign tmp_62_fu_571_p3 = and_ln3_13_fu_511_p2[32'd3];

assign tmp_63_fu_579_p3 = and_ln3_12_fu_505_p2[32'd4];

assign tmp_64_fu_595_p3 = and_ln3_11_fu_499_p2[32'd5];

assign tmp_65_fu_603_p3 = and_ln3_10_fu_493_p2[32'd6];

assign tmp_66_fu_619_p3 = and_ln3_9_fu_487_p2[32'd7];

assign tmp_67_fu_627_p3 = and_ln3_8_fu_481_p2[32'd8];

assign tmp_68_fu_643_p3 = and_ln3_7_fu_475_p2[32'd9];

assign tmp_69_fu_651_p3 = and_ln3_6_fu_469_p2[32'd10];

assign tmp_70_fu_667_p3 = and_ln3_5_fu_463_p2[32'd11];

assign tmp_71_fu_675_p3 = and_ln3_4_fu_457_p2[32'd12];

assign tmp_72_fu_691_p3 = and_ln3_3_fu_451_p2[32'd13];

assign tmp_73_fu_699_p3 = and_ln3_2_fu_445_p2[32'd14];

assign tmp_74_fu_715_p3 = and_ln3_1_fu_439_p2[32'd15];

assign tmp_75_fu_723_p3 = and_ln3_fu_433_p2[32'd16];

assign tmp_76_fu_739_p3 = and_ln36_fu_427_p2[32'd17];

assign tmp_77_fu_747_p3 = and_ln36_fu_427_p2[32'd18];

assign tmp_78_fu_763_p3 = and_ln36_fu_427_p2[32'd19];

assign tmp_79_fu_771_p3 = and_ln36_fu_427_p2[32'd20];

assign tmp_80_fu_787_p3 = and_ln36_fu_427_p2[32'd21];

assign tmp_81_fu_795_p3 = and_ln36_fu_427_p2[32'd22];

assign tmp_82_fu_811_p3 = and_ln36_fu_427_p2[32'd23];

assign tmp_83_fu_819_p3 = and_ln36_fu_427_p2[32'd24];

assign tmp_84_fu_835_p3 = and_ln36_fu_427_p2[32'd25];

assign tmp_85_fu_843_p3 = and_ln36_fu_427_p2[32'd26];

assign tmp_86_fu_859_p3 = and_ln36_fu_427_p2[32'd27];

assign tmp_87_fu_867_p3 = and_ln36_fu_427_p2[32'd28];

assign tmp_88_fu_883_p3 = and_ln36_fu_427_p2[32'd29];

assign tmp_89_fu_891_p3 = and_ln36_fu_427_p2[32'd30];

assign tmp_90_fu_907_p3 = and_ln36_fu_427_p2[32'd31];

assign tmp_fu_537_p3 = and_ln3_15_fu_523_p2[32'd1];

assign trunc_ln36_10_fu_339_p1 = ref_local_q0[20:0];

assign trunc_ln36_11_fu_343_p1 = cmpr_local_q0[20:0];

assign trunc_ln36_12_fu_347_p1 = ref_local_q0[21:0];

assign trunc_ln36_13_fu_351_p1 = cmpr_local_q0[21:0];

assign trunc_ln36_14_fu_355_p1 = ref_local_q0[22:0];

assign trunc_ln36_15_fu_359_p1 = cmpr_local_q0[22:0];

assign trunc_ln36_16_fu_363_p1 = ref_local_q0[23:0];

assign trunc_ln36_17_fu_367_p1 = cmpr_local_q0[23:0];

assign trunc_ln36_18_fu_371_p1 = ref_local_q0[24:0];

assign trunc_ln36_19_fu_375_p1 = cmpr_local_q0[24:0];

assign trunc_ln36_1_fu_303_p1 = cmpr_local_q0[15:0];

assign trunc_ln36_20_fu_379_p1 = ref_local_q0[25:0];

assign trunc_ln36_21_fu_383_p1 = cmpr_local_q0[25:0];

assign trunc_ln36_22_fu_387_p1 = ref_local_q0[26:0];

assign trunc_ln36_23_fu_391_p1 = cmpr_local_q0[26:0];

assign trunc_ln36_24_fu_395_p1 = ref_local_q0[27:0];

assign trunc_ln36_25_fu_399_p1 = cmpr_local_q0[27:0];

assign trunc_ln36_26_fu_403_p1 = ref_local_q0[28:0];

assign trunc_ln36_27_fu_407_p1 = cmpr_local_q0[28:0];

assign trunc_ln36_28_fu_411_p1 = ref_local_q0[29:0];

assign trunc_ln36_29_fu_415_p1 = cmpr_local_q0[29:0];

assign trunc_ln36_2_fu_307_p1 = ref_local_q0[16:0];

assign trunc_ln36_30_fu_419_p1 = ref_local_q0[30:0];

assign trunc_ln36_31_fu_423_p1 = cmpr_local_q0[30:0];

assign trunc_ln36_3_fu_311_p1 = cmpr_local_q0[16:0];

assign trunc_ln36_4_fu_315_p1 = ref_local_q0[17:0];

assign trunc_ln36_5_fu_319_p1 = cmpr_local_q0[17:0];

assign trunc_ln36_6_fu_323_p1 = ref_local_q0[18:0];

assign trunc_ln36_7_fu_327_p1 = cmpr_local_q0[18:0];

assign trunc_ln36_8_fu_331_p1 = ref_local_q0[19:0];

assign trunc_ln36_9_fu_335_p1 = cmpr_local_q0[19:0];

assign trunc_ln36_fu_299_p1 = ref_local_q0[15:0];

assign trunc_ln7_1_fu_533_p1 = cmpr_local_q0[0:0];

assign trunc_ln7_fu_529_p1 = ref_local_q0[0:0];

assign zext_ln36_10_fu_1005_p1 = add_ln36_8_fu_999_p2;

assign zext_ln36_11_fu_1015_p1 = add_ln36_9_fu_1009_p2;

assign zext_ln36_12_fu_1025_p1 = add_ln36_10_fu_1019_p2;

assign zext_ln36_13_fu_1035_p1 = add_ln36_11_fu_1029_p2;

assign zext_ln36_14_fu_1045_p1 = add_ln36_12_fu_1039_p2;

assign zext_ln36_15_fu_1055_p1 = add_ln36_13_fu_1049_p2;

assign zext_ln36_16_fu_1211_p1 = add_ln36_14_reg_1305;

assign zext_ln36_17_fu_1071_p1 = add_ln36_15_fu_1065_p2;

assign zext_ln36_18_fu_1081_p1 = add_ln36_16_fu_1075_p2;

assign zext_ln36_19_fu_1091_p1 = add_ln36_17_fu_1085_p2;

assign zext_ln36_1_fu_288_p1 = select_ln36_fu_261_p3;

assign zext_ln36_20_fu_1101_p1 = add_ln36_18_fu_1095_p2;

assign zext_ln36_21_fu_1111_p1 = add_ln36_19_fu_1105_p2;

assign zext_ln36_22_fu_1121_p1 = add_ln36_20_fu_1115_p2;

assign zext_ln36_23_fu_1131_p1 = add_ln36_21_fu_1125_p2;

assign zext_ln36_24_fu_1141_p1 = add_ln36_22_fu_1135_p2;

assign zext_ln36_25_fu_1151_p1 = add_ln36_23_fu_1145_p2;

assign zext_ln36_26_fu_1161_p1 = add_ln36_24_fu_1155_p2;

assign zext_ln36_27_fu_1171_p1 = add_ln36_25_fu_1165_p2;

assign zext_ln36_28_fu_1181_p1 = add_ln36_26_fu_1175_p2;

assign zext_ln36_29_fu_1191_p1 = add_ln36_27_fu_1185_p2;

assign zext_ln36_2_fu_925_p1 = add_ln36_fu_919_p2;

assign zext_ln36_30_fu_1201_p1 = add_ln36_28_fu_1195_p2;

assign zext_ln36_31_fu_1214_p1 = add_ln36_29_reg_1310;

assign zext_ln36_32_fu_915_p1 = tmp_90_fu_907_p3;

assign zext_ln36_3_fu_935_p1 = add_ln36_1_fu_929_p2;

assign zext_ln36_4_fu_945_p1 = add_ln36_2_fu_939_p2;

assign zext_ln36_5_fu_955_p1 = add_ln36_3_fu_949_p2;

assign zext_ln36_6_fu_965_p1 = add_ln36_4_fu_959_p2;

assign zext_ln36_7_fu_975_p1 = add_ln36_5_fu_969_p2;

assign zext_ln36_8_fu_985_p1 = add_ln36_6_fu_979_p2;

assign zext_ln36_9_fu_995_p1 = add_ln36_7_fu_989_p2;

assign zext_ln36_fu_283_p1 = select_ln36_1_fu_275_p3;

assign zext_ln37_1_fu_1235_p1 = refpop_local_q0;

assign zext_ln37_2_fu_1239_p1 = cmprpop_local_q0;

assign zext_ln37_3_fu_1249_p1 = add_ln37_fu_1243_p2;

assign zext_ln37_fu_1231_p1 = temp_fu_1223_p3;

assign zext_ln7_121_fu_563_p1 = tmp_fu_537_p3;

assign zext_ln7_122_fu_567_p1 = tmp_61_fu_545_p3;

assign zext_ln7_123_fu_587_p1 = tmp_62_fu_571_p3;

assign zext_ln7_124_fu_591_p1 = tmp_63_fu_579_p3;

assign zext_ln7_125_fu_611_p1 = tmp_64_fu_595_p3;

assign zext_ln7_126_fu_615_p1 = tmp_65_fu_603_p3;

assign zext_ln7_127_fu_635_p1 = tmp_66_fu_619_p3;

assign zext_ln7_128_fu_639_p1 = tmp_67_fu_627_p3;

assign zext_ln7_129_fu_659_p1 = tmp_68_fu_643_p3;

assign zext_ln7_130_fu_663_p1 = tmp_69_fu_651_p3;

assign zext_ln7_131_fu_683_p1 = tmp_70_fu_667_p3;

assign zext_ln7_132_fu_687_p1 = tmp_71_fu_675_p3;

assign zext_ln7_133_fu_707_p1 = tmp_72_fu_691_p3;

assign zext_ln7_134_fu_711_p1 = tmp_73_fu_699_p3;

assign zext_ln7_135_fu_731_p1 = tmp_74_fu_715_p3;

assign zext_ln7_136_fu_735_p1 = tmp_75_fu_723_p3;

assign zext_ln7_137_fu_755_p1 = tmp_76_fu_739_p3;

assign zext_ln7_138_fu_759_p1 = tmp_77_fu_747_p3;

assign zext_ln7_139_fu_779_p1 = tmp_78_fu_763_p3;

assign zext_ln7_140_fu_783_p1 = tmp_79_fu_771_p3;

assign zext_ln7_141_fu_803_p1 = tmp_80_fu_787_p3;

assign zext_ln7_142_fu_807_p1 = tmp_81_fu_795_p3;

assign zext_ln7_143_fu_827_p1 = tmp_82_fu_811_p3;

assign zext_ln7_144_fu_831_p1 = tmp_83_fu_819_p3;

assign zext_ln7_145_fu_851_p1 = tmp_84_fu_835_p3;

assign zext_ln7_146_fu_855_p1 = tmp_85_fu_843_p3;

assign zext_ln7_147_fu_875_p1 = tmp_86_fu_859_p3;

assign zext_ln7_148_fu_879_p1 = tmp_87_fu_867_p3;

assign zext_ln7_149_fu_899_p1 = tmp_88_fu_883_p3;

assign zext_ln7_150_fu_903_p1 = tmp_89_fu_891_p3;

assign zext_ln7_fu_559_p1 = and_ln7_fu_553_p2;

always @ (posedge ap_clk) begin
    zext_ln36_reg_1279[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln36_reg_1279_pp0_iter1_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln36_1_reg_1290[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //tancalc_calculation
