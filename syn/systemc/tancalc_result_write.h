// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _tancalc_result_write_HH_
#define _tancalc_result_write_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct tancalc_result_write : public sc_module {
    // Port declarations 77
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_output_V_AWVALID;
    sc_in< sc_logic > m_axi_output_V_AWREADY;
    sc_out< sc_lv<64> > m_axi_output_V_AWADDR;
    sc_out< sc_lv<1> > m_axi_output_V_AWID;
    sc_out< sc_lv<32> > m_axi_output_V_AWLEN;
    sc_out< sc_lv<3> > m_axi_output_V_AWSIZE;
    sc_out< sc_lv<2> > m_axi_output_V_AWBURST;
    sc_out< sc_lv<2> > m_axi_output_V_AWLOCK;
    sc_out< sc_lv<4> > m_axi_output_V_AWCACHE;
    sc_out< sc_lv<3> > m_axi_output_V_AWPROT;
    sc_out< sc_lv<4> > m_axi_output_V_AWQOS;
    sc_out< sc_lv<4> > m_axi_output_V_AWREGION;
    sc_out< sc_lv<1> > m_axi_output_V_AWUSER;
    sc_out< sc_logic > m_axi_output_V_WVALID;
    sc_in< sc_logic > m_axi_output_V_WREADY;
    sc_out< sc_lv<512> > m_axi_output_V_WDATA;
    sc_out< sc_lv<64> > m_axi_output_V_WSTRB;
    sc_out< sc_logic > m_axi_output_V_WLAST;
    sc_out< sc_lv<1> > m_axi_output_V_WID;
    sc_out< sc_lv<1> > m_axi_output_V_WUSER;
    sc_out< sc_logic > m_axi_output_V_ARVALID;
    sc_in< sc_logic > m_axi_output_V_ARREADY;
    sc_out< sc_lv<64> > m_axi_output_V_ARADDR;
    sc_out< sc_lv<1> > m_axi_output_V_ARID;
    sc_out< sc_lv<32> > m_axi_output_V_ARLEN;
    sc_out< sc_lv<3> > m_axi_output_V_ARSIZE;
    sc_out< sc_lv<2> > m_axi_output_V_ARBURST;
    sc_out< sc_lv<2> > m_axi_output_V_ARLOCK;
    sc_out< sc_lv<4> > m_axi_output_V_ARCACHE;
    sc_out< sc_lv<3> > m_axi_output_V_ARPROT;
    sc_out< sc_lv<4> > m_axi_output_V_ARQOS;
    sc_out< sc_lv<4> > m_axi_output_V_ARREGION;
    sc_out< sc_lv<1> > m_axi_output_V_ARUSER;
    sc_in< sc_logic > m_axi_output_V_RVALID;
    sc_out< sc_logic > m_axi_output_V_RREADY;
    sc_in< sc_lv<512> > m_axi_output_V_RDATA;
    sc_in< sc_logic > m_axi_output_V_RLAST;
    sc_in< sc_lv<1> > m_axi_output_V_RID;
    sc_in< sc_lv<1> > m_axi_output_V_RUSER;
    sc_in< sc_lv<2> > m_axi_output_V_RRESP;
    sc_in< sc_logic > m_axi_output_V_BVALID;
    sc_out< sc_logic > m_axi_output_V_BREADY;
    sc_in< sc_lv<2> > m_axi_output_V_BRESP;
    sc_in< sc_lv<1> > m_axi_output_V_BID;
    sc_in< sc_lv<1> > m_axi_output_V_BUSER;
    sc_in< sc_lv<58> > output_V_offset_dout;
    sc_in< sc_logic > output_V_offset_empty_n;
    sc_out< sc_logic > output_V_offset_read;
    sc_in< sc_lv<1> > result_local_0_V_read_2;
    sc_in< sc_lv<1> > result_local_1_V_read_2;
    sc_in< sc_lv<1> > result_local_2_V_read_2;
    sc_in< sc_lv<1> > result_local_3_V_read_2;
    sc_in< sc_lv<1> > result_local_4_V_read_2;
    sc_in< sc_lv<1> > result_local_5_V_read_2;
    sc_in< sc_lv<1> > result_local_6_V_read_2;
    sc_in< sc_lv<1> > result_local_7_V_read_2;
    sc_in< sc_lv<1> > result_local_8_V_read_2;
    sc_in< sc_lv<1> > result_local_9_V_read_2;
    sc_in< sc_lv<1> > result_local_10_V_read_2;
    sc_in< sc_lv<1> > result_local_11_V_read_2;
    sc_in< sc_lv<1> > result_local_12_V_read_2;
    sc_in< sc_lv<1> > result_local_13_V_read_2;
    sc_in< sc_lv<1> > result_local_14_V_read_2;
    sc_in< sc_lv<1> > result_local_15_V_read_2;
    sc_in< sc_lv<2> > cmpr_chunk_num_0_i_c_dout;
    sc_in< sc_logic > cmpr_chunk_num_0_i_c_empty_n;
    sc_out< sc_logic > cmpr_chunk_num_0_i_c_read;
    sc_in< sc_lv<6> > data_num_0_i_c1_dout;
    sc_in< sc_logic > data_num_0_i_c1_empty_n;
    sc_out< sc_logic > data_num_0_i_c1_read;


    // Module declarations
    tancalc_result_write(sc_module_name name);
    SC_HAS_PROCESS(tancalc_result_write);

    ~tancalc_result_write();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > output_V_blk_n_AW;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > output_V_blk_n_W;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > output_V_blk_n_B;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_logic > output_V_offset_blk_n;
    sc_signal< sc_logic > cmpr_chunk_num_0_i_c_blk_n;
    sc_signal< sc_logic > data_num_0_i_c1_blk_n;
    sc_signal< sc_lv<59> > add_ln332_fu_230_p2;
    sc_signal< sc_lv<59> > add_ln332_reg_340;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > or_ln66_14_fu_320_p2;
    sc_signal< sc_lv<1> > or_ln66_14_reg_345;
    sc_signal< sc_lv<64> > zext_ln332_2_fu_326_p1;
    sc_signal< sc_lv<8> > tmp_i_i_fu_214_p3;
    sc_signal< sc_lv<59> > zext_ln332_1_fu_226_p1;
    sc_signal< sc_lv<59> > zext_ln332_fu_222_p1;
    sc_signal< sc_lv<1> > or_ln66_fu_236_p2;
    sc_signal< sc_lv<1> > or_ln66_1_fu_242_p2;
    sc_signal< sc_lv<1> > or_ln66_2_fu_248_p2;
    sc_signal< sc_lv<1> > or_ln66_3_fu_254_p2;
    sc_signal< sc_lv<1> > or_ln66_4_fu_260_p2;
    sc_signal< sc_lv<1> > or_ln66_5_fu_266_p2;
    sc_signal< sc_lv<1> > or_ln66_6_fu_272_p2;
    sc_signal< sc_lv<1> > or_ln66_7_fu_278_p2;
    sc_signal< sc_lv<1> > or_ln66_8_fu_284_p2;
    sc_signal< sc_lv<1> > or_ln66_9_fu_290_p2;
    sc_signal< sc_lv<1> > or_ln66_10_fu_296_p2;
    sc_signal< sc_lv<1> > or_ln66_11_fu_302_p2;
    sc_signal< sc_lv<1> > or_ln66_12_fu_308_p2;
    sc_signal< sc_lv<1> > or_ln66_13_fu_314_p2;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state1;
    static const sc_lv<8> ap_ST_fsm_state2;
    static const sc_lv<8> ap_ST_fsm_state3;
    static const sc_lv<8> ap_ST_fsm_state4;
    static const sc_lv<8> ap_ST_fsm_state5;
    static const sc_lv<8> ap_ST_fsm_state6;
    static const sc_lv<8> ap_ST_fsm_state7;
    static const sc_lv<8> ap_ST_fsm_state8;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<64> ap_const_lv64_FFFFFFFFFFFFFFFF;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln332_fu_230_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_cmpr_chunk_num_0_i_c_blk_n();
    void thread_cmpr_chunk_num_0_i_c_read();
    void thread_data_num_0_i_c1_blk_n();
    void thread_data_num_0_i_c1_read();
    void thread_m_axi_output_V_ARADDR();
    void thread_m_axi_output_V_ARBURST();
    void thread_m_axi_output_V_ARCACHE();
    void thread_m_axi_output_V_ARID();
    void thread_m_axi_output_V_ARLEN();
    void thread_m_axi_output_V_ARLOCK();
    void thread_m_axi_output_V_ARPROT();
    void thread_m_axi_output_V_ARQOS();
    void thread_m_axi_output_V_ARREGION();
    void thread_m_axi_output_V_ARSIZE();
    void thread_m_axi_output_V_ARUSER();
    void thread_m_axi_output_V_ARVALID();
    void thread_m_axi_output_V_AWADDR();
    void thread_m_axi_output_V_AWBURST();
    void thread_m_axi_output_V_AWCACHE();
    void thread_m_axi_output_V_AWID();
    void thread_m_axi_output_V_AWLEN();
    void thread_m_axi_output_V_AWLOCK();
    void thread_m_axi_output_V_AWPROT();
    void thread_m_axi_output_V_AWQOS();
    void thread_m_axi_output_V_AWREGION();
    void thread_m_axi_output_V_AWSIZE();
    void thread_m_axi_output_V_AWUSER();
    void thread_m_axi_output_V_AWVALID();
    void thread_m_axi_output_V_BREADY();
    void thread_m_axi_output_V_RREADY();
    void thread_m_axi_output_V_WDATA();
    void thread_m_axi_output_V_WID();
    void thread_m_axi_output_V_WLAST();
    void thread_m_axi_output_V_WSTRB();
    void thread_m_axi_output_V_WUSER();
    void thread_m_axi_output_V_WVALID();
    void thread_or_ln66_10_fu_296_p2();
    void thread_or_ln66_11_fu_302_p2();
    void thread_or_ln66_12_fu_308_p2();
    void thread_or_ln66_13_fu_314_p2();
    void thread_or_ln66_14_fu_320_p2();
    void thread_or_ln66_1_fu_242_p2();
    void thread_or_ln66_2_fu_248_p2();
    void thread_or_ln66_3_fu_254_p2();
    void thread_or_ln66_4_fu_260_p2();
    void thread_or_ln66_5_fu_266_p2();
    void thread_or_ln66_6_fu_272_p2();
    void thread_or_ln66_7_fu_278_p2();
    void thread_or_ln66_8_fu_284_p2();
    void thread_or_ln66_9_fu_290_p2();
    void thread_or_ln66_fu_236_p2();
    void thread_output_V_blk_n_AW();
    void thread_output_V_blk_n_B();
    void thread_output_V_blk_n_W();
    void thread_output_V_offset_blk_n();
    void thread_output_V_offset_read();
    void thread_tmp_i_i_fu_214_p3();
    void thread_zext_ln332_1_fu_226_p1();
    void thread_zext_ln332_2_fu_326_p1();
    void thread_zext_ln332_fu_222_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
