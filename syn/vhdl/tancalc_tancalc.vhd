-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tancalc_tancalc is
generic (
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of tancalc_tancalc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "tancalc_tancalc,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-fsgd2104-2L-e,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.433000,HLS_SYN_LAT=7209,HLS_SYN_TPT=none,HLS_SYN_MEM=1200,HLS_SYN_DSP=0,HLS_SYN_FF=125052,HLS_SYN_LUT=158199,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_V : STD_LOGIC_VECTOR (63 downto 0);
    signal output_V : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_ARVALID : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RREADY : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem0_RLAST : STD_LOGIC;
    signal gmem0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal gmem0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_AWVALID : STD_LOGIC;
    signal gmem1_AWREADY : STD_LOGIC;
    signal gmem1_WVALID : STD_LOGIC;
    signal gmem1_WREADY : STD_LOGIC;
    signal gmem1_ARREADY : STD_LOGIC;
    signal gmem1_RVALID : STD_LOGIC;
    signal gmem1_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem1_RLAST : STD_LOGIC;
    signal gmem1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BVALID : STD_LOGIC;
    signal gmem1_BREADY : STD_LOGIC;
    signal gmem1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V3_reg_959 : STD_LOGIC_VECTOR (57 downto 0);
    signal input_V1_reg_964 : STD_LOGIC_VECTOR (57 downto 0);
    signal cmpr_chunk_num_fu_332_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal cmpr_chunk_num_reg_973 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln92_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_470_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_reg_1138 : STD_LOGIC_VECTOR (5 downto 0);
    signal cmpr_local_0_V_reg_1143 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_data_read_1_fu_266_ap_ready : STD_LOGIC;
    signal grp_data_read_1_fu_266_ap_done : STD_LOGIC;
    signal cmpr_local_1_V_reg_1148 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmpr_local_2_V_reg_1153 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmpr_local_3_V_reg_1158 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmpr_local_4_V_reg_1163 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmpr_local_5_V_reg_1168 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmpr_local_6_V_reg_1173 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmpr_local_7_V_reg_1178 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmpr_local_8_V_reg_1183 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmpr_local_9_V_reg_1188 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmpr_local_10_V_reg_1193 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmpr_local_11_V_reg_1198 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmpr_local_12_V_reg_1203 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmpr_local_13_V_reg_1208 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmpr_local_14_V_reg_1213 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmpr_local_15_V_reg_1218 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmprpop_local_0_V_reg_1223 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_1_V_reg_1228 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_2_V_reg_1233 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_3_V_reg_1238 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_4_V_reg_1243 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_5_V_reg_1248 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_6_V_reg_1253 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_7_V_reg_1258 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_8_V_reg_1263 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_9_V_reg_1268 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_10_V_reg_1273 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_11_V_reg_1278 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_12_V_reg_1283 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_13_V_reg_1288 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_14_V_reg_1293 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_15_V_reg_1298 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_AWVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_WVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_WLAST : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_RREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_BREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_WVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_WLAST : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_ARVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_RREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_BREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_222_ap_start : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_222_ap_done : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_222_ap_ready : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_222_ap_idle : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_222_ap_continue : STD_LOGIC;
    signal grp_data_read_1_fu_266_ap_start : STD_LOGIC;
    signal grp_data_read_1_fu_266_ap_idle : STD_LOGIC;
    signal grp_data_read_1_fu_266_m_axi_input_V_AWVALID : STD_LOGIC;
    signal grp_data_read_1_fu_266_m_axi_input_V_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_data_read_1_fu_266_m_axi_input_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_data_read_1_fu_266_m_axi_input_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_data_read_1_fu_266_m_axi_input_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_data_read_1_fu_266_m_axi_input_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_data_read_1_fu_266_m_axi_input_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_data_read_1_fu_266_m_axi_input_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_data_read_1_fu_266_m_axi_input_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_data_read_1_fu_266_m_axi_input_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_data_read_1_fu_266_m_axi_input_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_data_read_1_fu_266_m_axi_input_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_data_read_1_fu_266_m_axi_input_V_WVALID : STD_LOGIC;
    signal grp_data_read_1_fu_266_m_axi_input_V_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_data_read_1_fu_266_m_axi_input_V_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_data_read_1_fu_266_m_axi_input_V_WLAST : STD_LOGIC;
    signal grp_data_read_1_fu_266_m_axi_input_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_data_read_1_fu_266_m_axi_input_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_data_read_1_fu_266_m_axi_input_V_ARVALID : STD_LOGIC;
    signal grp_data_read_1_fu_266_m_axi_input_V_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_data_read_1_fu_266_m_axi_input_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_data_read_1_fu_266_m_axi_input_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_data_read_1_fu_266_m_axi_input_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_data_read_1_fu_266_m_axi_input_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_data_read_1_fu_266_m_axi_input_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_data_read_1_fu_266_m_axi_input_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_data_read_1_fu_266_m_axi_input_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_data_read_1_fu_266_m_axi_input_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_data_read_1_fu_266_m_axi_input_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_data_read_1_fu_266_m_axi_input_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_data_read_1_fu_266_m_axi_input_V_RREADY : STD_LOGIC;
    signal grp_data_read_1_fu_266_m_axi_input_V_BREADY : STD_LOGIC;
    signal grp_data_read_1_fu_266_ap_return_0 : STD_LOGIC_VECTOR (1023 downto 0);
    signal grp_data_read_1_fu_266_ap_return_1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal grp_data_read_1_fu_266_ap_return_2 : STD_LOGIC_VECTOR (1023 downto 0);
    signal grp_data_read_1_fu_266_ap_return_3 : STD_LOGIC_VECTOR (1023 downto 0);
    signal grp_data_read_1_fu_266_ap_return_4 : STD_LOGIC_VECTOR (1023 downto 0);
    signal grp_data_read_1_fu_266_ap_return_5 : STD_LOGIC_VECTOR (1023 downto 0);
    signal grp_data_read_1_fu_266_ap_return_6 : STD_LOGIC_VECTOR (1023 downto 0);
    signal grp_data_read_1_fu_266_ap_return_7 : STD_LOGIC_VECTOR (1023 downto 0);
    signal grp_data_read_1_fu_266_ap_return_8 : STD_LOGIC_VECTOR (1023 downto 0);
    signal grp_data_read_1_fu_266_ap_return_9 : STD_LOGIC_VECTOR (1023 downto 0);
    signal grp_data_read_1_fu_266_ap_return_10 : STD_LOGIC_VECTOR (1023 downto 0);
    signal grp_data_read_1_fu_266_ap_return_11 : STD_LOGIC_VECTOR (1023 downto 0);
    signal grp_data_read_1_fu_266_ap_return_12 : STD_LOGIC_VECTOR (1023 downto 0);
    signal grp_data_read_1_fu_266_ap_return_13 : STD_LOGIC_VECTOR (1023 downto 0);
    signal grp_data_read_1_fu_266_ap_return_14 : STD_LOGIC_VECTOR (1023 downto 0);
    signal grp_data_read_1_fu_266_ap_return_15 : STD_LOGIC_VECTOR (1023 downto 0);
    signal grp_data_read_1_fu_266_ap_return_16 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_data_read_1_fu_266_ap_return_17 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_data_read_1_fu_266_ap_return_18 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_data_read_1_fu_266_ap_return_19 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_data_read_1_fu_266_ap_return_20 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_data_read_1_fu_266_ap_return_21 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_data_read_1_fu_266_ap_return_22 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_data_read_1_fu_266_ap_return_23 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_data_read_1_fu_266_ap_return_24 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_data_read_1_fu_266_ap_return_25 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_data_read_1_fu_266_ap_return_26 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_data_read_1_fu_266_ap_return_27 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_data_read_1_fu_266_ap_return_28 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_data_read_1_fu_266_ap_return_29 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_data_read_1_fu_266_ap_return_30 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_data_read_1_fu_266_ap_return_31 : STD_LOGIC_VECTOR (9 downto 0);
    signal cmpr_chunk_num_0_i_reg_210 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_sync_grp_dataflow_parent_loop_proc_fu_222_ap_ready : STD_LOGIC;
    signal ap_sync_grp_dataflow_parent_loop_proc_fu_222_ap_done : STD_LOGIC;
    signal ap_block_state5_on_subcall_done : BOOLEAN;
    signal grp_dataflow_parent_loop_proc_fu_222_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_sync_reg_grp_dataflow_parent_loop_proc_fu_222_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_dataflow_parent_loop_proc_fu_222_ap_done : STD_LOGIC := '0';
    signal grp_data_read_1_fu_266_ap_start_reg : STD_LOGIC := '0';
    signal cmpr_local_0_V_1_fu_70 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmpr_local_1_V_1_fu_74 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmpr_local_2_V_1_fu_78 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmpr_local_3_V_1_fu_82 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmpr_local_4_V_1_fu_86 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmpr_local_5_V_1_fu_90 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmpr_local_6_V_1_fu_94 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmpr_local_7_V_1_fu_98 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmpr_local_8_V_1_fu_102 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmpr_local_9_V_1_fu_106 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmpr_local_10_V_1_fu_110 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmpr_local_11_V_1_fu_114 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmpr_local_12_V_1_fu_118 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmpr_local_13_V_1_fu_122 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmpr_local_14_V_1_fu_126 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmpr_local_15_V_1_fu_130 : STD_LOGIC_VECTOR (1023 downto 0);
    signal cmprpop_local_0_V_1_fu_134 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_1_V_1_fu_138 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_2_V_1_fu_142 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_3_V_1_fu_146 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_4_V_1_fu_150 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_5_V_1_fu_154 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_6_V_1_fu_158 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_7_V_1_fu_162 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_8_V_1_fu_166 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_9_V_1_fu_170 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_10_V_1_fu_174 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_11_V_1_fu_178 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_12_V_1_fu_182 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_13_V_1_fu_186 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_14_V_1_fu_190 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmprpop_local_15_V_1_fu_194 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln93_fu_466_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component tancalc_dataflow_parent_loop_proc IS
    port (
        m_axi_input_V_AWVALID : OUT STD_LOGIC;
        m_axi_input_V_AWREADY : IN STD_LOGIC;
        m_axi_input_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_input_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_WVALID : OUT STD_LOGIC;
        m_axi_input_V_WREADY : IN STD_LOGIC;
        m_axi_input_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_input_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_input_V_WLAST : OUT STD_LOGIC;
        m_axi_input_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_ARVALID : OUT STD_LOGIC;
        m_axi_input_V_ARREADY : IN STD_LOGIC;
        m_axi_input_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_input_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_RVALID : IN STD_LOGIC;
        m_axi_input_V_RREADY : OUT STD_LOGIC;
        m_axi_input_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_input_V_RLAST : IN STD_LOGIC;
        m_axi_input_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_BVALID : IN STD_LOGIC;
        m_axi_input_V_BREADY : OUT STD_LOGIC;
        m_axi_input_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
        p_read : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read15 : IN STD_LOGIC_VECTOR (1023 downto 0);
        p_read16 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read17 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read18 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read19 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read20 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read21 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read22 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read23 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read24 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read25 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read26 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read27 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read28 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read29 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read30 : IN STD_LOGIC_VECTOR (10 downto 0);
        p_read31 : IN STD_LOGIC_VECTOR (9 downto 0);
        m_axi_output_V_AWVALID : OUT STD_LOGIC;
        m_axi_output_V_AWREADY : IN STD_LOGIC;
        m_axi_output_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_output_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_V_WVALID : OUT STD_LOGIC;
        m_axi_output_V_WREADY : IN STD_LOGIC;
        m_axi_output_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_output_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_output_V_WLAST : OUT STD_LOGIC;
        m_axi_output_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_V_ARVALID : OUT STD_LOGIC;
        m_axi_output_V_ARREADY : IN STD_LOGIC;
        m_axi_output_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_output_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_V_RVALID : IN STD_LOGIC;
        m_axi_output_V_RREADY : OUT STD_LOGIC;
        m_axi_output_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_output_V_RLAST : IN STD_LOGIC;
        m_axi_output_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_V_BVALID : IN STD_LOGIC;
        m_axi_output_V_BREADY : OUT STD_LOGIC;
        m_axi_output_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        output_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
        cmpr_chunk_num_0_i : IN STD_LOGIC_VECTOR (2 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        input_V_offset_ap_vld : IN STD_LOGIC;
        p_read_ap_vld : IN STD_LOGIC;
        p_read1_ap_vld : IN STD_LOGIC;
        p_read2_ap_vld : IN STD_LOGIC;
        p_read3_ap_vld : IN STD_LOGIC;
        p_read4_ap_vld : IN STD_LOGIC;
        p_read5_ap_vld : IN STD_LOGIC;
        p_read6_ap_vld : IN STD_LOGIC;
        p_read7_ap_vld : IN STD_LOGIC;
        p_read8_ap_vld : IN STD_LOGIC;
        p_read9_ap_vld : IN STD_LOGIC;
        p_read10_ap_vld : IN STD_LOGIC;
        p_read11_ap_vld : IN STD_LOGIC;
        p_read12_ap_vld : IN STD_LOGIC;
        p_read13_ap_vld : IN STD_LOGIC;
        p_read14_ap_vld : IN STD_LOGIC;
        p_read15_ap_vld : IN STD_LOGIC;
        p_read16_ap_vld : IN STD_LOGIC;
        p_read17_ap_vld : IN STD_LOGIC;
        p_read18_ap_vld : IN STD_LOGIC;
        p_read19_ap_vld : IN STD_LOGIC;
        p_read20_ap_vld : IN STD_LOGIC;
        p_read21_ap_vld : IN STD_LOGIC;
        p_read22_ap_vld : IN STD_LOGIC;
        p_read23_ap_vld : IN STD_LOGIC;
        p_read24_ap_vld : IN STD_LOGIC;
        p_read25_ap_vld : IN STD_LOGIC;
        p_read26_ap_vld : IN STD_LOGIC;
        p_read27_ap_vld : IN STD_LOGIC;
        p_read28_ap_vld : IN STD_LOGIC;
        p_read29_ap_vld : IN STD_LOGIC;
        p_read30_ap_vld : IN STD_LOGIC;
        p_read31_ap_vld : IN STD_LOGIC;
        output_V_offset_ap_vld : IN STD_LOGIC;
        cmpr_chunk_num_0_i_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component tancalc_data_read_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_input_V_AWVALID : OUT STD_LOGIC;
        m_axi_input_V_AWREADY : IN STD_LOGIC;
        m_axi_input_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_input_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_WVALID : OUT STD_LOGIC;
        m_axi_input_V_WREADY : IN STD_LOGIC;
        m_axi_input_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_input_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_input_V_WLAST : OUT STD_LOGIC;
        m_axi_input_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_ARVALID : OUT STD_LOGIC;
        m_axi_input_V_ARREADY : IN STD_LOGIC;
        m_axi_input_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_input_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_RVALID : IN STD_LOGIC;
        m_axi_input_V_RREADY : OUT STD_LOGIC;
        m_axi_input_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_input_V_RLAST : IN STD_LOGIC;
        m_axi_input_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_BVALID : IN STD_LOGIC;
        m_axi_input_V_BREADY : OUT STD_LOGIC;
        m_axi_input_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
        data_local_0_V_read : IN STD_LOGIC_VECTOR (1023 downto 0);
        data_local_1_V_read : IN STD_LOGIC_VECTOR (1023 downto 0);
        data_local_2_V_read : IN STD_LOGIC_VECTOR (1023 downto 0);
        data_local_3_V_read : IN STD_LOGIC_VECTOR (1023 downto 0);
        data_local_4_V_read : IN STD_LOGIC_VECTOR (1023 downto 0);
        data_local_5_V_read : IN STD_LOGIC_VECTOR (1023 downto 0);
        data_local_6_V_read : IN STD_LOGIC_VECTOR (1023 downto 0);
        data_local_7_V_read : IN STD_LOGIC_VECTOR (1023 downto 0);
        data_local_8_V_read : IN STD_LOGIC_VECTOR (1023 downto 0);
        data_local_9_V_read : IN STD_LOGIC_VECTOR (1023 downto 0);
        data_local_10_V_read : IN STD_LOGIC_VECTOR (1023 downto 0);
        data_local_11_V_read : IN STD_LOGIC_VECTOR (1023 downto 0);
        data_local_12_V_read : IN STD_LOGIC_VECTOR (1023 downto 0);
        data_local_13_V_read : IN STD_LOGIC_VECTOR (1023 downto 0);
        data_local_14_V_read : IN STD_LOGIC_VECTOR (1023 downto 0);
        data_local_15_V_read : IN STD_LOGIC_VECTOR (1023 downto 0);
        datapop_local_0_V_read : IN STD_LOGIC_VECTOR (10 downto 0);
        datapop_local_1_V_read : IN STD_LOGIC_VECTOR (10 downto 0);
        datapop_local_2_V_read : IN STD_LOGIC_VECTOR (10 downto 0);
        datapop_local_3_V_read : IN STD_LOGIC_VECTOR (10 downto 0);
        datapop_local_4_V_read : IN STD_LOGIC_VECTOR (10 downto 0);
        datapop_local_5_V_read : IN STD_LOGIC_VECTOR (10 downto 0);
        datapop_local_6_V_read : IN STD_LOGIC_VECTOR (10 downto 0);
        datapop_local_7_V_read : IN STD_LOGIC_VECTOR (10 downto 0);
        datapop_local_8_V_read : IN STD_LOGIC_VECTOR (10 downto 0);
        datapop_local_9_V_read : IN STD_LOGIC_VECTOR (10 downto 0);
        datapop_local_10_V_read : IN STD_LOGIC_VECTOR (10 downto 0);
        datapop_local_11_V_read : IN STD_LOGIC_VECTOR (10 downto 0);
        datapop_local_12_V_read : IN STD_LOGIC_VECTOR (10 downto 0);
        datapop_local_13_V_read : IN STD_LOGIC_VECTOR (10 downto 0);
        datapop_local_14_V_read : IN STD_LOGIC_VECTOR (10 downto 0);
        datapop_local_15_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
        chunk_num : IN STD_LOGIC_VECTOR (5 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (1023 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (1023 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (1023 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (1023 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (1023 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (1023 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (1023 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (1023 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (1023 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (1023 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (1023 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (1023 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (1023 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (1023 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (1023 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (1023 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (10 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (10 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (10 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (10 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (10 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (10 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (10 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (10 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (10 downto 0);
        ap_return_25 : OUT STD_LOGIC_VECTOR (10 downto 0);
        ap_return_26 : OUT STD_LOGIC_VECTOR (10 downto 0);
        ap_return_27 : OUT STD_LOGIC_VECTOR (10 downto 0);
        ap_return_28 : OUT STD_LOGIC_VECTOR (10 downto 0);
        ap_return_29 : OUT STD_LOGIC_VECTOR (10 downto 0);
        ap_return_30 : OUT STD_LOGIC_VECTOR (10 downto 0);
        ap_return_31 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component tancalc_tancalc_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        input_V : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_V : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component tancalc_tancalc_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component tancalc_tancalc_gmem1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    tancalc_control_s_axi_U : component tancalc_tancalc_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        input_V => input_V,
        output_V => output_V);

    tancalc_gmem0_m_axi_U : component tancalc_tancalc_gmem0_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 512,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem0_ARVALID,
        I_ARREADY => gmem0_ARREADY,
        I_ARADDR => gmem0_ARADDR,
        I_ARID => gmem0_ARID,
        I_ARLEN => gmem0_ARLEN,
        I_ARSIZE => gmem0_ARSIZE,
        I_ARLOCK => gmem0_ARLOCK,
        I_ARCACHE => gmem0_ARCACHE,
        I_ARQOS => gmem0_ARQOS,
        I_ARPROT => gmem0_ARPROT,
        I_ARUSER => gmem0_ARUSER,
        I_ARBURST => gmem0_ARBURST,
        I_ARREGION => gmem0_ARREGION,
        I_RVALID => gmem0_RVALID,
        I_RREADY => gmem0_RREADY,
        I_RDATA => gmem0_RDATA,
        I_RID => gmem0_RID,
        I_RUSER => gmem0_RUSER,
        I_RRESP => gmem0_RRESP,
        I_RLAST => gmem0_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem0_WREADY,
        I_WDATA => ap_const_lv512_lc_1,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv64_0,
        I_BVALID => gmem0_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem0_BRESP,
        I_BID => gmem0_BID,
        I_BUSER => gmem0_BUSER);

    tancalc_gmem1_m_axi_U : component tancalc_tancalc_gmem1_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 512,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem1_AWVALID,
        AWREADY => m_axi_gmem1_AWREADY,
        AWADDR => m_axi_gmem1_AWADDR,
        AWID => m_axi_gmem1_AWID,
        AWLEN => m_axi_gmem1_AWLEN,
        AWSIZE => m_axi_gmem1_AWSIZE,
        AWBURST => m_axi_gmem1_AWBURST,
        AWLOCK => m_axi_gmem1_AWLOCK,
        AWCACHE => m_axi_gmem1_AWCACHE,
        AWPROT => m_axi_gmem1_AWPROT,
        AWQOS => m_axi_gmem1_AWQOS,
        AWREGION => m_axi_gmem1_AWREGION,
        AWUSER => m_axi_gmem1_AWUSER,
        WVALID => m_axi_gmem1_WVALID,
        WREADY => m_axi_gmem1_WREADY,
        WDATA => m_axi_gmem1_WDATA,
        WSTRB => m_axi_gmem1_WSTRB,
        WLAST => m_axi_gmem1_WLAST,
        WID => m_axi_gmem1_WID,
        WUSER => m_axi_gmem1_WUSER,
        ARVALID => m_axi_gmem1_ARVALID,
        ARREADY => m_axi_gmem1_ARREADY,
        ARADDR => m_axi_gmem1_ARADDR,
        ARID => m_axi_gmem1_ARID,
        ARLEN => m_axi_gmem1_ARLEN,
        ARSIZE => m_axi_gmem1_ARSIZE,
        ARBURST => m_axi_gmem1_ARBURST,
        ARLOCK => m_axi_gmem1_ARLOCK,
        ARCACHE => m_axi_gmem1_ARCACHE,
        ARPROT => m_axi_gmem1_ARPROT,
        ARQOS => m_axi_gmem1_ARQOS,
        ARREGION => m_axi_gmem1_ARREGION,
        ARUSER => m_axi_gmem1_ARUSER,
        RVALID => m_axi_gmem1_RVALID,
        RREADY => m_axi_gmem1_RREADY,
        RDATA => m_axi_gmem1_RDATA,
        RLAST => m_axi_gmem1_RLAST,
        RID => m_axi_gmem1_RID,
        RUSER => m_axi_gmem1_RUSER,
        RRESP => m_axi_gmem1_RRESP,
        BVALID => m_axi_gmem1_BVALID,
        BREADY => m_axi_gmem1_BREADY,
        BRESP => m_axi_gmem1_BRESP,
        BID => m_axi_gmem1_BID,
        BUSER => m_axi_gmem1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem1_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem1_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem1_RDATA,
        I_RID => gmem1_RID,
        I_RUSER => gmem1_RUSER,
        I_RRESP => gmem1_RRESP,
        I_RLAST => gmem1_RLAST,
        I_AWVALID => gmem1_AWVALID,
        I_AWREADY => gmem1_AWREADY,
        I_AWADDR => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWADDR,
        I_AWID => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWID,
        I_AWLEN => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWLEN,
        I_AWSIZE => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWSIZE,
        I_AWLOCK => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWLOCK,
        I_AWCACHE => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWCACHE,
        I_AWQOS => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWQOS,
        I_AWPROT => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWPROT,
        I_AWUSER => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWUSER,
        I_AWBURST => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWBURST,
        I_AWREGION => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWREGION,
        I_WVALID => gmem1_WVALID,
        I_WREADY => gmem1_WREADY,
        I_WDATA => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_WDATA,
        I_WID => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_WID,
        I_WUSER => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_WUSER,
        I_WLAST => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_WLAST,
        I_WSTRB => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_WSTRB,
        I_BVALID => gmem1_BVALID,
        I_BREADY => gmem1_BREADY,
        I_BRESP => gmem1_BRESP,
        I_BID => gmem1_BID,
        I_BUSER => gmem1_BUSER);

    grp_dataflow_parent_loop_proc_fu_222 : component tancalc_dataflow_parent_loop_proc
    port map (
        m_axi_input_V_AWVALID => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_AWVALID,
        m_axi_input_V_AWREADY => ap_const_logic_0,
        m_axi_input_V_AWADDR => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_AWADDR,
        m_axi_input_V_AWID => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_AWID,
        m_axi_input_V_AWLEN => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_AWLEN,
        m_axi_input_V_AWSIZE => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_AWSIZE,
        m_axi_input_V_AWBURST => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_AWBURST,
        m_axi_input_V_AWLOCK => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_AWLOCK,
        m_axi_input_V_AWCACHE => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_AWCACHE,
        m_axi_input_V_AWPROT => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_AWPROT,
        m_axi_input_V_AWQOS => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_AWQOS,
        m_axi_input_V_AWREGION => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_AWREGION,
        m_axi_input_V_AWUSER => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_AWUSER,
        m_axi_input_V_WVALID => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_WVALID,
        m_axi_input_V_WREADY => ap_const_logic_0,
        m_axi_input_V_WDATA => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_WDATA,
        m_axi_input_V_WSTRB => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_WSTRB,
        m_axi_input_V_WLAST => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_WLAST,
        m_axi_input_V_WID => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_WID,
        m_axi_input_V_WUSER => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_WUSER,
        m_axi_input_V_ARVALID => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARVALID,
        m_axi_input_V_ARREADY => gmem0_ARREADY,
        m_axi_input_V_ARADDR => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARADDR,
        m_axi_input_V_ARID => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARID,
        m_axi_input_V_ARLEN => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARLEN,
        m_axi_input_V_ARSIZE => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARSIZE,
        m_axi_input_V_ARBURST => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARBURST,
        m_axi_input_V_ARLOCK => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARLOCK,
        m_axi_input_V_ARCACHE => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARCACHE,
        m_axi_input_V_ARPROT => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARPROT,
        m_axi_input_V_ARQOS => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARQOS,
        m_axi_input_V_ARREGION => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARREGION,
        m_axi_input_V_ARUSER => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARUSER,
        m_axi_input_V_RVALID => gmem0_RVALID,
        m_axi_input_V_RREADY => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_RREADY,
        m_axi_input_V_RDATA => gmem0_RDATA,
        m_axi_input_V_RLAST => gmem0_RLAST,
        m_axi_input_V_RID => gmem0_RID,
        m_axi_input_V_RUSER => gmem0_RUSER,
        m_axi_input_V_RRESP => gmem0_RRESP,
        m_axi_input_V_BVALID => ap_const_logic_0,
        m_axi_input_V_BREADY => grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_BREADY,
        m_axi_input_V_BRESP => ap_const_lv2_0,
        m_axi_input_V_BID => ap_const_lv1_0,
        m_axi_input_V_BUSER => ap_const_lv1_0,
        input_V_offset => input_V1_reg_964,
        p_read => cmpr_local_0_V_reg_1143,
        p_read1 => cmpr_local_1_V_reg_1148,
        p_read2 => cmpr_local_2_V_reg_1153,
        p_read3 => cmpr_local_3_V_reg_1158,
        p_read4 => cmpr_local_4_V_reg_1163,
        p_read5 => cmpr_local_5_V_reg_1168,
        p_read6 => cmpr_local_6_V_reg_1173,
        p_read7 => cmpr_local_7_V_reg_1178,
        p_read8 => cmpr_local_8_V_reg_1183,
        p_read9 => cmpr_local_9_V_reg_1188,
        p_read10 => cmpr_local_10_V_reg_1193,
        p_read11 => cmpr_local_11_V_reg_1198,
        p_read12 => cmpr_local_12_V_reg_1203,
        p_read13 => cmpr_local_13_V_reg_1208,
        p_read14 => cmpr_local_14_V_reg_1213,
        p_read15 => cmpr_local_15_V_reg_1218,
        p_read16 => cmprpop_local_0_V_reg_1223,
        p_read17 => cmprpop_local_1_V_reg_1228,
        p_read18 => cmprpop_local_2_V_reg_1233,
        p_read19 => cmprpop_local_3_V_reg_1238,
        p_read20 => cmprpop_local_4_V_reg_1243,
        p_read21 => cmprpop_local_5_V_reg_1248,
        p_read22 => cmprpop_local_6_V_reg_1253,
        p_read23 => cmprpop_local_7_V_reg_1258,
        p_read24 => cmprpop_local_8_V_reg_1263,
        p_read25 => cmprpop_local_9_V_reg_1268,
        p_read26 => cmprpop_local_10_V_reg_1273,
        p_read27 => cmprpop_local_11_V_reg_1278,
        p_read28 => cmprpop_local_12_V_reg_1283,
        p_read29 => cmprpop_local_13_V_reg_1288,
        p_read30 => cmprpop_local_14_V_reg_1293,
        p_read31 => cmprpop_local_15_V_reg_1298,
        m_axi_output_V_AWVALID => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWVALID,
        m_axi_output_V_AWREADY => gmem1_AWREADY,
        m_axi_output_V_AWADDR => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWADDR,
        m_axi_output_V_AWID => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWID,
        m_axi_output_V_AWLEN => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWLEN,
        m_axi_output_V_AWSIZE => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWSIZE,
        m_axi_output_V_AWBURST => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWBURST,
        m_axi_output_V_AWLOCK => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWLOCK,
        m_axi_output_V_AWCACHE => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWCACHE,
        m_axi_output_V_AWPROT => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWPROT,
        m_axi_output_V_AWQOS => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWQOS,
        m_axi_output_V_AWREGION => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWREGION,
        m_axi_output_V_AWUSER => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWUSER,
        m_axi_output_V_WVALID => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_WVALID,
        m_axi_output_V_WREADY => gmem1_WREADY,
        m_axi_output_V_WDATA => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_WDATA,
        m_axi_output_V_WSTRB => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_WSTRB,
        m_axi_output_V_WLAST => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_WLAST,
        m_axi_output_V_WID => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_WID,
        m_axi_output_V_WUSER => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_WUSER,
        m_axi_output_V_ARVALID => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_ARVALID,
        m_axi_output_V_ARREADY => ap_const_logic_0,
        m_axi_output_V_ARADDR => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_ARADDR,
        m_axi_output_V_ARID => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_ARID,
        m_axi_output_V_ARLEN => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_ARLEN,
        m_axi_output_V_ARSIZE => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_ARSIZE,
        m_axi_output_V_ARBURST => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_ARBURST,
        m_axi_output_V_ARLOCK => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_ARLOCK,
        m_axi_output_V_ARCACHE => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_ARCACHE,
        m_axi_output_V_ARPROT => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_ARPROT,
        m_axi_output_V_ARQOS => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_ARQOS,
        m_axi_output_V_ARREGION => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_ARREGION,
        m_axi_output_V_ARUSER => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_ARUSER,
        m_axi_output_V_RVALID => ap_const_logic_0,
        m_axi_output_V_RREADY => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_RREADY,
        m_axi_output_V_RDATA => ap_const_lv512_lc_1,
        m_axi_output_V_RLAST => ap_const_logic_0,
        m_axi_output_V_RID => ap_const_lv1_0,
        m_axi_output_V_RUSER => ap_const_lv1_0,
        m_axi_output_V_RRESP => ap_const_lv2_0,
        m_axi_output_V_BVALID => gmem1_BVALID,
        m_axi_output_V_BREADY => grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_BREADY,
        m_axi_output_V_BRESP => gmem1_BRESP,
        m_axi_output_V_BID => gmem1_BID,
        m_axi_output_V_BUSER => gmem1_BUSER,
        output_V_offset => output_V3_reg_959,
        cmpr_chunk_num_0_i => cmpr_chunk_num_0_i_reg_210,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        input_V_offset_ap_vld => ap_const_logic_1,
        p_read_ap_vld => ap_const_logic_1,
        p_read1_ap_vld => ap_const_logic_1,
        p_read2_ap_vld => ap_const_logic_1,
        p_read3_ap_vld => ap_const_logic_1,
        p_read4_ap_vld => ap_const_logic_1,
        p_read5_ap_vld => ap_const_logic_1,
        p_read6_ap_vld => ap_const_logic_1,
        p_read7_ap_vld => ap_const_logic_1,
        p_read8_ap_vld => ap_const_logic_1,
        p_read9_ap_vld => ap_const_logic_1,
        p_read10_ap_vld => ap_const_logic_1,
        p_read11_ap_vld => ap_const_logic_1,
        p_read12_ap_vld => ap_const_logic_1,
        p_read13_ap_vld => ap_const_logic_1,
        p_read14_ap_vld => ap_const_logic_1,
        p_read15_ap_vld => ap_const_logic_1,
        p_read16_ap_vld => ap_const_logic_1,
        p_read17_ap_vld => ap_const_logic_1,
        p_read18_ap_vld => ap_const_logic_1,
        p_read19_ap_vld => ap_const_logic_1,
        p_read20_ap_vld => ap_const_logic_1,
        p_read21_ap_vld => ap_const_logic_1,
        p_read22_ap_vld => ap_const_logic_1,
        p_read23_ap_vld => ap_const_logic_1,
        p_read24_ap_vld => ap_const_logic_1,
        p_read25_ap_vld => ap_const_logic_1,
        p_read26_ap_vld => ap_const_logic_1,
        p_read27_ap_vld => ap_const_logic_1,
        p_read28_ap_vld => ap_const_logic_1,
        p_read29_ap_vld => ap_const_logic_1,
        p_read30_ap_vld => ap_const_logic_1,
        p_read31_ap_vld => ap_const_logic_1,
        output_V_offset_ap_vld => ap_const_logic_1,
        cmpr_chunk_num_0_i_ap_vld => ap_const_logic_1,
        ap_start => grp_dataflow_parent_loop_proc_fu_222_ap_start,
        ap_done => grp_dataflow_parent_loop_proc_fu_222_ap_done,
        ap_ready => grp_dataflow_parent_loop_proc_fu_222_ap_ready,
        ap_idle => grp_dataflow_parent_loop_proc_fu_222_ap_idle,
        ap_continue => grp_dataflow_parent_loop_proc_fu_222_ap_continue);

    grp_data_read_1_fu_266 : component tancalc_data_read_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_data_read_1_fu_266_ap_start,
        ap_done => grp_data_read_1_fu_266_ap_done,
        ap_idle => grp_data_read_1_fu_266_ap_idle,
        ap_ready => grp_data_read_1_fu_266_ap_ready,
        m_axi_input_V_AWVALID => grp_data_read_1_fu_266_m_axi_input_V_AWVALID,
        m_axi_input_V_AWREADY => ap_const_logic_0,
        m_axi_input_V_AWADDR => grp_data_read_1_fu_266_m_axi_input_V_AWADDR,
        m_axi_input_V_AWID => grp_data_read_1_fu_266_m_axi_input_V_AWID,
        m_axi_input_V_AWLEN => grp_data_read_1_fu_266_m_axi_input_V_AWLEN,
        m_axi_input_V_AWSIZE => grp_data_read_1_fu_266_m_axi_input_V_AWSIZE,
        m_axi_input_V_AWBURST => grp_data_read_1_fu_266_m_axi_input_V_AWBURST,
        m_axi_input_V_AWLOCK => grp_data_read_1_fu_266_m_axi_input_V_AWLOCK,
        m_axi_input_V_AWCACHE => grp_data_read_1_fu_266_m_axi_input_V_AWCACHE,
        m_axi_input_V_AWPROT => grp_data_read_1_fu_266_m_axi_input_V_AWPROT,
        m_axi_input_V_AWQOS => grp_data_read_1_fu_266_m_axi_input_V_AWQOS,
        m_axi_input_V_AWREGION => grp_data_read_1_fu_266_m_axi_input_V_AWREGION,
        m_axi_input_V_AWUSER => grp_data_read_1_fu_266_m_axi_input_V_AWUSER,
        m_axi_input_V_WVALID => grp_data_read_1_fu_266_m_axi_input_V_WVALID,
        m_axi_input_V_WREADY => ap_const_logic_0,
        m_axi_input_V_WDATA => grp_data_read_1_fu_266_m_axi_input_V_WDATA,
        m_axi_input_V_WSTRB => grp_data_read_1_fu_266_m_axi_input_V_WSTRB,
        m_axi_input_V_WLAST => grp_data_read_1_fu_266_m_axi_input_V_WLAST,
        m_axi_input_V_WID => grp_data_read_1_fu_266_m_axi_input_V_WID,
        m_axi_input_V_WUSER => grp_data_read_1_fu_266_m_axi_input_V_WUSER,
        m_axi_input_V_ARVALID => grp_data_read_1_fu_266_m_axi_input_V_ARVALID,
        m_axi_input_V_ARREADY => gmem0_ARREADY,
        m_axi_input_V_ARADDR => grp_data_read_1_fu_266_m_axi_input_V_ARADDR,
        m_axi_input_V_ARID => grp_data_read_1_fu_266_m_axi_input_V_ARID,
        m_axi_input_V_ARLEN => grp_data_read_1_fu_266_m_axi_input_V_ARLEN,
        m_axi_input_V_ARSIZE => grp_data_read_1_fu_266_m_axi_input_V_ARSIZE,
        m_axi_input_V_ARBURST => grp_data_read_1_fu_266_m_axi_input_V_ARBURST,
        m_axi_input_V_ARLOCK => grp_data_read_1_fu_266_m_axi_input_V_ARLOCK,
        m_axi_input_V_ARCACHE => grp_data_read_1_fu_266_m_axi_input_V_ARCACHE,
        m_axi_input_V_ARPROT => grp_data_read_1_fu_266_m_axi_input_V_ARPROT,
        m_axi_input_V_ARQOS => grp_data_read_1_fu_266_m_axi_input_V_ARQOS,
        m_axi_input_V_ARREGION => grp_data_read_1_fu_266_m_axi_input_V_ARREGION,
        m_axi_input_V_ARUSER => grp_data_read_1_fu_266_m_axi_input_V_ARUSER,
        m_axi_input_V_RVALID => gmem0_RVALID,
        m_axi_input_V_RREADY => grp_data_read_1_fu_266_m_axi_input_V_RREADY,
        m_axi_input_V_RDATA => gmem0_RDATA,
        m_axi_input_V_RLAST => gmem0_RLAST,
        m_axi_input_V_RID => gmem0_RID,
        m_axi_input_V_RUSER => gmem0_RUSER,
        m_axi_input_V_RRESP => gmem0_RRESP,
        m_axi_input_V_BVALID => ap_const_logic_0,
        m_axi_input_V_BREADY => grp_data_read_1_fu_266_m_axi_input_V_BREADY,
        m_axi_input_V_BRESP => ap_const_lv2_0,
        m_axi_input_V_BID => ap_const_lv1_0,
        m_axi_input_V_BUSER => ap_const_lv1_0,
        input_V_offset => input_V1_reg_964,
        data_local_0_V_read => cmpr_local_0_V_1_fu_70,
        data_local_1_V_read => cmpr_local_1_V_1_fu_74,
        data_local_2_V_read => cmpr_local_2_V_1_fu_78,
        data_local_3_V_read => cmpr_local_3_V_1_fu_82,
        data_local_4_V_read => cmpr_local_4_V_1_fu_86,
        data_local_5_V_read => cmpr_local_5_V_1_fu_90,
        data_local_6_V_read => cmpr_local_6_V_1_fu_94,
        data_local_7_V_read => cmpr_local_7_V_1_fu_98,
        data_local_8_V_read => cmpr_local_8_V_1_fu_102,
        data_local_9_V_read => cmpr_local_9_V_1_fu_106,
        data_local_10_V_read => cmpr_local_10_V_1_fu_110,
        data_local_11_V_read => cmpr_local_11_V_1_fu_114,
        data_local_12_V_read => cmpr_local_12_V_1_fu_118,
        data_local_13_V_read => cmpr_local_13_V_1_fu_122,
        data_local_14_V_read => cmpr_local_14_V_1_fu_126,
        data_local_15_V_read => cmpr_local_15_V_1_fu_130,
        datapop_local_0_V_read => cmprpop_local_0_V_1_fu_134,
        datapop_local_1_V_read => cmprpop_local_1_V_1_fu_138,
        datapop_local_2_V_read => cmprpop_local_2_V_1_fu_142,
        datapop_local_3_V_read => cmprpop_local_3_V_1_fu_146,
        datapop_local_4_V_read => cmprpop_local_4_V_1_fu_150,
        datapop_local_5_V_read => cmprpop_local_5_V_1_fu_154,
        datapop_local_6_V_read => cmprpop_local_6_V_1_fu_158,
        datapop_local_7_V_read => cmprpop_local_7_V_1_fu_162,
        datapop_local_8_V_read => cmprpop_local_8_V_1_fu_166,
        datapop_local_9_V_read => cmprpop_local_9_V_1_fu_170,
        datapop_local_10_V_read => cmprpop_local_10_V_1_fu_174,
        datapop_local_11_V_read => cmprpop_local_11_V_1_fu_178,
        datapop_local_12_V_read => cmprpop_local_12_V_1_fu_182,
        datapop_local_13_V_read => cmprpop_local_13_V_1_fu_186,
        datapop_local_14_V_read => cmprpop_local_14_V_1_fu_190,
        datapop_local_15_V_read => cmprpop_local_15_V_1_fu_194,
        chunk_num => shl_ln_reg_1138,
        ap_return_0 => grp_data_read_1_fu_266_ap_return_0,
        ap_return_1 => grp_data_read_1_fu_266_ap_return_1,
        ap_return_2 => grp_data_read_1_fu_266_ap_return_2,
        ap_return_3 => grp_data_read_1_fu_266_ap_return_3,
        ap_return_4 => grp_data_read_1_fu_266_ap_return_4,
        ap_return_5 => grp_data_read_1_fu_266_ap_return_5,
        ap_return_6 => grp_data_read_1_fu_266_ap_return_6,
        ap_return_7 => grp_data_read_1_fu_266_ap_return_7,
        ap_return_8 => grp_data_read_1_fu_266_ap_return_8,
        ap_return_9 => grp_data_read_1_fu_266_ap_return_9,
        ap_return_10 => grp_data_read_1_fu_266_ap_return_10,
        ap_return_11 => grp_data_read_1_fu_266_ap_return_11,
        ap_return_12 => grp_data_read_1_fu_266_ap_return_12,
        ap_return_13 => grp_data_read_1_fu_266_ap_return_13,
        ap_return_14 => grp_data_read_1_fu_266_ap_return_14,
        ap_return_15 => grp_data_read_1_fu_266_ap_return_15,
        ap_return_16 => grp_data_read_1_fu_266_ap_return_16,
        ap_return_17 => grp_data_read_1_fu_266_ap_return_17,
        ap_return_18 => grp_data_read_1_fu_266_ap_return_18,
        ap_return_19 => grp_data_read_1_fu_266_ap_return_19,
        ap_return_20 => grp_data_read_1_fu_266_ap_return_20,
        ap_return_21 => grp_data_read_1_fu_266_ap_return_21,
        ap_return_22 => grp_data_read_1_fu_266_ap_return_22,
        ap_return_23 => grp_data_read_1_fu_266_ap_return_23,
        ap_return_24 => grp_data_read_1_fu_266_ap_return_24,
        ap_return_25 => grp_data_read_1_fu_266_ap_return_25,
        ap_return_26 => grp_data_read_1_fu_266_ap_return_26,
        ap_return_27 => grp_data_read_1_fu_266_ap_return_27,
        ap_return_28 => grp_data_read_1_fu_266_ap_return_28,
        ap_return_29 => grp_data_read_1_fu_266_ap_return_29,
        ap_return_30 => grp_data_read_1_fu_266_ap_return_30,
        ap_return_31 => grp_data_read_1_fu_266_ap_return_31);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_222_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_proc_fu_222_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_222_ap_done <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_proc_fu_222_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_222_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_222_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_proc_fu_222_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_222_ap_ready <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_proc_fu_222_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_222_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_data_read_1_fu_266_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_data_read_1_fu_266_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln92_fu_326_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_data_read_1_fu_266_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_data_read_1_fu_266_ap_ready = ap_const_logic_1)) then 
                    grp_data_read_1_fu_266_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_dataflow_parent_loop_proc_fu_222_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_dataflow_parent_loop_proc_fu_222_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_sync_grp_dataflow_parent_loop_proc_fu_222_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
                    grp_dataflow_parent_loop_proc_fu_222_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dataflow_parent_loop_proc_fu_222_ap_ready = ap_const_logic_1)) then 
                    grp_dataflow_parent_loop_proc_fu_222_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    cmpr_chunk_num_0_i_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                cmpr_chunk_num_0_i_reg_210 <= cmpr_chunk_num_reg_973;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                cmpr_chunk_num_0_i_reg_210 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                cmpr_chunk_num_reg_973 <= cmpr_chunk_num_fu_332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_data_read_1_fu_266_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                cmpr_local_0_V_1_fu_70 <= grp_data_read_1_fu_266_ap_return_0;
                cmpr_local_0_V_reg_1143 <= grp_data_read_1_fu_266_ap_return_0;
                cmpr_local_10_V_1_fu_110 <= grp_data_read_1_fu_266_ap_return_10;
                cmpr_local_10_V_reg_1193 <= grp_data_read_1_fu_266_ap_return_10;
                cmpr_local_11_V_1_fu_114 <= grp_data_read_1_fu_266_ap_return_11;
                cmpr_local_11_V_reg_1198 <= grp_data_read_1_fu_266_ap_return_11;
                cmpr_local_12_V_1_fu_118 <= grp_data_read_1_fu_266_ap_return_12;
                cmpr_local_12_V_reg_1203 <= grp_data_read_1_fu_266_ap_return_12;
                cmpr_local_13_V_1_fu_122 <= grp_data_read_1_fu_266_ap_return_13;
                cmpr_local_13_V_reg_1208 <= grp_data_read_1_fu_266_ap_return_13;
                cmpr_local_14_V_1_fu_126 <= grp_data_read_1_fu_266_ap_return_14;
                cmpr_local_14_V_reg_1213 <= grp_data_read_1_fu_266_ap_return_14;
                cmpr_local_15_V_1_fu_130 <= grp_data_read_1_fu_266_ap_return_15;
                cmpr_local_15_V_reg_1218 <= grp_data_read_1_fu_266_ap_return_15;
                cmpr_local_1_V_1_fu_74 <= grp_data_read_1_fu_266_ap_return_1;
                cmpr_local_1_V_reg_1148 <= grp_data_read_1_fu_266_ap_return_1;
                cmpr_local_2_V_1_fu_78 <= grp_data_read_1_fu_266_ap_return_2;
                cmpr_local_2_V_reg_1153 <= grp_data_read_1_fu_266_ap_return_2;
                cmpr_local_3_V_1_fu_82 <= grp_data_read_1_fu_266_ap_return_3;
                cmpr_local_3_V_reg_1158 <= grp_data_read_1_fu_266_ap_return_3;
                cmpr_local_4_V_1_fu_86 <= grp_data_read_1_fu_266_ap_return_4;
                cmpr_local_4_V_reg_1163 <= grp_data_read_1_fu_266_ap_return_4;
                cmpr_local_5_V_1_fu_90 <= grp_data_read_1_fu_266_ap_return_5;
                cmpr_local_5_V_reg_1168 <= grp_data_read_1_fu_266_ap_return_5;
                cmpr_local_6_V_1_fu_94 <= grp_data_read_1_fu_266_ap_return_6;
                cmpr_local_6_V_reg_1173 <= grp_data_read_1_fu_266_ap_return_6;
                cmpr_local_7_V_1_fu_98 <= grp_data_read_1_fu_266_ap_return_7;
                cmpr_local_7_V_reg_1178 <= grp_data_read_1_fu_266_ap_return_7;
                cmpr_local_8_V_1_fu_102 <= grp_data_read_1_fu_266_ap_return_8;
                cmpr_local_8_V_reg_1183 <= grp_data_read_1_fu_266_ap_return_8;
                cmpr_local_9_V_1_fu_106 <= grp_data_read_1_fu_266_ap_return_9;
                cmpr_local_9_V_reg_1188 <= grp_data_read_1_fu_266_ap_return_9;
                cmprpop_local_0_V_1_fu_134 <= grp_data_read_1_fu_266_ap_return_16;
                cmprpop_local_0_V_reg_1223 <= grp_data_read_1_fu_266_ap_return_16;
                cmprpop_local_10_V_1_fu_174 <= grp_data_read_1_fu_266_ap_return_26;
                cmprpop_local_10_V_reg_1273 <= grp_data_read_1_fu_266_ap_return_26;
                cmprpop_local_11_V_1_fu_178 <= grp_data_read_1_fu_266_ap_return_27;
                cmprpop_local_11_V_reg_1278 <= grp_data_read_1_fu_266_ap_return_27;
                cmprpop_local_12_V_1_fu_182 <= grp_data_read_1_fu_266_ap_return_28;
                cmprpop_local_12_V_reg_1283 <= grp_data_read_1_fu_266_ap_return_28;
                cmprpop_local_13_V_1_fu_186 <= grp_data_read_1_fu_266_ap_return_29;
                cmprpop_local_13_V_reg_1288 <= grp_data_read_1_fu_266_ap_return_29;
                cmprpop_local_14_V_1_fu_190 <= grp_data_read_1_fu_266_ap_return_30;
                cmprpop_local_14_V_reg_1293 <= grp_data_read_1_fu_266_ap_return_30;
                cmprpop_local_15_V_1_fu_194 <= grp_data_read_1_fu_266_ap_return_31;
                cmprpop_local_15_V_reg_1298 <= grp_data_read_1_fu_266_ap_return_31;
                cmprpop_local_1_V_1_fu_138 <= grp_data_read_1_fu_266_ap_return_17;
                cmprpop_local_1_V_reg_1228 <= grp_data_read_1_fu_266_ap_return_17;
                cmprpop_local_2_V_1_fu_142 <= grp_data_read_1_fu_266_ap_return_18;
                cmprpop_local_2_V_reg_1233 <= grp_data_read_1_fu_266_ap_return_18;
                cmprpop_local_3_V_1_fu_146 <= grp_data_read_1_fu_266_ap_return_19;
                cmprpop_local_3_V_reg_1238 <= grp_data_read_1_fu_266_ap_return_19;
                cmprpop_local_4_V_1_fu_150 <= grp_data_read_1_fu_266_ap_return_20;
                cmprpop_local_4_V_reg_1243 <= grp_data_read_1_fu_266_ap_return_20;
                cmprpop_local_5_V_1_fu_154 <= grp_data_read_1_fu_266_ap_return_21;
                cmprpop_local_5_V_reg_1248 <= grp_data_read_1_fu_266_ap_return_21;
                cmprpop_local_6_V_1_fu_158 <= grp_data_read_1_fu_266_ap_return_22;
                cmprpop_local_6_V_reg_1253 <= grp_data_read_1_fu_266_ap_return_22;
                cmprpop_local_7_V_1_fu_162 <= grp_data_read_1_fu_266_ap_return_23;
                cmprpop_local_7_V_reg_1258 <= grp_data_read_1_fu_266_ap_return_23;
                cmprpop_local_8_V_1_fu_166 <= grp_data_read_1_fu_266_ap_return_24;
                cmprpop_local_8_V_reg_1263 <= grp_data_read_1_fu_266_ap_return_24;
                cmprpop_local_9_V_1_fu_170 <= grp_data_read_1_fu_266_ap_return_25;
                cmprpop_local_9_V_reg_1268 <= grp_data_read_1_fu_266_ap_return_25;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                input_V1_reg_964 <= input_V(63 downto 6);
                output_V3_reg_959 <= output_V(63 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_fu_326_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln_reg_1138(5 downto 4) <= shl_ln_fu_470_p3(5 downto 4);
            end if;
        end if;
    end process;
    shl_ln_reg_1138(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln92_fu_326_p2, ap_CS_fsm_state3, grp_data_read_1_fu_266_ap_done, ap_CS_fsm_state5, ap_block_state5_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln92_fu_326_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_data_read_1_fu_266_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state5_on_subcall_done_assign_proc : process(ap_sync_grp_dataflow_parent_loop_proc_fu_222_ap_ready, ap_sync_grp_dataflow_parent_loop_proc_fu_222_ap_done)
    begin
                ap_block_state5_on_subcall_done <= ((ap_sync_grp_dataflow_parent_loop_proc_fu_222_ap_ready and ap_sync_grp_dataflow_parent_loop_proc_fu_222_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln92_fu_326_p2)
    begin
        if (((icmp_ln92_fu_326_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln92_fu_326_p2)
    begin
        if (((icmp_ln92_fu_326_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_grp_dataflow_parent_loop_proc_fu_222_ap_done <= (grp_dataflow_parent_loop_proc_fu_222_ap_done or ap_sync_reg_grp_dataflow_parent_loop_proc_fu_222_ap_done);
    ap_sync_grp_dataflow_parent_loop_proc_fu_222_ap_ready <= (grp_dataflow_parent_loop_proc_fu_222_ap_ready or ap_sync_reg_grp_dataflow_parent_loop_proc_fu_222_ap_ready);
    cmpr_chunk_num_fu_332_p2 <= std_logic_vector(unsigned(cmpr_chunk_num_0_i_reg_210) + unsigned(ap_const_lv3_1));

    gmem0_ARADDR_assign_proc : process(ap_CS_fsm_state2, icmp_ln92_fu_326_p2, ap_CS_fsm_state3, grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARADDR, grp_data_read_1_fu_266_m_axi_input_V_ARADDR, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln92_fu_326_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            gmem0_ARADDR <= grp_data_read_1_fu_266_m_axi_input_V_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem0_ARADDR <= grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARADDR;
        else 
            gmem0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem0_ARBURST_assign_proc : process(ap_CS_fsm_state2, icmp_ln92_fu_326_p2, ap_CS_fsm_state3, grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARBURST, grp_data_read_1_fu_266_m_axi_input_V_ARBURST, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln92_fu_326_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            gmem0_ARBURST <= grp_data_read_1_fu_266_m_axi_input_V_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem0_ARBURST <= grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARBURST;
        else 
            gmem0_ARBURST <= "XX";
        end if; 
    end process;


    gmem0_ARCACHE_assign_proc : process(ap_CS_fsm_state2, icmp_ln92_fu_326_p2, ap_CS_fsm_state3, grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARCACHE, grp_data_read_1_fu_266_m_axi_input_V_ARCACHE, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln92_fu_326_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            gmem0_ARCACHE <= grp_data_read_1_fu_266_m_axi_input_V_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem0_ARCACHE <= grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARCACHE;
        else 
            gmem0_ARCACHE <= "XXXX";
        end if; 
    end process;


    gmem0_ARID_assign_proc : process(ap_CS_fsm_state2, icmp_ln92_fu_326_p2, ap_CS_fsm_state3, grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARID, grp_data_read_1_fu_266_m_axi_input_V_ARID, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln92_fu_326_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            gmem0_ARID <= grp_data_read_1_fu_266_m_axi_input_V_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem0_ARID <= grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARID;
        else 
            gmem0_ARID <= "X";
        end if; 
    end process;


    gmem0_ARLEN_assign_proc : process(ap_CS_fsm_state2, icmp_ln92_fu_326_p2, ap_CS_fsm_state3, grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARLEN, grp_data_read_1_fu_266_m_axi_input_V_ARLEN, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln92_fu_326_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            gmem0_ARLEN <= grp_data_read_1_fu_266_m_axi_input_V_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem0_ARLEN <= grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARLEN;
        else 
            gmem0_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem0_ARLOCK_assign_proc : process(ap_CS_fsm_state2, icmp_ln92_fu_326_p2, ap_CS_fsm_state3, grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARLOCK, grp_data_read_1_fu_266_m_axi_input_V_ARLOCK, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln92_fu_326_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            gmem0_ARLOCK <= grp_data_read_1_fu_266_m_axi_input_V_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem0_ARLOCK <= grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARLOCK;
        else 
            gmem0_ARLOCK <= "XX";
        end if; 
    end process;


    gmem0_ARPROT_assign_proc : process(ap_CS_fsm_state2, icmp_ln92_fu_326_p2, ap_CS_fsm_state3, grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARPROT, grp_data_read_1_fu_266_m_axi_input_V_ARPROT, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln92_fu_326_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            gmem0_ARPROT <= grp_data_read_1_fu_266_m_axi_input_V_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem0_ARPROT <= grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARPROT;
        else 
            gmem0_ARPROT <= "XXX";
        end if; 
    end process;


    gmem0_ARQOS_assign_proc : process(ap_CS_fsm_state2, icmp_ln92_fu_326_p2, ap_CS_fsm_state3, grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARQOS, grp_data_read_1_fu_266_m_axi_input_V_ARQOS, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln92_fu_326_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            gmem0_ARQOS <= grp_data_read_1_fu_266_m_axi_input_V_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem0_ARQOS <= grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARQOS;
        else 
            gmem0_ARQOS <= "XXXX";
        end if; 
    end process;


    gmem0_ARREGION_assign_proc : process(ap_CS_fsm_state2, icmp_ln92_fu_326_p2, ap_CS_fsm_state3, grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARREGION, grp_data_read_1_fu_266_m_axi_input_V_ARREGION, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln92_fu_326_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            gmem0_ARREGION <= grp_data_read_1_fu_266_m_axi_input_V_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem0_ARREGION <= grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARREGION;
        else 
            gmem0_ARREGION <= "XXXX";
        end if; 
    end process;


    gmem0_ARSIZE_assign_proc : process(ap_CS_fsm_state2, icmp_ln92_fu_326_p2, ap_CS_fsm_state3, grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARSIZE, grp_data_read_1_fu_266_m_axi_input_V_ARSIZE, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln92_fu_326_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            gmem0_ARSIZE <= grp_data_read_1_fu_266_m_axi_input_V_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem0_ARSIZE <= grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARSIZE;
        else 
            gmem0_ARSIZE <= "XXX";
        end if; 
    end process;


    gmem0_ARUSER_assign_proc : process(ap_CS_fsm_state2, icmp_ln92_fu_326_p2, ap_CS_fsm_state3, grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARUSER, grp_data_read_1_fu_266_m_axi_input_V_ARUSER, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln92_fu_326_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            gmem0_ARUSER <= grp_data_read_1_fu_266_m_axi_input_V_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem0_ARUSER <= grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARUSER;
        else 
            gmem0_ARUSER <= "X";
        end if; 
    end process;


    gmem0_ARVALID_assign_proc : process(ap_CS_fsm_state2, icmp_ln92_fu_326_p2, ap_CS_fsm_state3, grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARVALID, grp_data_read_1_fu_266_m_axi_input_V_ARVALID, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln92_fu_326_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            gmem0_ARVALID <= grp_data_read_1_fu_266_m_axi_input_V_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem0_ARVALID <= grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_ARVALID;
        else 
            gmem0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_RREADY_assign_proc : process(ap_CS_fsm_state2, icmp_ln92_fu_326_p2, ap_CS_fsm_state3, grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_RREADY, grp_data_read_1_fu_266_m_axi_input_V_RREADY, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln92_fu_326_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            gmem0_RREADY <= grp_data_read_1_fu_266_m_axi_input_V_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem0_RREADY <= grp_dataflow_parent_loop_proc_fu_222_m_axi_input_V_RREADY;
        else 
            gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_AWVALID_assign_proc : process(grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWVALID, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem1_AWVALID <= grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_AWVALID;
        else 
            gmem1_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_BREADY_assign_proc : process(grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_BREADY, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem1_BREADY <= grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_BREADY;
        else 
            gmem1_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_WVALID_assign_proc : process(grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_WVALID, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem1_WVALID <= grp_dataflow_parent_loop_proc_fu_222_m_axi_output_V_WVALID;
        else 
            gmem1_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    grp_data_read_1_fu_266_ap_start <= grp_data_read_1_fu_266_ap_start_reg;

    grp_dataflow_parent_loop_proc_fu_222_ap_continue_assign_proc : process(ap_CS_fsm_state5, ap_block_state5_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_dataflow_parent_loop_proc_fu_222_ap_continue <= ap_const_logic_1;
        else 
            grp_dataflow_parent_loop_proc_fu_222_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_dataflow_parent_loop_proc_fu_222_ap_start <= grp_dataflow_parent_loop_proc_fu_222_ap_start_reg;
    icmp_ln92_fu_326_p2 <= "1" when (cmpr_chunk_num_0_i_reg_210 = ap_const_lv3_4) else "0";
    shl_ln_fu_470_p3 <= (trunc_ln93_fu_466_p1 & ap_const_lv4_0);
    trunc_ln93_fu_466_p1 <= cmpr_chunk_num_0_i_reg_210(2 - 1 downto 0);
end behav;
