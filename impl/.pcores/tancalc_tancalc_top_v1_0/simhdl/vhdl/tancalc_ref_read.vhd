-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tancalc_ref_read is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ref_local_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    ref_local_ce0 : OUT STD_LOGIC;
    ref_local_we0 : OUT STD_LOGIC;
    ref_local_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    refpop_local_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    refpop_local_ce0 : OUT STD_LOGIC;
    refpop_local_we0 : OUT STD_LOGIC;
    refpop_local_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    chunk_num : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of tancalc_ref_read is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ref_num_0_reg_168 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_186_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln16_fu_197_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln16_reg_929 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln16_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state4_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln16_reg_934_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ref_num_fu_206_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ref_num_reg_938 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal zext_ln17_2_fu_230_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_2_reg_948 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln7_14_fu_751_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln7_14_reg_953 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln7_29_fu_897_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln7_29_reg_958 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal i_0_reg_157 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln13_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_ref_num_0_phi_fu_172_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln14_fu_192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_1_fu_221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln7_30_fu_909_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln17_fu_212_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln17_fu_216_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln17_fu_226_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_239_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_251_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_263_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_275_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_287_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_299_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_311_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_323_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_335_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_347_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_359_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_371_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_383_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_395_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_407_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_419_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_431_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_443_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_455_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_467_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_479_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_491_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_503_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_515_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_527_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_539_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_551_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_563_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_575_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_587_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_599_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln7_fu_235_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_1_fu_247_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln7_fu_611_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_3_fu_271_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_2_fu_259_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln7_1_fu_621_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_31_fu_617_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln7_32_fu_627_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln7_2_fu_631_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln7_5_fu_295_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_4_fu_283_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln7_3_fu_641_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_7_fu_319_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_6_fu_307_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln7_4_fu_651_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_34_fu_647_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln7_35_fu_657_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln7_5_fu_661_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln7_33_fu_637_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln7_36_fu_667_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln7_6_fu_671_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln7_9_fu_343_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_8_fu_331_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln7_7_fu_681_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_11_fu_367_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_10_fu_355_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln7_8_fu_691_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_38_fu_687_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln7_39_fu_697_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln7_9_fu_701_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln7_13_fu_391_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_12_fu_379_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln7_10_fu_711_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_15_fu_415_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_14_fu_403_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln7_11_fu_721_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_41_fu_717_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln7_42_fu_727_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln7_12_fu_731_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln7_40_fu_707_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln7_43_fu_737_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln7_13_fu_741_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln7_37_fu_677_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln7_44_fu_747_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln7_17_fu_439_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_16_fu_427_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln7_15_fu_757_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_19_fu_463_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_18_fu_451_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln7_16_fu_767_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_46_fu_763_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln7_47_fu_773_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln7_17_fu_777_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln7_21_fu_487_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_20_fu_475_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln7_18_fu_787_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_23_fu_511_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_22_fu_499_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln7_19_fu_797_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_49_fu_793_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln7_50_fu_803_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln7_20_fu_807_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln7_48_fu_783_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln7_51_fu_813_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln7_21_fu_817_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln7_25_fu_535_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_24_fu_523_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln7_22_fu_827_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_27_fu_559_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_26_fu_547_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln7_23_fu_837_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_53_fu_833_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln7_54_fu_843_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln7_24_fu_847_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln7_29_fu_583_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_28_fu_571_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln7_25_fu_857_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_61_fu_607_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_30_fu_595_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln7_26_fu_867_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_56_fu_863_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln7_57_fu_873_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln7_27_fu_877_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln7_55_fu_853_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln7_58_fu_883_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln7_28_fu_887_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln7_52_fu_823_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln7_59_fu_893_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln7_45_fu_903_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln7_60_fu_906_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_157 <= i_fu_186_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_157 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    ref_num_0_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                ref_num_0_reg_168 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln16_reg_934 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
                ref_num_0_reg_168 <= ref_num_reg_938;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln16_reg_934 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                add_ln7_14_reg_953 <= add_ln7_14_fu_751_p2;
                add_ln7_29_reg_958 <= add_ln7_29_fu_897_p2;
                    zext_ln17_2_reg_948(7 downto 0) <= zext_ln17_2_fu_230_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln16_reg_934 <= icmp_ln16_fu_200_p2;
                icmp_ln16_reg_934_pp1_iter1_reg <= icmp_ln16_reg_934;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                ref_num_reg_938 <= ref_num_fu_206_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    zext_ln16_reg_929(15 downto 0) <= zext_ln16_fu_197_p1(15 downto 0);
            end if;
        end if;
    end process;
    zext_ln16_reg_929(16) <= '0';
    zext_ln17_2_reg_948(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln16_fu_200_p2, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, icmp_ln13_fu_180_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln13_fu_180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln16_fu_200_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((icmp_ln16_fu_200_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln17_fu_216_p2 <= std_logic_vector(unsigned(zext_ln17_fu_212_p1) + unsigned(zext_ln16_reg_929));
    add_ln7_10_fu_711_p2 <= std_logic_vector(unsigned(zext_ln7_13_fu_391_p1) + unsigned(zext_ln7_12_fu_379_p1));
    add_ln7_11_fu_721_p2 <= std_logic_vector(unsigned(zext_ln7_15_fu_415_p1) + unsigned(zext_ln7_14_fu_403_p1));
    add_ln7_12_fu_731_p2 <= std_logic_vector(unsigned(zext_ln7_41_fu_717_p1) + unsigned(zext_ln7_42_fu_727_p1));
    add_ln7_13_fu_741_p2 <= std_logic_vector(unsigned(zext_ln7_40_fu_707_p1) + unsigned(zext_ln7_43_fu_737_p1));
    add_ln7_14_fu_751_p2 <= std_logic_vector(unsigned(zext_ln7_37_fu_677_p1) + unsigned(zext_ln7_44_fu_747_p1));
    add_ln7_15_fu_757_p2 <= std_logic_vector(unsigned(zext_ln7_17_fu_439_p1) + unsigned(zext_ln7_16_fu_427_p1));
    add_ln7_16_fu_767_p2 <= std_logic_vector(unsigned(zext_ln7_19_fu_463_p1) + unsigned(zext_ln7_18_fu_451_p1));
    add_ln7_17_fu_777_p2 <= std_logic_vector(unsigned(zext_ln7_46_fu_763_p1) + unsigned(zext_ln7_47_fu_773_p1));
    add_ln7_18_fu_787_p2 <= std_logic_vector(unsigned(zext_ln7_21_fu_487_p1) + unsigned(zext_ln7_20_fu_475_p1));
    add_ln7_19_fu_797_p2 <= std_logic_vector(unsigned(zext_ln7_23_fu_511_p1) + unsigned(zext_ln7_22_fu_499_p1));
    add_ln7_1_fu_621_p2 <= std_logic_vector(unsigned(zext_ln7_3_fu_271_p1) + unsigned(zext_ln7_2_fu_259_p1));
    add_ln7_20_fu_807_p2 <= std_logic_vector(unsigned(zext_ln7_49_fu_793_p1) + unsigned(zext_ln7_50_fu_803_p1));
    add_ln7_21_fu_817_p2 <= std_logic_vector(unsigned(zext_ln7_48_fu_783_p1) + unsigned(zext_ln7_51_fu_813_p1));
    add_ln7_22_fu_827_p2 <= std_logic_vector(unsigned(zext_ln7_25_fu_535_p1) + unsigned(zext_ln7_24_fu_523_p1));
    add_ln7_23_fu_837_p2 <= std_logic_vector(unsigned(zext_ln7_27_fu_559_p1) + unsigned(zext_ln7_26_fu_547_p1));
    add_ln7_24_fu_847_p2 <= std_logic_vector(unsigned(zext_ln7_53_fu_833_p1) + unsigned(zext_ln7_54_fu_843_p1));
    add_ln7_25_fu_857_p2 <= std_logic_vector(unsigned(zext_ln7_29_fu_583_p1) + unsigned(zext_ln7_28_fu_571_p1));
    add_ln7_26_fu_867_p2 <= std_logic_vector(unsigned(zext_ln7_61_fu_607_p1) + unsigned(zext_ln7_30_fu_595_p1));
    add_ln7_27_fu_877_p2 <= std_logic_vector(unsigned(zext_ln7_56_fu_863_p1) + unsigned(zext_ln7_57_fu_873_p1));
    add_ln7_28_fu_887_p2 <= std_logic_vector(unsigned(zext_ln7_55_fu_853_p1) + unsigned(zext_ln7_58_fu_883_p1));
    add_ln7_29_fu_897_p2 <= std_logic_vector(unsigned(zext_ln7_52_fu_823_p1) + unsigned(zext_ln7_59_fu_893_p1));
    add_ln7_2_fu_631_p2 <= std_logic_vector(unsigned(zext_ln7_31_fu_617_p1) + unsigned(zext_ln7_32_fu_627_p1));
    add_ln7_30_fu_909_p2 <= std_logic_vector(unsigned(zext_ln7_45_fu_903_p1) + unsigned(zext_ln7_60_fu_906_p1));
    add_ln7_3_fu_641_p2 <= std_logic_vector(unsigned(zext_ln7_5_fu_295_p1) + unsigned(zext_ln7_4_fu_283_p1));
    add_ln7_4_fu_651_p2 <= std_logic_vector(unsigned(zext_ln7_7_fu_319_p1) + unsigned(zext_ln7_6_fu_307_p1));
    add_ln7_5_fu_661_p2 <= std_logic_vector(unsigned(zext_ln7_34_fu_647_p1) + unsigned(zext_ln7_35_fu_657_p1));
    add_ln7_6_fu_671_p2 <= std_logic_vector(unsigned(zext_ln7_33_fu_637_p1) + unsigned(zext_ln7_36_fu_667_p1));
    add_ln7_7_fu_681_p2 <= std_logic_vector(unsigned(zext_ln7_9_fu_343_p1) + unsigned(zext_ln7_8_fu_331_p1));
    add_ln7_8_fu_691_p2 <= std_logic_vector(unsigned(zext_ln7_11_fu_367_p1) + unsigned(zext_ln7_10_fu_355_p1));
    add_ln7_9_fu_701_p2 <= std_logic_vector(unsigned(zext_ln7_38_fu_687_p1) + unsigned(zext_ln7_39_fu_697_p1));
    add_ln7_fu_611_p2 <= std_logic_vector(unsigned(zext_ln7_fu_235_p1) + unsigned(zext_ln7_1_fu_247_p1));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state4_assign_proc : process(icmp_ln16_fu_200_p2)
    begin
        if ((icmp_ln16_fu_200_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ref_num_0_phi_fu_172_p4_assign_proc : process(ref_num_0_reg_168, icmp_ln16_reg_934, ap_CS_fsm_pp1_stage0, ref_num_reg_938, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln16_reg_934 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_ref_num_0_phi_fu_172_p4 <= ref_num_reg_938;
        else 
            ap_phi_mux_ref_num_0_phi_fu_172_p4 <= ref_num_0_reg_168;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_186_p2 <= std_logic_vector(unsigned(i_0_reg_157) + unsigned(ap_const_lv8_1));
    icmp_ln13_fu_180_p2 <= "1" when (i_0_reg_157 = ap_const_lv8_80) else "0";
    icmp_ln16_fu_200_p2 <= "1" when (ap_phi_mux_ref_num_0_phi_fu_172_p4 = ap_const_lv8_80) else "0";
    input_r_address0 <= zext_ln17_1_fu_221_p1(15 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ref_local_address0 <= zext_ln17_2_fu_230_p1(7 - 1 downto 0);

    ref_local_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ref_local_ce0 <= ap_const_logic_1;
        else 
            ref_local_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ref_local_d0 <= input_r_q0;

    ref_local_we0_assign_proc : process(icmp_ln16_reg_934, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln16_reg_934 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ref_local_we0 <= ap_const_logic_1;
        else 
            ref_local_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ref_num_fu_206_p2 <= std_logic_vector(unsigned(ap_phi_mux_ref_num_0_phi_fu_172_p4) + unsigned(ap_const_lv8_1));

    refpop_local_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln17_2_reg_948, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, zext_ln14_fu_192_p1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            refpop_local_address0 <= zext_ln17_2_reg_948(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            refpop_local_address0 <= zext_ln14_fu_192_p1(7 - 1 downto 0);
        else 
            refpop_local_address0 <= "XXXXXXX";
        end if; 
    end process;


    refpop_local_ce0_assign_proc : process(ap_CS_fsm_state2, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            refpop_local_ce0 <= ap_const_logic_1;
        else 
            refpop_local_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    refpop_local_d0_assign_proc : process(ap_CS_fsm_state2, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, add_ln7_30_fu_909_p2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            refpop_local_d0 <= add_ln7_30_fu_909_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            refpop_local_d0 <= ap_const_lv6_0;
        else 
            refpop_local_d0 <= "XXXXXX";
        end if; 
    end process;


    refpop_local_we0_assign_proc : process(ap_CS_fsm_state2, ap_block_pp1_stage0_11001, icmp_ln16_reg_934_pp1_iter1_reg, ap_enable_reg_pp1_iter2, icmp_ln13_fu_180_p2)
    begin
        if ((((icmp_ln16_reg_934_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((icmp_ln13_fu_180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            refpop_local_we0 <= ap_const_logic_1;
        else 
            refpop_local_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_359_p3 <= input_r_q0(11 downto 11);
    tmp_11_fu_371_p3 <= input_r_q0(12 downto 12);
    tmp_12_fu_383_p3 <= input_r_q0(13 downto 13);
    tmp_13_fu_395_p3 <= input_r_q0(14 downto 14);
    tmp_14_fu_407_p3 <= input_r_q0(15 downto 15);
    tmp_15_fu_419_p3 <= input_r_q0(16 downto 16);
    tmp_16_fu_431_p3 <= input_r_q0(17 downto 17);
    tmp_17_fu_443_p3 <= input_r_q0(18 downto 18);
    tmp_18_fu_455_p3 <= input_r_q0(19 downto 19);
    tmp_19_fu_467_p3 <= input_r_q0(20 downto 20);
    tmp_1_fu_251_p3 <= input_r_q0(2 downto 2);
    tmp_20_fu_479_p3 <= input_r_q0(21 downto 21);
    tmp_21_fu_491_p3 <= input_r_q0(22 downto 22);
    tmp_22_fu_503_p3 <= input_r_q0(23 downto 23);
    tmp_23_fu_515_p3 <= input_r_q0(24 downto 24);
    tmp_24_fu_527_p3 <= input_r_q0(25 downto 25);
    tmp_25_fu_539_p3 <= input_r_q0(26 downto 26);
    tmp_26_fu_551_p3 <= input_r_q0(27 downto 27);
    tmp_27_fu_563_p3 <= input_r_q0(28 downto 28);
    tmp_28_fu_575_p3 <= input_r_q0(29 downto 29);
    tmp_29_fu_587_p3 <= input_r_q0(30 downto 30);
    tmp_2_fu_263_p3 <= input_r_q0(3 downto 3);
    tmp_30_fu_599_p3 <= input_r_q0(31 downto 31);
    tmp_3_fu_275_p3 <= input_r_q0(4 downto 4);
    tmp_4_fu_287_p3 <= input_r_q0(5 downto 5);
    tmp_5_fu_299_p3 <= input_r_q0(6 downto 6);
    tmp_6_fu_311_p3 <= input_r_q0(7 downto 7);
    tmp_7_fu_323_p3 <= input_r_q0(8 downto 8);
    tmp_8_fu_335_p3 <= input_r_q0(9 downto 9);
    tmp_9_fu_347_p3 <= input_r_q0(10 downto 10);
    tmp_fu_239_p3 <= input_r_q0(1 downto 1);
    trunc_ln17_fu_226_p1 <= input_r_q0(1 - 1 downto 0);
    zext_ln14_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_157),64));
    zext_ln16_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(chunk_num),17));
    zext_ln17_1_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln17_fu_216_p2),64));
    zext_ln17_2_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ref_num_0_reg_168),64));
    zext_ln17_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_ref_num_0_phi_fu_172_p4),17));
    zext_ln7_10_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_347_p3),2));
    zext_ln7_11_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_359_p3),2));
    zext_ln7_12_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_371_p3),2));
    zext_ln7_13_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_383_p3),2));
    zext_ln7_14_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_395_p3),2));
    zext_ln7_15_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_407_p3),2));
    zext_ln7_16_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_419_p3),2));
    zext_ln7_17_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_431_p3),2));
    zext_ln7_18_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_443_p3),2));
    zext_ln7_19_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_455_p3),2));
    zext_ln7_1_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_239_p3),2));
    zext_ln7_20_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_467_p3),2));
    zext_ln7_21_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_479_p3),2));
    zext_ln7_22_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_491_p3),2));
    zext_ln7_23_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_503_p3),2));
    zext_ln7_24_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_515_p3),2));
    zext_ln7_25_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_527_p3),2));
    zext_ln7_26_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_539_p3),2));
    zext_ln7_27_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_551_p3),2));
    zext_ln7_28_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_563_p3),2));
    zext_ln7_29_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_575_p3),2));
    zext_ln7_2_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_251_p3),2));
    zext_ln7_30_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_587_p3),2));
    zext_ln7_31_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_fu_611_p2),3));
    zext_ln7_32_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_1_fu_621_p2),3));
    zext_ln7_33_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_2_fu_631_p2),4));
    zext_ln7_34_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_3_fu_641_p2),3));
    zext_ln7_35_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_4_fu_651_p2),3));
    zext_ln7_36_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_5_fu_661_p2),4));
    zext_ln7_37_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_6_fu_671_p2),5));
    zext_ln7_38_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_7_fu_681_p2),3));
    zext_ln7_39_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_8_fu_691_p2),3));
    zext_ln7_3_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_263_p3),2));
    zext_ln7_40_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_9_fu_701_p2),4));
    zext_ln7_41_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_10_fu_711_p2),3));
    zext_ln7_42_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_11_fu_721_p2),3));
    zext_ln7_43_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_12_fu_731_p2),4));
    zext_ln7_44_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_13_fu_741_p2),5));
    zext_ln7_45_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_14_reg_953),6));
    zext_ln7_46_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_15_fu_757_p2),3));
    zext_ln7_47_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_16_fu_767_p2),3));
    zext_ln7_48_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_17_fu_777_p2),4));
    zext_ln7_49_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_18_fu_787_p2),3));
    zext_ln7_4_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_275_p3),2));
    zext_ln7_50_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_19_fu_797_p2),3));
    zext_ln7_51_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_20_fu_807_p2),4));
    zext_ln7_52_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_21_fu_817_p2),5));
    zext_ln7_53_fu_833_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_22_fu_827_p2),3));
    zext_ln7_54_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_23_fu_837_p2),3));
    zext_ln7_55_fu_853_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_24_fu_847_p2),4));
    zext_ln7_56_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_25_fu_857_p2),3));
    zext_ln7_57_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_26_fu_867_p2),3));
    zext_ln7_58_fu_883_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_27_fu_877_p2),4));
    zext_ln7_59_fu_893_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_28_fu_887_p2),5));
    zext_ln7_5_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_287_p3),2));
    zext_ln7_60_fu_906_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_29_reg_958),6));
    zext_ln7_61_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_599_p3),2));
    zext_ln7_6_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_299_p3),2));
    zext_ln7_7_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_311_p3),2));
    zext_ln7_8_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_323_p3),2));
    zext_ln7_9_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_335_p3),2));
    zext_ln7_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln17_fu_226_p1),2));
end behav;
