// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tancalc_data_read_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_input_V_AWVALID,
        m_axi_input_V_AWREADY,
        m_axi_input_V_AWADDR,
        m_axi_input_V_AWID,
        m_axi_input_V_AWLEN,
        m_axi_input_V_AWSIZE,
        m_axi_input_V_AWBURST,
        m_axi_input_V_AWLOCK,
        m_axi_input_V_AWCACHE,
        m_axi_input_V_AWPROT,
        m_axi_input_V_AWQOS,
        m_axi_input_V_AWREGION,
        m_axi_input_V_AWUSER,
        m_axi_input_V_WVALID,
        m_axi_input_V_WREADY,
        m_axi_input_V_WDATA,
        m_axi_input_V_WSTRB,
        m_axi_input_V_WLAST,
        m_axi_input_V_WID,
        m_axi_input_V_WUSER,
        m_axi_input_V_ARVALID,
        m_axi_input_V_ARREADY,
        m_axi_input_V_ARADDR,
        m_axi_input_V_ARID,
        m_axi_input_V_ARLEN,
        m_axi_input_V_ARSIZE,
        m_axi_input_V_ARBURST,
        m_axi_input_V_ARLOCK,
        m_axi_input_V_ARCACHE,
        m_axi_input_V_ARPROT,
        m_axi_input_V_ARQOS,
        m_axi_input_V_ARREGION,
        m_axi_input_V_ARUSER,
        m_axi_input_V_RVALID,
        m_axi_input_V_RREADY,
        m_axi_input_V_RDATA,
        m_axi_input_V_RLAST,
        m_axi_input_V_RID,
        m_axi_input_V_RUSER,
        m_axi_input_V_RRESP,
        m_axi_input_V_BVALID,
        m_axi_input_V_BREADY,
        m_axi_input_V_BRESP,
        m_axi_input_V_BID,
        m_axi_input_V_BUSER,
        input_V_offset,
        data_local_V_address0,
        data_local_V_ce0,
        data_local_V_we0,
        data_local_V_d0,
        data_local_V_q0,
        datapop_local_V_address0,
        datapop_local_V_ce0,
        datapop_local_V_we0,
        datapop_local_V_d0,
        datapop_local_V_q0,
        chunk_num
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_pp0_stage0 = 11'd256;
parameter    ap_ST_fsm_pp0_stage1 = 11'd512;
parameter    ap_ST_fsm_state16 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_input_V_AWVALID;
input   m_axi_input_V_AWREADY;
output  [63:0] m_axi_input_V_AWADDR;
output  [0:0] m_axi_input_V_AWID;
output  [31:0] m_axi_input_V_AWLEN;
output  [2:0] m_axi_input_V_AWSIZE;
output  [1:0] m_axi_input_V_AWBURST;
output  [1:0] m_axi_input_V_AWLOCK;
output  [3:0] m_axi_input_V_AWCACHE;
output  [2:0] m_axi_input_V_AWPROT;
output  [3:0] m_axi_input_V_AWQOS;
output  [3:0] m_axi_input_V_AWREGION;
output  [0:0] m_axi_input_V_AWUSER;
output   m_axi_input_V_WVALID;
input   m_axi_input_V_WREADY;
output  [511:0] m_axi_input_V_WDATA;
output  [63:0] m_axi_input_V_WSTRB;
output   m_axi_input_V_WLAST;
output  [0:0] m_axi_input_V_WID;
output  [0:0] m_axi_input_V_WUSER;
output   m_axi_input_V_ARVALID;
input   m_axi_input_V_ARREADY;
output  [63:0] m_axi_input_V_ARADDR;
output  [0:0] m_axi_input_V_ARID;
output  [31:0] m_axi_input_V_ARLEN;
output  [2:0] m_axi_input_V_ARSIZE;
output  [1:0] m_axi_input_V_ARBURST;
output  [1:0] m_axi_input_V_ARLOCK;
output  [3:0] m_axi_input_V_ARCACHE;
output  [2:0] m_axi_input_V_ARPROT;
output  [3:0] m_axi_input_V_ARQOS;
output  [3:0] m_axi_input_V_ARREGION;
output  [0:0] m_axi_input_V_ARUSER;
input   m_axi_input_V_RVALID;
output   m_axi_input_V_RREADY;
input  [511:0] m_axi_input_V_RDATA;
input   m_axi_input_V_RLAST;
input  [0:0] m_axi_input_V_RID;
input  [0:0] m_axi_input_V_RUSER;
input  [1:0] m_axi_input_V_RRESP;
input   m_axi_input_V_BVALID;
output   m_axi_input_V_BREADY;
input  [1:0] m_axi_input_V_BRESP;
input  [0:0] m_axi_input_V_BID;
input  [0:0] m_axi_input_V_BUSER;
input  [57:0] input_V_offset;
output  [9:0] data_local_V_address0;
output   data_local_V_ce0;
output  [127:0] data_local_V_we0;
output  [1023:0] data_local_V_d0;
input  [1023:0] data_local_V_q0;
output  [9:0] datapop_local_V_address0;
output   datapop_local_V_ce0;
output   datapop_local_V_we0;
output  [10:0] datapop_local_V_d0;
input  [10:0] datapop_local_V_q0;
input  [15:0] chunk_num;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_input_V_ARVALID;
reg m_axi_input_V_RREADY;
reg[9:0] data_local_V_address0;
reg data_local_V_ce0;
reg[127:0] data_local_V_we0;
reg datapop_local_V_ce0;
reg datapop_local_V_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    input_V_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    input_V_blk_n_R;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln37_reg_666;
reg   [15:0] data_part_0_reg_145;
reg   [15:0] data_num_0_reg_156;
reg   [11:0] data_part_num_0_reg_167;
wire   [58:0] add_ln215_fu_199_p2;
reg   [58:0] add_ln215_reg_655;
wire   [0:0] icmp_ln37_fu_215_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state9_pp0_stage0_iter0;
wire    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_state13_pp0_stage0_iter2;
wire    ap_block_state15_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln37_reg_666_pp0_iter1_reg;
reg   [0:0] icmp_ln37_reg_666_pp0_iter2_reg;
wire   [11:0] data_part_num_fu_221_p2;
reg   [11:0] data_part_num_reg_670;
wire   [0:0] trunc_ln37_fu_227_p1;
reg   [0:0] trunc_ln37_reg_675;
wire   [15:0] data_part_fu_237_p2;
reg   [15:0] data_part_reg_680;
wire  signed [15:0] data_num_1_fu_243_p3;
reg  signed [15:0] data_num_1_reg_685;
wire   [15:0] data_part_1_fu_251_p3;
reg   [15:0] data_part_1_reg_691;
reg    ap_block_state10_pp0_stage1_iter0;
wire    ap_block_state12_pp0_stage1_iter1;
wire    ap_block_state14_pp0_stage1_iter2;
reg    ap_block_pp0_stage1_11001;
wire   [1:0] trunc_ln46_fu_257_p1;
reg   [1:0] trunc_ln46_reg_698;
wire   [1:0] trunc_ln46_1_fu_261_p1;
reg   [1:0] trunc_ln46_1_reg_703;
wire   [1:0] trunc_ln46_2_fu_265_p1;
reg   [1:0] trunc_ln46_2_reg_708;
reg   [511:0] input_V_addr_read_reg_713;
reg   [9:0] data_local_V_addr_reg_718;
wire   [0:0] icmp_ln414_fu_300_p2;
reg   [0:0] icmp_ln414_reg_723;
wire   [10:0] tmp_1_fu_306_p3;
reg   [10:0] tmp_1_reg_730;
wire   [10:0] trunc_ln414_fu_313_p1;
reg   [10:0] trunc_ln414_reg_736;
wire   [1023:0] shl_ln414_fu_335_p2;
reg   [1023:0] shl_ln414_reg_742;
wire   [0:0] icmp_ln414_1_fu_341_p2;
reg   [0:0] icmp_ln414_1_reg_748;
wire   [10:0] tmp_3_fu_347_p3;
reg   [10:0] tmp_3_reg_754;
wire   [10:0] trunc_ln414_1_fu_354_p1;
reg   [10:0] trunc_ln414_1_reg_759;
wire   [10:0] sub_ln414_3_fu_380_p2;
reg   [10:0] sub_ln414_3_reg_764;
wire   [1023:0] shl_ln414_2_fu_390_p2;
reg   [1023:0] shl_ln414_2_reg_769;
wire   [127:0] shl_ln414_4_fu_411_p2;
reg   [127:0] shl_ln414_4_reg_775;
wire   [0:0] icmp_ln647_fu_417_p2;
reg   [0:0] icmp_ln647_reg_780;
wire   [10:0] trunc_ln647_fu_423_p1;
reg   [10:0] trunc_ln647_reg_787;
reg   [9:0] datapop_local_V_addr_reg_793;
reg   [9:0] datapop_local_V_addr_reg_793_pp0_iter2_reg;
wire   [1023:0] p_Result_s_fu_502_p2;
reg   [1023:0] p_Result_s_reg_798;
wire   [10:0] tmp_6_fu_560_p3;
reg   [10:0] tmp_6_reg_804;
wire   [10:0] sub_ln647_1_fu_567_p2;
reg   [10:0] sub_ln647_1_reg_811;
wire   [511:0] trunc_ln364_fu_640_p1;
reg   [511:0] trunc_ln364_reg_816;
wire    ap_CS_fsm_state8;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire   [9:0] grp_popcnt_fu_178_ap_return;
reg    grp_popcnt_fu_178_ap_ce;
reg    ap_block_state10_pp0_stage1_iter0_ignore_call82;
wire    ap_block_state12_pp0_stage1_iter1_ignore_call82;
wire    ap_block_state14_pp0_stage1_iter2_ignore_call82;
reg    ap_block_pp0_stage1_11001_ignoreCallOp121;
wire    ap_block_state9_pp0_stage0_iter0_ignore_call82;
wire    ap_block_state11_pp0_stage0_iter1_ignore_call82;
wire    ap_block_state13_pp0_stage0_iter2_ignore_call82;
wire    ap_block_state15_pp0_stage0_iter3_ignore_call82;
wire    ap_block_pp0_stage0_11001_ignoreCallOp127;
reg   [15:0] ap_phi_mux_data_part_0_phi_fu_149_p4;
wire    ap_block_pp0_stage0;
reg   [15:0] ap_phi_mux_data_num_0_phi_fu_160_p4;
reg   [11:0] ap_phi_mux_data_part_num_0_phi_fu_171_p4;
wire  signed [63:0] sext_ln46_1_fu_278_p1;
wire   [63:0] zext_ln215_2_fu_205_p1;
wire   [16:0] shl_ln_fu_183_p3;
wire   [58:0] zext_ln215_1_fu_195_p1;
wire   [58:0] zext_ln215_fu_191_p1;
wire   [15:0] data_num_fu_231_p2;
wire  signed [16:0] sext_ln46_fu_269_p1;
wire   [16:0] add_ln46_fu_272_p2;
wire   [24:0] Lo_assign_fu_284_p3;
wire   [24:0] or_ln46_fu_291_p2;
wire   [10:0] sub_ln414_fu_317_p2;
wire   [10:0] select_ln414_2_fu_323_p3;
wire   [1023:0] tmp_V_fu_297_p1;
wire   [1023:0] zext_ln414_fu_331_p1;
wire   [10:0] sub_ln414_2_fu_358_p2;
wire   [10:0] select_ln414_4_fu_364_p3;
wire   [10:0] select_ln414_6_fu_372_p3;
wire   [1023:0] zext_ln414_3_fu_386_p1;
wire   [21:0] tmp_5_fu_396_p3;
wire  signed [28:0] sext_ln414_fu_403_p1;
wire   [127:0] zext_ln414_6_fu_407_p1;
wire   [10:0] select_ln414_fu_427_p3;
wire   [10:0] select_ln414_1_fu_432_p3;
wire   [10:0] sub_ln414_1_fu_437_p2;
reg   [1023:0] tmp_2_fu_451_p4;
wire   [1023:0] zext_ln414_1_fu_443_p1;
wire   [1023:0] zext_ln414_2_fu_447_p1;
wire   [1023:0] shl_ln414_1_fu_466_p2;
wire   [1023:0] lshr_ln414_fu_472_p2;
wire   [1023:0] and_ln414_fu_478_p2;
wire   [1023:0] xor_ln414_fu_484_p2;
wire   [1023:0] select_ln414_3_fu_460_p3;
wire   [1023:0] and_ln414_1_fu_490_p2;
wire   [1023:0] and_ln414_2_fu_496_p2;
wire   [10:0] select_ln414_5_fu_508_p3;
reg   [1023:0] tmp_4_fu_520_p4;
wire   [1023:0] zext_ln414_4_fu_513_p1;
wire   [1023:0] zext_ln414_5_fu_517_p1;
wire   [1023:0] shl_ln414_3_fu_535_p2;
wire   [1023:0] lshr_ln414_1_fu_541_p2;
wire   [1023:0] select_ln414_7_fu_529_p3;
wire   [1023:0] and_ln414_3_fu_547_p2;
wire   [10:0] sub_ln647_fu_582_p2;
wire   [10:0] sub_ln647_2_fu_586_p2;
reg   [1023:0] tmp_7_fu_573_p4;
wire   [10:0] select_ln647_fu_590_p3;
wire   [10:0] select_ln647_2_fu_603_p3;
wire   [10:0] sub_ln647_3_fu_608_p2;
wire   [1023:0] select_ln647_1_fu_597_p3;
wire   [1023:0] zext_ln647_fu_614_p1;
wire   [1023:0] zext_ln647_1_fu_618_p1;
wire   [1023:0] lshr_ln647_fu_622_p2;
wire   [1023:0] lshr_ln647_1_fu_628_p2;
wire   [1023:0] p_Result_1_fu_634_p2;
wire   [10:0] zext_ln700_fu_644_p1;
wire    ap_CS_fsm_state16;
reg   [10:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

tancalc_popcnt grp_popcnt_fu_178(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x_V(trunc_ln364_reg_816),
    .ap_return(grp_popcnt_fu_178_ap_return),
    .ap_ce(grp_popcnt_fu_178_ap_ce)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_reg_666 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_num_0_reg_156 <= data_num_1_reg_685;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        data_num_0_reg_156 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_reg_666 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_part_0_reg_145 <= data_part_1_reg_691;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        data_part_0_reg_145 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_reg_666 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_part_num_0_reg_167 <= data_part_num_reg_670;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        data_part_num_0_reg_167 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        add_ln215_reg_655 <= add_ln215_fu_199_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_reg_666 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_local_V_addr_reg_718 <= sext_ln46_1_fu_278_p1;
        datapop_local_V_addr_reg_793 <= sext_ln46_1_fu_278_p1;
        icmp_ln414_1_reg_748 <= icmp_ln414_1_fu_341_p2;
        icmp_ln414_reg_723 <= icmp_ln414_fu_300_p2;
        icmp_ln647_reg_780 <= icmp_ln647_fu_417_p2;
        shl_ln414_2_reg_769 <= shl_ln414_2_fu_390_p2;
        shl_ln414_4_reg_775 <= shl_ln414_4_fu_411_p2;
        shl_ln414_reg_742 <= shl_ln414_fu_335_p2;
        sub_ln414_3_reg_764 <= sub_ln414_3_fu_380_p2;
        tmp_1_reg_730[10 : 9] <= tmp_1_fu_306_p3[10 : 9];
        tmp_3_reg_754[10 : 9] <= tmp_3_fu_347_p3[10 : 9];
        trunc_ln414_1_reg_759[10 : 9] <= trunc_ln414_1_fu_354_p1[10 : 9];
        trunc_ln414_reg_736[10 : 9] <= trunc_ln414_fu_313_p1[10 : 9];
        trunc_ln647_reg_787[10 : 9] <= trunc_ln647_fu_423_p1[10 : 9];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_215_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_num_1_reg_685 <= data_num_1_fu_243_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_reg_666 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        data_part_1_reg_691 <= data_part_1_fu_251_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_part_num_reg_670 <= data_part_num_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_215_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_part_reg_680 <= data_part_fu_237_p2;
        trunc_ln37_reg_675 <= trunc_ln37_fu_227_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        datapop_local_V_addr_reg_793_pp0_iter2_reg <= datapop_local_V_addr_reg_793;
        icmp_ln37_reg_666 <= icmp_ln37_fu_215_p2;
        icmp_ln37_reg_666_pp0_iter1_reg <= icmp_ln37_reg_666;
        icmp_ln37_reg_666_pp0_iter2_reg <= icmp_ln37_reg_666_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_reg_666 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        input_V_addr_read_reg_713 <= m_axi_input_V_RDATA;
        trunc_ln46_1_reg_703 <= trunc_ln46_1_fu_261_p1;
        trunc_ln46_2_reg_708 <= trunc_ln46_2_fu_265_p1;
        trunc_ln46_reg_698 <= trunc_ln46_fu_257_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_reg_666_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        p_Result_s_reg_798 <= p_Result_s_fu_502_p2;
        tmp_6_reg_804[10 : 9] <= tmp_6_fu_560_p3[10 : 9];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_reg_666_pp0_iter1_reg == 1'd0) & (icmp_ln647_reg_780 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        sub_ln647_1_reg_811[10 : 9] <= sub_ln647_1_fu_567_p2[10 : 9];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_reg_666_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln364_reg_816 <= trunc_ln364_fu_640_p1;
    end
end

always @ (*) begin
    if ((icmp_ln37_fu_215_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_reg_666 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_data_num_0_phi_fu_160_p4 = data_num_1_reg_685;
    end else begin
        ap_phi_mux_data_num_0_phi_fu_160_p4 = data_num_0_reg_156;
    end
end

always @ (*) begin
    if (((icmp_ln37_reg_666 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_data_part_0_phi_fu_149_p4 = data_part_1_reg_691;
    end else begin
        ap_phi_mux_data_part_0_phi_fu_149_p4 = data_part_0_reg_145;
    end
end

always @ (*) begin
    if (((icmp_ln37_reg_666 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_data_part_num_0_phi_fu_171_p4 = data_part_num_reg_670;
    end else begin
        ap_phi_mux_data_part_num_0_phi_fu_171_p4 = data_part_num_0_reg_167;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            data_local_V_address0 = data_local_V_addr_reg_718;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            data_local_V_address0 = sext_ln46_1_fu_278_p1;
        end else begin
            data_local_V_address0 = 'bx;
        end
    end else begin
        data_local_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        data_local_V_ce0 = 1'b1;
    end else begin
        data_local_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_reg_666_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        data_local_V_we0 = shl_ln414_4_reg_775;
    end else begin
        data_local_V_we0 = 128'd0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        datapop_local_V_ce0 = 1'b1;
    end else begin
        datapop_local_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_reg_666_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        datapop_local_V_we0 = 1'b1;
    end else begin
        datapop_local_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp127) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001_ignoreCallOp121) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_popcnt_fu_178_ap_ce = 1'b1;
    end else begin
        grp_popcnt_fu_178_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_V_blk_n_AR = m_axi_input_V_ARREADY;
    end else begin
        input_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln37_reg_666 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        input_V_blk_n_R = m_axi_input_V_RVALID;
    end else begin
        input_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((m_axi_input_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_input_V_ARVALID = 1'b1;
    end else begin
        m_axi_input_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_reg_666 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        m_axi_input_V_RREADY = 1'b1;
    end else begin
        m_axi_input_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((m_axi_input_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln37_fu_215_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln37_fu_215_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Lo_assign_fu_284_p3 = {{data_part_1_reg_691}, {9'd0}};

assign add_ln215_fu_199_p2 = (zext_ln215_1_fu_195_p1 + zext_ln215_fu_191_p1);

assign add_ln46_fu_272_p2 = ($signed(sext_ln46_fu_269_p1) + $signed(17'd131071));

assign and_ln414_1_fu_490_p2 = (xor_ln414_fu_484_p2 & data_local_V_q0);

assign and_ln414_2_fu_496_p2 = (select_ln414_3_fu_460_p3 & and_ln414_fu_478_p2);

assign and_ln414_3_fu_547_p2 = (shl_ln414_3_fu_535_p2 & lshr_ln414_1_fu_541_p2);

assign and_ln414_fu_478_p2 = (shl_ln414_1_fu_466_p2 & lshr_ln414_fu_472_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001_ignoreCallOp127 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((icmp_ln37_reg_666 == 1'd0) & (m_axi_input_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001_ignoreCallOp121 = ((icmp_ln37_reg_666 == 1'd0) & (m_axi_input_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((icmp_ln37_reg_666 == 1'd0) & (m_axi_input_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage1_iter0 = ((icmp_ln37_reg_666 == 1'd0) & (m_axi_input_V_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state10_pp0_stage1_iter0_ignore_call82 = ((icmp_ln37_reg_666 == 1'd0) & (m_axi_input_V_RVALID == 1'b0));
end

assign ap_block_state11_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter1_ignore_call82 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter1_ignore_call82 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter2_ignore_call82 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter2_ignore_call82 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter3_ignore_call82 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0_ignore_call82 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign data_local_V_d0 = (select_ln414_7_fu_529_p3 & and_ln414_3_fu_547_p2);

assign data_num_1_fu_243_p3 = ((trunc_ln37_fu_227_p1[0:0] === 1'b1) ? ap_phi_mux_data_num_0_phi_fu_160_p4 : data_num_fu_231_p2);

assign data_num_fu_231_p2 = (ap_phi_mux_data_num_0_phi_fu_160_p4 + 16'd1);

assign data_part_1_fu_251_p3 = ((trunc_ln37_reg_675[0:0] === 1'b1) ? data_part_reg_680 : 16'd0);

assign data_part_fu_237_p2 = (ap_phi_mux_data_part_0_phi_fu_149_p4 + 16'd1);

assign data_part_num_fu_221_p2 = (ap_phi_mux_data_part_num_0_phi_fu_171_p4 + 12'd1);

assign datapop_local_V_address0 = datapop_local_V_addr_reg_793_pp0_iter2_reg;

assign datapop_local_V_d0 = (zext_ln700_fu_644_p1 + datapop_local_V_q0);

assign icmp_ln37_fu_215_p2 = ((ap_phi_mux_data_part_num_0_phi_fu_171_p4 == 12'd2048) ? 1'b1 : 1'b0);

assign icmp_ln414_1_fu_341_p2 = ((Lo_assign_fu_284_p3 > or_ln46_fu_291_p2) ? 1'b1 : 1'b0);

assign icmp_ln414_fu_300_p2 = ((Lo_assign_fu_284_p3 > or_ln46_fu_291_p2) ? 1'b1 : 1'b0);

assign icmp_ln647_fu_417_p2 = ((Lo_assign_fu_284_p3 > or_ln46_fu_291_p2) ? 1'b1 : 1'b0);

assign lshr_ln414_1_fu_541_p2 = 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 >> zext_ln414_5_fu_517_p1;

assign lshr_ln414_fu_472_p2 = 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 >> zext_ln414_2_fu_447_p1;

assign lshr_ln647_1_fu_628_p2 = 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 >> zext_ln647_1_fu_618_p1;

assign lshr_ln647_fu_622_p2 = select_ln647_1_fu_597_p3 >> zext_ln647_fu_614_p1;

assign m_axi_input_V_ARADDR = zext_ln215_2_fu_205_p1;

assign m_axi_input_V_ARBURST = 2'd0;

assign m_axi_input_V_ARCACHE = 4'd0;

assign m_axi_input_V_ARID = 1'd0;

assign m_axi_input_V_ARLEN = 32'd2048;

assign m_axi_input_V_ARLOCK = 2'd0;

assign m_axi_input_V_ARPROT = 3'd0;

assign m_axi_input_V_ARQOS = 4'd0;

assign m_axi_input_V_ARREGION = 4'd0;

assign m_axi_input_V_ARSIZE = 3'd0;

assign m_axi_input_V_ARUSER = 1'd0;

assign m_axi_input_V_AWADDR = 64'd0;

assign m_axi_input_V_AWBURST = 2'd0;

assign m_axi_input_V_AWCACHE = 4'd0;

assign m_axi_input_V_AWID = 1'd0;

assign m_axi_input_V_AWLEN = 32'd0;

assign m_axi_input_V_AWLOCK = 2'd0;

assign m_axi_input_V_AWPROT = 3'd0;

assign m_axi_input_V_AWQOS = 4'd0;

assign m_axi_input_V_AWREGION = 4'd0;

assign m_axi_input_V_AWSIZE = 3'd0;

assign m_axi_input_V_AWUSER = 1'd0;

assign m_axi_input_V_AWVALID = 1'b0;

assign m_axi_input_V_BREADY = 1'b0;

assign m_axi_input_V_WDATA = 512'd0;

assign m_axi_input_V_WID = 1'd0;

assign m_axi_input_V_WLAST = 1'b0;

assign m_axi_input_V_WSTRB = 64'd0;

assign m_axi_input_V_WUSER = 1'd0;

assign m_axi_input_V_WVALID = 1'b0;

assign or_ln46_fu_291_p2 = (25'd511 | Lo_assign_fu_284_p3);

assign p_Result_1_fu_634_p2 = (lshr_ln647_fu_622_p2 & lshr_ln647_1_fu_628_p2);

assign p_Result_s_fu_502_p2 = (and_ln414_2_fu_496_p2 | and_ln414_1_fu_490_p2);

assign select_ln414_1_fu_432_p3 = ((icmp_ln414_reg_723[0:0] === 1'b1) ? trunc_ln414_reg_736 : tmp_1_reg_730);

assign select_ln414_2_fu_323_p3 = ((icmp_ln414_fu_300_p2[0:0] === 1'b1) ? sub_ln414_fu_317_p2 : tmp_1_fu_306_p3);

assign select_ln414_3_fu_460_p3 = ((icmp_ln414_reg_723[0:0] === 1'b1) ? tmp_2_fu_451_p4 : shl_ln414_reg_742);

assign select_ln414_4_fu_364_p3 = ((icmp_ln414_1_fu_341_p2[0:0] === 1'b1) ? tmp_3_fu_347_p3 : trunc_ln414_1_fu_354_p1);

assign select_ln414_5_fu_508_p3 = ((icmp_ln414_1_reg_748[0:0] === 1'b1) ? trunc_ln414_1_reg_759 : tmp_3_reg_754);

assign select_ln414_6_fu_372_p3 = ((icmp_ln414_1_fu_341_p2[0:0] === 1'b1) ? sub_ln414_2_fu_358_p2 : tmp_3_fu_347_p3);

assign select_ln414_7_fu_529_p3 = ((icmp_ln414_1_reg_748[0:0] === 1'b1) ? tmp_4_fu_520_p4 : shl_ln414_2_reg_769);

assign select_ln414_fu_427_p3 = ((icmp_ln414_reg_723[0:0] === 1'b1) ? tmp_1_reg_730 : trunc_ln414_reg_736);

assign select_ln647_1_fu_597_p3 = ((icmp_ln647_reg_780[0:0] === 1'b1) ? tmp_7_fu_573_p4 : p_Result_s_reg_798);

assign select_ln647_2_fu_603_p3 = ((icmp_ln647_reg_780[0:0] === 1'b1) ? sub_ln647_1_reg_811 : tmp_6_reg_804);

assign select_ln647_fu_590_p3 = ((icmp_ln647_reg_780[0:0] === 1'b1) ? sub_ln647_fu_582_p2 : sub_ln647_2_fu_586_p2);

assign sext_ln414_fu_403_p1 = $signed(tmp_5_fu_396_p3);

assign sext_ln46_1_fu_278_p1 = $signed(add_ln46_fu_272_p2);

assign sext_ln46_fu_269_p1 = data_num_1_reg_685;

assign shl_ln414_1_fu_466_p2 = 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 << zext_ln414_1_fu_443_p1;

assign shl_ln414_2_fu_390_p2 = tmp_V_fu_297_p1 << zext_ln414_3_fu_386_p1;

assign shl_ln414_3_fu_535_p2 = 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 << zext_ln414_4_fu_513_p1;

assign shl_ln414_4_fu_411_p2 = 128'd340282366920938463463374607431768211455 << zext_ln414_6_fu_407_p1;

assign shl_ln414_fu_335_p2 = tmp_V_fu_297_p1 << zext_ln414_fu_331_p1;

assign shl_ln_fu_183_p3 = {{chunk_num}, {1'd0}};

assign sub_ln414_1_fu_437_p2 = (11'd1023 - select_ln414_fu_427_p3);

assign sub_ln414_2_fu_358_p2 = (11'd1023 - tmp_3_fu_347_p3);

assign sub_ln414_3_fu_380_p2 = (11'd1023 - select_ln414_4_fu_364_p3);

assign sub_ln414_fu_317_p2 = (11'd1023 - tmp_1_fu_306_p3);

assign sub_ln647_1_fu_567_p2 = (11'd1023 - tmp_6_fu_560_p3);

assign sub_ln647_2_fu_586_p2 = (trunc_ln647_reg_787 - tmp_6_reg_804);

assign sub_ln647_3_fu_608_p2 = (11'd1023 - select_ln647_fu_590_p3);

assign sub_ln647_fu_582_p2 = (tmp_6_reg_804 - trunc_ln647_reg_787);

assign tmp_1_fu_306_p3 = {{trunc_ln46_2_reg_708}, {9'd0}};

integer ap_tvar_int_0;

always @ (shl_ln414_reg_742) begin
    for (ap_tvar_int_0 = 1024 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 1023 - 0) begin
            tmp_2_fu_451_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_2_fu_451_p4[ap_tvar_int_0] = shl_ln414_reg_742[1023 - ap_tvar_int_0];
        end
    end
end

assign tmp_3_fu_347_p3 = {{trunc_ln46_1_reg_703}, {9'd0}};

integer ap_tvar_int_1;

always @ (shl_ln414_2_reg_769) begin
    for (ap_tvar_int_1 = 1024 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 1023 - 0) begin
            tmp_4_fu_520_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_4_fu_520_p4[ap_tvar_int_1] = shl_ln414_2_reg_769[1023 - ap_tvar_int_1];
        end
    end
end

assign tmp_5_fu_396_p3 = {{data_part_1_reg_691}, {6'd0}};

assign tmp_6_fu_560_p3 = {{trunc_ln46_reg_698}, {9'd0}};

integer ap_tvar_int_2;

always @ (p_Result_s_reg_798) begin
    for (ap_tvar_int_2 = 1024 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 1023 - 0) begin
            tmp_7_fu_573_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_7_fu_573_p4[ap_tvar_int_2] = p_Result_s_reg_798[1023 - ap_tvar_int_2];
        end
    end
end

assign tmp_V_fu_297_p1 = input_V_addr_read_reg_713;

assign trunc_ln364_fu_640_p1 = p_Result_1_fu_634_p2[511:0];

assign trunc_ln37_fu_227_p1 = ap_phi_mux_data_part_num_0_phi_fu_171_p4[0:0];

assign trunc_ln414_1_fu_354_p1 = or_ln46_fu_291_p2[10:0];

assign trunc_ln414_fu_313_p1 = or_ln46_fu_291_p2[10:0];

assign trunc_ln46_1_fu_261_p1 = data_part_1_fu_251_p3[1:0];

assign trunc_ln46_2_fu_265_p1 = data_part_1_fu_251_p3[1:0];

assign trunc_ln46_fu_257_p1 = data_part_1_fu_251_p3[1:0];

assign trunc_ln647_fu_423_p1 = or_ln46_fu_291_p2[10:0];

assign xor_ln414_fu_484_p2 = (1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 ^ and_ln414_fu_478_p2);

assign zext_ln215_1_fu_195_p1 = input_V_offset;

assign zext_ln215_2_fu_205_p1 = add_ln215_reg_655;

assign zext_ln215_fu_191_p1 = shl_ln_fu_183_p3;

assign zext_ln414_1_fu_443_p1 = select_ln414_1_fu_432_p3;

assign zext_ln414_2_fu_447_p1 = sub_ln414_1_fu_437_p2;

assign zext_ln414_3_fu_386_p1 = select_ln414_6_fu_372_p3;

assign zext_ln414_4_fu_513_p1 = select_ln414_5_fu_508_p3;

assign zext_ln414_5_fu_517_p1 = sub_ln414_3_reg_764;

assign zext_ln414_6_fu_407_p1 = $unsigned(sext_ln414_fu_403_p1);

assign zext_ln414_fu_331_p1 = select_ln414_2_fu_323_p3;

assign zext_ln647_1_fu_618_p1 = sub_ln647_3_fu_608_p2;

assign zext_ln647_fu_614_p1 = select_ln647_2_fu_603_p3;

assign zext_ln700_fu_644_p1 = grp_popcnt_fu_178_ap_return;

always @ (posedge ap_clk) begin
    tmp_1_reg_730[8:0] <= 9'b000000000;
    trunc_ln414_reg_736[8:0] <= 9'b111111111;
    tmp_3_reg_754[8:0] <= 9'b000000000;
    trunc_ln414_1_reg_759[8:0] <= 9'b111111111;
    trunc_ln647_reg_787[8:0] <= 9'b111111111;
    tmp_6_reg_804[8:0] <= 9'b000000000;
    sub_ln647_1_reg_811[8:0] <= 9'b111111111;
end

endmodule //tancalc_data_read_1
