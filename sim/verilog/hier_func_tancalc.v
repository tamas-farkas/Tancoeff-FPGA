// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hier_func_tancalc (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        m_axi_tancalc_input_V_AWVALID,
        m_axi_tancalc_input_V_AWREADY,
        m_axi_tancalc_input_V_AWADDR,
        m_axi_tancalc_input_V_AWID,
        m_axi_tancalc_input_V_AWLEN,
        m_axi_tancalc_input_V_AWSIZE,
        m_axi_tancalc_input_V_AWBURST,
        m_axi_tancalc_input_V_AWLOCK,
        m_axi_tancalc_input_V_AWCACHE,
        m_axi_tancalc_input_V_AWPROT,
        m_axi_tancalc_input_V_AWQOS,
        m_axi_tancalc_input_V_AWREGION,
        m_axi_tancalc_input_V_AWUSER,
        m_axi_tancalc_input_V_WVALID,
        m_axi_tancalc_input_V_WREADY,
        m_axi_tancalc_input_V_WDATA,
        m_axi_tancalc_input_V_WSTRB,
        m_axi_tancalc_input_V_WLAST,
        m_axi_tancalc_input_V_WID,
        m_axi_tancalc_input_V_WUSER,
        m_axi_tancalc_input_V_ARVALID,
        m_axi_tancalc_input_V_ARREADY,
        m_axi_tancalc_input_V_ARADDR,
        m_axi_tancalc_input_V_ARID,
        m_axi_tancalc_input_V_ARLEN,
        m_axi_tancalc_input_V_ARSIZE,
        m_axi_tancalc_input_V_ARBURST,
        m_axi_tancalc_input_V_ARLOCK,
        m_axi_tancalc_input_V_ARCACHE,
        m_axi_tancalc_input_V_ARPROT,
        m_axi_tancalc_input_V_ARQOS,
        m_axi_tancalc_input_V_ARREGION,
        m_axi_tancalc_input_V_ARUSER,
        m_axi_tancalc_input_V_RVALID,
        m_axi_tancalc_input_V_RREADY,
        m_axi_tancalc_input_V_RDATA,
        m_axi_tancalc_input_V_RLAST,
        m_axi_tancalc_input_V_RID,
        m_axi_tancalc_input_V_RUSER,
        m_axi_tancalc_input_V_RRESP,
        m_axi_tancalc_input_V_BVALID,
        m_axi_tancalc_input_V_BREADY,
        m_axi_tancalc_input_V_BRESP,
        m_axi_tancalc_input_V_BID,
        m_axi_tancalc_input_V_BUSER,
        tancalc_input_V_offset,
        tancalc_output_line_1_V_V_din,
        tancalc_output_line_1_V_V_full_n,
        tancalc_output_line_1_V_V_write,
        tancalc_output_line_2_V_V_din,
        tancalc_output_line_2_V_V_full_n,
        tancalc_output_line_2_V_V_write,
        tancalc_output_line_3_V_V_din,
        tancalc_output_line_3_V_V_full_n,
        tancalc_output_line_3_V_V_write,
        tancalc_output_line_4_V_V_din,
        tancalc_output_line_4_V_V_full_n,
        tancalc_output_line_4_V_V_write,
        tancalc_output_line_5_V_V_din,
        tancalc_output_line_5_V_V_full_n,
        tancalc_output_line_5_V_V_write,
        tancalc_output_line_6_V_V_din,
        tancalc_output_line_6_V_V_full_n,
        tancalc_output_line_6_V_V_write,
        tancalc_output_line_7_V_V_din,
        tancalc_output_line_7_V_V_full_n,
        tancalc_output_line_7_V_V_write,
        tancalc_output_line_8_V_V_din,
        tancalc_output_line_8_V_V_full_n,
        tancalc_output_line_8_V_V_write,
        tancalc_output_line_9_V_V_din,
        tancalc_output_line_9_V_V_full_n,
        tancalc_output_line_9_V_V_write,
        tancalc_output_line_10_V_V_din,
        tancalc_output_line_10_V_V_full_n,
        tancalc_output_line_10_V_V_write,
        tancalc_output_line_11_V_V_din,
        tancalc_output_line_11_V_V_full_n,
        tancalc_output_line_11_V_V_write,
        tancalc_output_line_12_V_V_din,
        tancalc_output_line_12_V_V_full_n,
        tancalc_output_line_12_V_V_write,
        tancalc_output_line_13_V_V_din,
        tancalc_output_line_13_V_V_full_n,
        tancalc_output_line_13_V_V_write,
        tancalc_output_line_14_V_V_din,
        tancalc_output_line_14_V_V_full_n,
        tancalc_output_line_14_V_V_write,
        tancalc_output_line_15_V_V_din,
        tancalc_output_line_15_V_V_full_n,
        tancalc_output_line_15_V_V_write
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_pp0_stage0 = 14'd512;
parameter    ap_ST_fsm_state14 = 14'd1024;
parameter    ap_ST_fsm_pp1_stage0 = 14'd2048;
parameter    ap_ST_fsm_pp1_stage1 = 14'd4096;
parameter    ap_ST_fsm_state25 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output   m_axi_tancalc_input_V_AWVALID;
input   m_axi_tancalc_input_V_AWREADY;
output  [63:0] m_axi_tancalc_input_V_AWADDR;
output  [0:0] m_axi_tancalc_input_V_AWID;
output  [31:0] m_axi_tancalc_input_V_AWLEN;
output  [2:0] m_axi_tancalc_input_V_AWSIZE;
output  [1:0] m_axi_tancalc_input_V_AWBURST;
output  [1:0] m_axi_tancalc_input_V_AWLOCK;
output  [3:0] m_axi_tancalc_input_V_AWCACHE;
output  [2:0] m_axi_tancalc_input_V_AWPROT;
output  [3:0] m_axi_tancalc_input_V_AWQOS;
output  [3:0] m_axi_tancalc_input_V_AWREGION;
output  [0:0] m_axi_tancalc_input_V_AWUSER;
output   m_axi_tancalc_input_V_WVALID;
input   m_axi_tancalc_input_V_WREADY;
output  [15:0] m_axi_tancalc_input_V_WDATA;
output  [1:0] m_axi_tancalc_input_V_WSTRB;
output   m_axi_tancalc_input_V_WLAST;
output  [0:0] m_axi_tancalc_input_V_WID;
output  [0:0] m_axi_tancalc_input_V_WUSER;
output   m_axi_tancalc_input_V_ARVALID;
input   m_axi_tancalc_input_V_ARREADY;
output  [63:0] m_axi_tancalc_input_V_ARADDR;
output  [0:0] m_axi_tancalc_input_V_ARID;
output  [31:0] m_axi_tancalc_input_V_ARLEN;
output  [2:0] m_axi_tancalc_input_V_ARSIZE;
output  [1:0] m_axi_tancalc_input_V_ARBURST;
output  [1:0] m_axi_tancalc_input_V_ARLOCK;
output  [3:0] m_axi_tancalc_input_V_ARCACHE;
output  [2:0] m_axi_tancalc_input_V_ARPROT;
output  [3:0] m_axi_tancalc_input_V_ARQOS;
output  [3:0] m_axi_tancalc_input_V_ARREGION;
output  [0:0] m_axi_tancalc_input_V_ARUSER;
input   m_axi_tancalc_input_V_RVALID;
output   m_axi_tancalc_input_V_RREADY;
input  [15:0] m_axi_tancalc_input_V_RDATA;
input   m_axi_tancalc_input_V_RLAST;
input  [0:0] m_axi_tancalc_input_V_RID;
input  [0:0] m_axi_tancalc_input_V_RUSER;
input  [1:0] m_axi_tancalc_input_V_RRESP;
input   m_axi_tancalc_input_V_BVALID;
output   m_axi_tancalc_input_V_BREADY;
input  [1:0] m_axi_tancalc_input_V_BRESP;
input  [0:0] m_axi_tancalc_input_V_BID;
input  [0:0] m_axi_tancalc_input_V_BUSER;
input  [63:0] tancalc_input_V_offset;
output  [9:0] tancalc_output_line_1_V_V_din;
input   tancalc_output_line_1_V_V_full_n;
output   tancalc_output_line_1_V_V_write;
output  [9:0] tancalc_output_line_2_V_V_din;
input   tancalc_output_line_2_V_V_full_n;
output   tancalc_output_line_2_V_V_write;
output  [9:0] tancalc_output_line_3_V_V_din;
input   tancalc_output_line_3_V_V_full_n;
output   tancalc_output_line_3_V_V_write;
output  [9:0] tancalc_output_line_4_V_V_din;
input   tancalc_output_line_4_V_V_full_n;
output   tancalc_output_line_4_V_V_write;
output  [9:0] tancalc_output_line_5_V_V_din;
input   tancalc_output_line_5_V_V_full_n;
output   tancalc_output_line_5_V_V_write;
output  [9:0] tancalc_output_line_6_V_V_din;
input   tancalc_output_line_6_V_V_full_n;
output   tancalc_output_line_6_V_V_write;
output  [9:0] tancalc_output_line_7_V_V_din;
input   tancalc_output_line_7_V_V_full_n;
output   tancalc_output_line_7_V_V_write;
output  [9:0] tancalc_output_line_8_V_V_din;
input   tancalc_output_line_8_V_V_full_n;
output   tancalc_output_line_8_V_V_write;
output  [9:0] tancalc_output_line_9_V_V_din;
input   tancalc_output_line_9_V_V_full_n;
output   tancalc_output_line_9_V_V_write;
output  [9:0] tancalc_output_line_10_V_V_din;
input   tancalc_output_line_10_V_V_full_n;
output   tancalc_output_line_10_V_V_write;
output  [9:0] tancalc_output_line_11_V_V_din;
input   tancalc_output_line_11_V_V_full_n;
output   tancalc_output_line_11_V_V_write;
output  [9:0] tancalc_output_line_12_V_V_din;
input   tancalc_output_line_12_V_V_full_n;
output   tancalc_output_line_12_V_V_write;
output  [9:0] tancalc_output_line_13_V_V_din;
input   tancalc_output_line_13_V_V_full_n;
output   tancalc_output_line_13_V_V_write;
output  [9:0] tancalc_output_line_14_V_V_din;
input   tancalc_output_line_14_V_V_full_n;
output   tancalc_output_line_14_V_V_write;
output  [9:0] tancalc_output_line_15_V_V_din;
input   tancalc_output_line_15_V_V_full_n;
output   tancalc_output_line_15_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg m_axi_tancalc_input_V_ARVALID;
reg[63:0] m_axi_tancalc_input_V_ARADDR;
reg[31:0] m_axi_tancalc_input_V_ARLEN;
reg m_axi_tancalc_input_V_RREADY;
reg tancalc_output_line_1_V_V_write;
reg tancalc_output_line_2_V_V_write;
reg tancalc_output_line_3_V_V_write;
reg tancalc_output_line_4_V_V_write;
reg tancalc_output_line_5_V_V_write;
reg tancalc_output_line_6_V_V_write;
reg tancalc_output_line_7_V_V_write;
reg tancalc_output_line_8_V_V_write;
reg tancalc_output_line_9_V_V_write;
reg tancalc_output_line_10_V_V_write;
reg tancalc_output_line_11_V_V_write;
reg tancalc_output_line_12_V_V_write;
reg tancalc_output_line_13_V_V_write;
reg tancalc_output_line_14_V_V_write;
reg tancalc_output_line_15_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    tancalc_input_V_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    tancalc_input_V_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage1;
reg   [0:0] icmp_ln88_reg_1987;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter4;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln88_reg_1987_pp1_iter3_reg;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] icmp_ln88_reg_1987_pp1_iter4_reg;
reg    tancalc_output_line_1_V_V_blk_n;
reg    tancalc_output_line_2_V_V_blk_n;
reg    tancalc_output_line_3_V_V_blk_n;
reg    tancalc_output_line_4_V_V_blk_n;
reg    tancalc_output_line_5_V_V_blk_n;
reg    tancalc_output_line_6_V_V_blk_n;
reg    tancalc_output_line_7_V_V_blk_n;
reg    tancalc_output_line_8_V_V_blk_n;
reg    tancalc_output_line_9_V_V_blk_n;
reg    tancalc_output_line_10_V_V_blk_n;
reg    tancalc_output_line_11_V_V_blk_n;
reg    tancalc_output_line_12_V_V_blk_n;
reg    tancalc_output_line_13_V_V_blk_n;
reg    tancalc_output_line_14_V_V_blk_n;
reg    tancalc_output_line_15_V_V_blk_n;
reg   [5:0] data_part_num_0_i23_reg_527;
reg   [6:0] data_num_0_reg_538;
wire   [63:0] zext_ln71_fu_671_p1;
reg   [63:0] zext_ln71_reg_1905;
reg    ap_block_state1;
wire   [2:0] cmpr_chunk_num_fu_681_p2;
reg   [2:0] cmpr_chunk_num_reg_1915;
wire    ap_CS_fsm_state2;
reg   [63:0] tancalc_input_V_addr_reg_1920;
wire   [0:0] icmp_ln85_fu_675_p2;
wire   [0:0] icmp_ln26_fu_716_p2;
wire    ap_block_state10_pp0_stage0_iter0;
reg    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
wire    ap_block_state13_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [5:0] data_part_num_fu_722_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] trunc_ln26_fu_728_p1;
reg   [0:0] trunc_ln26_reg_1935;
reg   [0:0] trunc_ln26_reg_1935_pp0_iter1_reg;
reg   [0:0] trunc_ln26_reg_1935_pp0_iter2_reg;
reg   [3:0] trunc_ln28_1_reg_1939;
reg   [3:0] trunc_ln28_1_reg_1939_pp0_iter1_reg;
reg   [3:0] trunc_ln28_1_reg_1939_pp0_iter2_reg;
reg   [15:0] temp_input_V_reg_1945;
wire   [3:0] add_ln700_13_fu_911_p2;
reg   [3:0] add_ln700_13_reg_1967;
reg   [0:0] p_Result_14_i_reg_1972;
reg    ap_enable_reg_pp0_iter2;
wire   [3:0] add_ln700_28_fu_1339_p2;
reg   [3:0] add_ln700_28_reg_1977;
reg   [0:0] p_Result_14_i1_reg_1982;
wire   [0:0] icmp_ln88_fu_1628_p2;
wire    ap_block_state15_pp1_stage0_iter0;
wire    ap_block_state17_pp1_stage0_iter1;
reg    ap_block_state17_io;
wire    ap_block_state19_pp1_stage0_iter2;
wire    ap_block_state21_pp1_stage0_iter3;
reg    ap_block_state23_pp1_stage0_iter4;
reg    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln88_reg_1987_pp1_iter1_reg;
reg   [0:0] icmp_ln88_reg_1987_pp1_iter2_reg;
wire   [6:0] data_num_fu_1634_p2;
reg   [6:0] data_num_reg_1991;
wire   [6:0] shl_ln90_fu_1640_p2;
reg   [6:0] shl_ln90_reg_1996;
reg   [63:0] tancalc_input_V_addr_1_reg_2001;
reg   [63:0] tancalc_input_V_addr_2_reg_2007;
reg    ap_block_state16_pp1_stage1_iter0;
reg    ap_block_state16_io;
wire    ap_block_state18_pp1_stage1_iter1;
wire    ap_block_state20_pp1_stage1_iter2;
wire    ap_block_state22_pp1_stage1_iter3;
reg    ap_block_state24_pp1_stage1_iter4;
reg    ap_block_pp1_stage1_11001;
wire    ap_CS_fsm_state9;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state10;
reg    ap_enable_reg_pp0_iter3;
wire    ap_CS_fsm_state14;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state15;
reg    ap_block_pp1_stage1_subdone;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg   [2:0] cmpr_chunk_num_0_reg_516;
wire    ap_CS_fsm_state25;
reg   [6:0] ap_phi_mux_data_num_0_phi_fu_542_p4;
wire   [63:0] add_ln219_fu_705_p2;
wire   [63:0] add_ln219_1_fu_1650_p2;
wire   [63:0] add_ln219_2_fu_1670_p2;
reg   [31:0] cmpr_local_15_V_fu_226;
wire   [31:0] cmpr_local_0_V_fu_742_p1;
wire   [31:0] cmpr_local_0_V_2_fu_1086_p3;
reg   [31:0] cmpr_local_15_V_1_fu_230;
reg   [31:0] cmpr_local_15_V_2_fu_234;
reg   [31:0] cmpr_local_15_V_3_fu_238;
reg   [31:0] cmpr_local_15_V_4_fu_242;
reg   [31:0] cmpr_local_15_V_5_fu_246;
reg   [31:0] cmpr_local_15_V_6_fu_250;
reg   [31:0] cmpr_local_15_V_7_fu_254;
reg   [31:0] cmpr_local_15_V_8_fu_258;
reg   [31:0] cmpr_local_15_V_9_fu_262;
reg   [31:0] cmpr_local_15_V_10_fu_266;
reg   [31:0] cmpr_local_15_V_11_fu_270;
reg   [31:0] cmpr_local_15_V_12_fu_274;
reg   [31:0] cmpr_local_15_V_13_fu_278;
reg   [31:0] cmpr_local_15_V_14_fu_282;
reg   [31:0] cmpr_local_15_V_15_fu_286;
reg   [10:0] cmprpop_local_15_V_fu_290;
wire   [10:0] cmprpop_local_0_V_fu_1357_p1;
wire   [10:0] cmprpop_local_0_V_1_fu_1542_p2;
reg   [10:0] cmprpop_local_15_V_1_fu_294;
reg   [10:0] cmprpop_local_15_V_2_fu_298;
reg   [10:0] cmprpop_local_15_V_3_fu_302;
reg   [10:0] cmprpop_local_15_V_4_fu_306;
reg   [10:0] cmprpop_local_15_V_5_fu_310;
reg   [10:0] cmprpop_local_15_V_6_fu_314;
reg   [10:0] cmprpop_local_15_V_7_fu_318;
reg   [10:0] cmprpop_local_15_V_8_fu_322;
reg   [10:0] cmprpop_local_15_V_9_fu_326;
reg   [10:0] cmprpop_local_15_V_10_fu_330;
reg   [10:0] cmprpop_local_15_V_11_fu_334;
reg   [10:0] cmprpop_local_15_V_12_fu_338;
reg   [10:0] cmprpop_local_15_V_13_fu_342;
reg   [10:0] cmprpop_local_15_V_14_fu_346;
reg   [10:0] cmprpop_local_15_V_15_fu_350;
reg    ap_block_pp1_stage1_01001;
wire   [62:0] tancalc_input_V_offset1_fu_661_p4;
wire   [1:0] trunc_ln86_fu_687_p1;
wire   [7:0] or_ln_fu_691_p4;
wire   [63:0] zext_ln219_fu_701_p1;
wire   [0:0] grp_fu_549_p3;
wire   [0:0] grp_fu_556_p3;
wire   [0:0] grp_fu_563_p3;
wire   [1:0] zext_ln700_1_fu_749_p1;
wire   [1:0] zext_ln700_2_fu_753_p1;
wire   [1:0] add_ln700_fu_757_p2;
wire   [1:0] zext_ln791_fu_745_p1;
wire   [1:0] add_ln700_1_fu_763_p2;
wire   [0:0] grp_fu_570_p3;
wire   [0:0] grp_fu_577_p3;
wire   [0:0] grp_fu_584_p3;
wire   [0:0] grp_fu_591_p3;
wire   [2:0] zext_ln700_3_fu_769_p1;
wire   [2:0] zext_ln700_4_fu_773_p1;
wire   [1:0] zext_ln791_2_fu_781_p1;
wire   [1:0] zext_ln700_5_fu_785_p1;
wire   [1:0] add_ln700_3_fu_795_p2;
wire   [1:0] zext_ln791_1_fu_777_p1;
wire   [1:0] add_ln700_4_fu_801_p2;
wire   [2:0] zext_ln700_6_fu_807_p1;
wire   [2:0] add_ln700_2_fu_789_p2;
wire   [2:0] add_ln700_5_fu_811_p2;
wire   [0:0] grp_fu_598_p3;
wire   [0:0] grp_fu_605_p3;
wire   [0:0] grp_fu_612_p3;
wire   [0:0] grp_fu_619_p3;
wire   [0:0] grp_fu_626_p3;
wire   [0:0] grp_fu_633_p3;
wire   [0:0] grp_fu_640_p3;
wire   [0:0] grp_fu_647_p3;
wire   [3:0] zext_ln700_7_fu_817_p1;
wire   [3:0] zext_ln700_8_fu_821_p1;
wire   [1:0] zext_ln791_3_fu_825_p1;
wire   [1:0] zext_ln791_4_fu_829_p1;
wire   [1:0] add_ln700_7_fu_859_p2;
wire   [3:0] zext_ln700_10_fu_865_p1;
wire   [3:0] add_ln700_6_fu_853_p2;
wire   [1:0] zext_ln791_5_fu_833_p1;
wire   [1:0] zext_ln791_6_fu_837_p1;
wire   [1:0] add_ln700_9_fu_875_p2;
wire   [1:0] zext_ln791_8_fu_845_p1;
wire   [1:0] zext_ln700_9_fu_849_p1;
wire   [1:0] add_ln700_10_fu_885_p2;
wire   [1:0] zext_ln791_7_fu_841_p1;
wire   [1:0] add_ln700_11_fu_891_p2;
wire   [2:0] zext_ln700_12_fu_897_p1;
wire   [2:0] zext_ln700_11_fu_881_p1;
wire   [2:0] add_ln700_12_fu_901_p2;
wire   [3:0] zext_ln700_13_fu_907_p1;
wire   [3:0] add_ln700_8_fu_869_p2;
wire   [31:0] p_Val2_s_fu_1045_p18;
wire   [15:0] data_local_temp_V_fu_1082_p1;
wire   [1:0] zext_ln700_16_fu_1177_p1;
wire   [1:0] zext_ln700_17_fu_1181_p1;
wire   [1:0] add_ln700_15_fu_1185_p2;
wire   [1:0] zext_ln791_9_fu_1173_p1;
wire   [1:0] add_ln700_16_fu_1191_p2;
wire   [2:0] zext_ln700_18_fu_1197_p1;
wire   [2:0] zext_ln700_19_fu_1201_p1;
wire   [1:0] zext_ln791_11_fu_1209_p1;
wire   [1:0] zext_ln700_20_fu_1213_p1;
wire   [1:0] add_ln700_18_fu_1223_p2;
wire   [1:0] zext_ln791_10_fu_1205_p1;
wire   [1:0] add_ln700_19_fu_1229_p2;
wire   [2:0] zext_ln700_21_fu_1235_p1;
wire   [2:0] add_ln700_17_fu_1217_p2;
wire   [2:0] add_ln700_20_fu_1239_p2;
wire   [3:0] zext_ln700_22_fu_1245_p1;
wire   [3:0] zext_ln700_23_fu_1249_p1;
wire   [1:0] zext_ln791_12_fu_1253_p1;
wire   [1:0] zext_ln791_13_fu_1257_p1;
wire   [1:0] add_ln700_22_fu_1287_p2;
wire   [3:0] zext_ln700_25_fu_1293_p1;
wire   [3:0] add_ln700_21_fu_1281_p2;
wire   [1:0] zext_ln791_14_fu_1261_p1;
wire   [1:0] zext_ln791_15_fu_1265_p1;
wire   [1:0] add_ln700_24_fu_1303_p2;
wire   [1:0] zext_ln791_17_fu_1273_p1;
wire   [1:0] zext_ln700_24_fu_1277_p1;
wire   [1:0] add_ln700_25_fu_1313_p2;
wire   [1:0] zext_ln791_16_fu_1269_p1;
wire   [1:0] add_ln700_26_fu_1319_p2;
wire   [2:0] zext_ln700_27_fu_1325_p1;
wire   [2:0] zext_ln700_26_fu_1309_p1;
wire   [2:0] add_ln700_27_fu_1329_p2;
wire   [3:0] zext_ln700_28_fu_1335_p1;
wire   [3:0] add_ln700_23_fu_1297_p2;
wire   [4:0] zext_ln700_14_fu_1345_p1;
wire   [4:0] zext_ln700_15_fu_1348_p1;
wire   [4:0] add_ln700_14_fu_1351_p2;
wire   [4:0] zext_ln700_29_fu_1489_p1;
wire   [4:0] zext_ln700_30_fu_1492_p1;
wire   [4:0] add_ln700_29_fu_1495_p2;
wire   [10:0] tmp_4_fu_1501_p18;
wire   [10:0] zext_ln700_fu_1538_p1;
wire   [63:0] zext_ln90_fu_1646_p1;
wire   [6:0] or_ln219_fu_1661_p2;
wire   [63:0] zext_ln219_1_fu_1666_p1;
reg   [13:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_condition_1399;
reg    ap_condition_1402;
reg    ap_condition_1405;
reg    ap_condition_1408;
reg    ap_condition_1411;
reg    ap_condition_1414;
reg    ap_condition_1417;
reg    ap_condition_1420;
reg    ap_condition_1423;
reg    ap_condition_1426;
reg    ap_condition_1429;
reg    ap_condition_1432;
reg    ap_condition_1435;
reg    ap_condition_1438;
reg    ap_condition_1441;
reg    ap_condition_1444;
reg    ap_condition_1447;
reg    ap_condition_1450;
reg    ap_condition_1453;
reg    ap_condition_1456;
reg    ap_condition_1459;
reg    ap_condition_1462;
reg    ap_condition_1465;
reg    ap_condition_1468;
reg    ap_condition_1471;
reg    ap_condition_1474;
reg    ap_condition_1477;
reg    ap_condition_1480;
reg    ap_condition_1483;
reg    ap_condition_1486;
reg    ap_condition_1489;
reg    ap_condition_1492;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 14'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
end

hier_func_hier_func_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
hier_func_mux_164_32_1_1_U1(
    .din0(cmpr_local_15_V_fu_226),
    .din1(cmpr_local_15_V_1_fu_230),
    .din2(cmpr_local_15_V_2_fu_234),
    .din3(cmpr_local_15_V_3_fu_238),
    .din4(cmpr_local_15_V_4_fu_242),
    .din5(cmpr_local_15_V_5_fu_246),
    .din6(cmpr_local_15_V_6_fu_250),
    .din7(cmpr_local_15_V_7_fu_254),
    .din8(cmpr_local_15_V_8_fu_258),
    .din9(cmpr_local_15_V_9_fu_262),
    .din10(cmpr_local_15_V_10_fu_266),
    .din11(cmpr_local_15_V_11_fu_270),
    .din12(cmpr_local_15_V_12_fu_274),
    .din13(cmpr_local_15_V_13_fu_278),
    .din14(cmpr_local_15_V_14_fu_282),
    .din15(cmpr_local_15_V_15_fu_286),
    .din16(trunc_ln28_1_reg_1939_pp0_iter1_reg),
    .dout(p_Val2_s_fu_1045_p18)
);

hier_func_hier_func_mux_164_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 11 ),
    .din3_WIDTH( 11 ),
    .din4_WIDTH( 11 ),
    .din5_WIDTH( 11 ),
    .din6_WIDTH( 11 ),
    .din7_WIDTH( 11 ),
    .din8_WIDTH( 11 ),
    .din9_WIDTH( 11 ),
    .din10_WIDTH( 11 ),
    .din11_WIDTH( 11 ),
    .din12_WIDTH( 11 ),
    .din13_WIDTH( 11 ),
    .din14_WIDTH( 11 ),
    .din15_WIDTH( 11 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 11 ))
hier_func_mux_164_11_1_1_U2(
    .din0(cmprpop_local_15_V_fu_290),
    .din1(cmprpop_local_15_V_1_fu_294),
    .din2(cmprpop_local_15_V_2_fu_298),
    .din3(cmprpop_local_15_V_3_fu_302),
    .din4(cmprpop_local_15_V_4_fu_306),
    .din5(cmprpop_local_15_V_5_fu_310),
    .din6(cmprpop_local_15_V_6_fu_314),
    .din7(cmprpop_local_15_V_7_fu_318),
    .din8(cmprpop_local_15_V_8_fu_322),
    .din9(cmprpop_local_15_V_9_fu_326),
    .din10(cmprpop_local_15_V_10_fu_330),
    .din11(cmprpop_local_15_V_11_fu_334),
    .din12(cmprpop_local_15_V_12_fu_338),
    .din13(cmprpop_local_15_V_13_fu_342),
    .din14(cmprpop_local_15_V_14_fu_346),
    .din15(cmprpop_local_15_V_15_fu_350),
    .din16(trunc_ln28_1_reg_1939_pp0_iter2_reg),
    .dout(tmp_4_fu_1501_p18)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln85_fu_675_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state10)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state15) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        cmpr_chunk_num_0_reg_516 <= cmpr_chunk_num_reg_1915;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cmpr_chunk_num_0_reg_516 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1399)) begin
        if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd1)) begin
            cmpr_local_15_V_10_fu_266 <= cmpr_local_0_V_2_fu_1086_p3;
        end else if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd0)) begin
            cmpr_local_15_V_10_fu_266 <= cmpr_local_0_V_fu_742_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1402)) begin
        if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd1)) begin
            cmpr_local_15_V_11_fu_270 <= cmpr_local_0_V_2_fu_1086_p3;
        end else if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd0)) begin
            cmpr_local_15_V_11_fu_270 <= cmpr_local_0_V_fu_742_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1405)) begin
        if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd1)) begin
            cmpr_local_15_V_12_fu_274 <= cmpr_local_0_V_2_fu_1086_p3;
        end else if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd0)) begin
            cmpr_local_15_V_12_fu_274 <= cmpr_local_0_V_fu_742_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1408)) begin
        if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd1)) begin
            cmpr_local_15_V_13_fu_278 <= cmpr_local_0_V_2_fu_1086_p3;
        end else if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd0)) begin
            cmpr_local_15_V_13_fu_278 <= cmpr_local_0_V_fu_742_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1411)) begin
        if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd1)) begin
            cmpr_local_15_V_14_fu_282 <= cmpr_local_0_V_2_fu_1086_p3;
        end else if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd0)) begin
            cmpr_local_15_V_14_fu_282 <= cmpr_local_0_V_fu_742_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1414)) begin
        if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd1)) begin
            cmpr_local_15_V_15_fu_286 <= cmpr_local_0_V_2_fu_1086_p3;
        end else if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd0)) begin
            cmpr_local_15_V_15_fu_286 <= cmpr_local_0_V_fu_742_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1417)) begin
        if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd1)) begin
            cmpr_local_15_V_1_fu_230 <= cmpr_local_0_V_2_fu_1086_p3;
        end else if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd0)) begin
            cmpr_local_15_V_1_fu_230 <= cmpr_local_0_V_fu_742_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1420)) begin
        if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd1)) begin
            cmpr_local_15_V_2_fu_234 <= cmpr_local_0_V_2_fu_1086_p3;
        end else if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd0)) begin
            cmpr_local_15_V_2_fu_234 <= cmpr_local_0_V_fu_742_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1423)) begin
        if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd1)) begin
            cmpr_local_15_V_3_fu_238 <= cmpr_local_0_V_2_fu_1086_p3;
        end else if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd0)) begin
            cmpr_local_15_V_3_fu_238 <= cmpr_local_0_V_fu_742_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1426)) begin
        if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd1)) begin
            cmpr_local_15_V_4_fu_242 <= cmpr_local_0_V_2_fu_1086_p3;
        end else if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd0)) begin
            cmpr_local_15_V_4_fu_242 <= cmpr_local_0_V_fu_742_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1429)) begin
        if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd1)) begin
            cmpr_local_15_V_5_fu_246 <= cmpr_local_0_V_2_fu_1086_p3;
        end else if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd0)) begin
            cmpr_local_15_V_5_fu_246 <= cmpr_local_0_V_fu_742_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1432)) begin
        if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd1)) begin
            cmpr_local_15_V_6_fu_250 <= cmpr_local_0_V_2_fu_1086_p3;
        end else if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd0)) begin
            cmpr_local_15_V_6_fu_250 <= cmpr_local_0_V_fu_742_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1435)) begin
        if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd1)) begin
            cmpr_local_15_V_7_fu_254 <= cmpr_local_0_V_2_fu_1086_p3;
        end else if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd0)) begin
            cmpr_local_15_V_7_fu_254 <= cmpr_local_0_V_fu_742_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1438)) begin
        if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd1)) begin
            cmpr_local_15_V_8_fu_258 <= cmpr_local_0_V_2_fu_1086_p3;
        end else if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd0)) begin
            cmpr_local_15_V_8_fu_258 <= cmpr_local_0_V_fu_742_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1441)) begin
        if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd1)) begin
            cmpr_local_15_V_9_fu_262 <= cmpr_local_0_V_2_fu_1086_p3;
        end else if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd0)) begin
            cmpr_local_15_V_9_fu_262 <= cmpr_local_0_V_fu_742_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1444)) begin
        if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd1)) begin
            cmpr_local_15_V_fu_226 <= cmpr_local_0_V_2_fu_1086_p3;
        end else if ((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd0)) begin
            cmpr_local_15_V_fu_226 <= cmpr_local_0_V_fu_742_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1447)) begin
        if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd1)) begin
            cmprpop_local_15_V_10_fu_330 <= cmprpop_local_0_V_1_fu_1542_p2;
        end else if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd0)) begin
            cmprpop_local_15_V_10_fu_330 <= cmprpop_local_0_V_fu_1357_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1450)) begin
        if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd1)) begin
            cmprpop_local_15_V_11_fu_334 <= cmprpop_local_0_V_1_fu_1542_p2;
        end else if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd0)) begin
            cmprpop_local_15_V_11_fu_334 <= cmprpop_local_0_V_fu_1357_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1453)) begin
        if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd1)) begin
            cmprpop_local_15_V_12_fu_338 <= cmprpop_local_0_V_1_fu_1542_p2;
        end else if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd0)) begin
            cmprpop_local_15_V_12_fu_338 <= cmprpop_local_0_V_fu_1357_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1456)) begin
        if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd1)) begin
            cmprpop_local_15_V_13_fu_342 <= cmprpop_local_0_V_1_fu_1542_p2;
        end else if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd0)) begin
            cmprpop_local_15_V_13_fu_342 <= cmprpop_local_0_V_fu_1357_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1459)) begin
        if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd1)) begin
            cmprpop_local_15_V_14_fu_346 <= cmprpop_local_0_V_1_fu_1542_p2;
        end else if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd0)) begin
            cmprpop_local_15_V_14_fu_346 <= cmprpop_local_0_V_fu_1357_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1462)) begin
        if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd1)) begin
            cmprpop_local_15_V_15_fu_350 <= cmprpop_local_0_V_1_fu_1542_p2;
        end else if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd0)) begin
            cmprpop_local_15_V_15_fu_350 <= cmprpop_local_0_V_fu_1357_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1465)) begin
        if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd1)) begin
            cmprpop_local_15_V_1_fu_294 <= cmprpop_local_0_V_1_fu_1542_p2;
        end else if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd0)) begin
            cmprpop_local_15_V_1_fu_294 <= cmprpop_local_0_V_fu_1357_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1468)) begin
        if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd1)) begin
            cmprpop_local_15_V_2_fu_298 <= cmprpop_local_0_V_1_fu_1542_p2;
        end else if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd0)) begin
            cmprpop_local_15_V_2_fu_298 <= cmprpop_local_0_V_fu_1357_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1471)) begin
        if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd1)) begin
            cmprpop_local_15_V_3_fu_302 <= cmprpop_local_0_V_1_fu_1542_p2;
        end else if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd0)) begin
            cmprpop_local_15_V_3_fu_302 <= cmprpop_local_0_V_fu_1357_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1474)) begin
        if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd1)) begin
            cmprpop_local_15_V_4_fu_306 <= cmprpop_local_0_V_1_fu_1542_p2;
        end else if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd0)) begin
            cmprpop_local_15_V_4_fu_306 <= cmprpop_local_0_V_fu_1357_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1477)) begin
        if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd1)) begin
            cmprpop_local_15_V_5_fu_310 <= cmprpop_local_0_V_1_fu_1542_p2;
        end else if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd0)) begin
            cmprpop_local_15_V_5_fu_310 <= cmprpop_local_0_V_fu_1357_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1480)) begin
        if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd1)) begin
            cmprpop_local_15_V_6_fu_314 <= cmprpop_local_0_V_1_fu_1542_p2;
        end else if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd0)) begin
            cmprpop_local_15_V_6_fu_314 <= cmprpop_local_0_V_fu_1357_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1483)) begin
        if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd1)) begin
            cmprpop_local_15_V_7_fu_318 <= cmprpop_local_0_V_1_fu_1542_p2;
        end else if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd0)) begin
            cmprpop_local_15_V_7_fu_318 <= cmprpop_local_0_V_fu_1357_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1486)) begin
        if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd1)) begin
            cmprpop_local_15_V_8_fu_322 <= cmprpop_local_0_V_1_fu_1542_p2;
        end else if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd0)) begin
            cmprpop_local_15_V_8_fu_322 <= cmprpop_local_0_V_fu_1357_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1489)) begin
        if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd1)) begin
            cmprpop_local_15_V_9_fu_326 <= cmprpop_local_0_V_1_fu_1542_p2;
        end else if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd0)) begin
            cmprpop_local_15_V_9_fu_326 <= cmprpop_local_0_V_fu_1357_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1492)) begin
        if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd1)) begin
            cmprpop_local_15_V_fu_290 <= cmprpop_local_0_V_1_fu_1542_p2;
        end else if ((trunc_ln26_reg_1935_pp0_iter2_reg == 1'd0)) begin
            cmprpop_local_15_V_fu_290 <= cmprpop_local_0_V_fu_1357_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        data_num_0_reg_538 <= 7'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln88_reg_1987 == 1'd0))) begin
        data_num_0_reg_538 <= data_num_reg_1991;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln26_fu_716_p2 == 1'd0))) begin
        data_part_num_0_i23_reg_527 <= data_part_num_fu_722_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        data_part_num_0_i23_reg_527 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln26_reg_1935_pp0_iter1_reg == 1'd0))) begin
        add_ln700_13_reg_1967 <= add_ln700_13_fu_911_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln700_28_reg_1977 <= add_ln700_28_fu_1339_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cmpr_chunk_num_reg_1915 <= cmpr_chunk_num_fu_681_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        data_num_reg_1991 <= data_num_fu_1634_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln88_reg_1987 <= icmp_ln88_fu_1628_p2;
        icmp_ln88_reg_1987_pp1_iter1_reg <= icmp_ln88_reg_1987;
        icmp_ln88_reg_1987_pp1_iter2_reg <= icmp_ln88_reg_1987_pp1_iter1_reg;
        icmp_ln88_reg_1987_pp1_iter3_reg <= icmp_ln88_reg_1987_pp1_iter2_reg;
        icmp_ln88_reg_1987_pp1_iter4_reg <= icmp_ln88_reg_1987_pp1_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln26_reg_1935_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_Result_14_i1_reg_1982 <= temp_input_V_reg_1945[16'd15];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln26_reg_1935_pp0_iter1_reg == 1'd0))) begin
        p_Result_14_i_reg_1972 <= temp_input_V_reg_1945[16'd15];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln88_fu_1628_p2 == 1'd0))) begin
        shl_ln90_reg_1996[6 : 1] <= shl_ln90_fu_1640_p2[6 : 1];
        tancalc_input_V_addr_1_reg_2001 <= add_ln219_1_fu_1650_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_input_V_addr_2_reg_2007 <= add_ln219_2_fu_1670_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln85_fu_675_p2 == 1'd0))) begin
        tancalc_input_V_addr_reg_1920 <= add_ln219_fu_705_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_input_V_reg_1945 <= m_axi_tancalc_input_V_RDATA;
        trunc_ln26_reg_1935_pp0_iter1_reg <= trunc_ln26_reg_1935;
        trunc_ln28_1_reg_1939_pp0_iter1_reg <= trunc_ln28_1_reg_1939;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln26_fu_716_p2 == 1'd0))) begin
        trunc_ln26_reg_1935 <= trunc_ln26_fu_728_p1;
        trunc_ln28_1_reg_1939 <= {{data_part_num_0_i23_reg_527[4:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        trunc_ln26_reg_1935_pp0_iter2_reg <= trunc_ln26_reg_1935_pp0_iter1_reg;
        trunc_ln28_1_reg_1939_pp0_iter2_reg <= trunc_ln28_1_reg_1939_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        zext_ln71_reg_1905[62 : 0] <= zext_ln71_fu_671_p1[62 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln26_fu_716_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln88_fu_1628_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state15 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state15 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln85_fu_675_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln88_reg_1987 == 1'd0))) begin
        ap_phi_mux_data_num_0_phi_fu_542_p4 = data_num_reg_1991;
    end else begin
        ap_phi_mux_data_num_0_phi_fu_542_p4 = data_num_0_reg_538;
    end
end

always @ (*) begin
    if (((icmp_ln85_fu_675_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln88_reg_1987 == 1'd0))) begin
        m_axi_tancalc_input_V_ARADDR = tancalc_input_V_addr_2_reg_2007;
    end else if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        m_axi_tancalc_input_V_ARADDR = tancalc_input_V_addr_1_reg_2001;
    end else if (((m_axi_tancalc_input_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_tancalc_input_V_ARADDR = tancalc_input_V_addr_reg_1920;
    end else begin
        m_axi_tancalc_input_V_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln88_reg_1987 == 1'd0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0)))) begin
        m_axi_tancalc_input_V_ARLEN = 32'd1;
    end else if (((m_axi_tancalc_input_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_tancalc_input_V_ARLEN = 32'd32;
    end else begin
        m_axi_tancalc_input_V_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln88_reg_1987 == 1'd0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0)) | ((m_axi_tancalc_input_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        m_axi_tancalc_input_V_ARVALID = 1'b1;
    end else begin
        m_axi_tancalc_input_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln88_reg_1987_pp1_iter3_reg == 1'd0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln88_reg_1987_pp1_iter4_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axi_tancalc_input_V_RREADY = 1'b1;
    end else begin
        m_axi_tancalc_input_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln88_reg_1987 == 1'd0)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0)))) begin
        tancalc_input_V_blk_n_AR = m_axi_tancalc_input_V_ARREADY;
    end else begin
        tancalc_input_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln88_reg_1987_pp1_iter3_reg == 1'd0)) | ((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1) & (icmp_ln88_reg_1987_pp1_iter4_reg == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        tancalc_input_V_blk_n_R = m_axi_tancalc_input_V_RVALID;
    end else begin
        tancalc_input_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_10_V_V_blk_n = tancalc_output_line_10_V_V_full_n;
    end else begin
        tancalc_output_line_10_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_10_V_V_write = 1'b1;
    end else begin
        tancalc_output_line_10_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_11_V_V_blk_n = tancalc_output_line_11_V_V_full_n;
    end else begin
        tancalc_output_line_11_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_11_V_V_write = 1'b1;
    end else begin
        tancalc_output_line_11_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_12_V_V_blk_n = tancalc_output_line_12_V_V_full_n;
    end else begin
        tancalc_output_line_12_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_12_V_V_write = 1'b1;
    end else begin
        tancalc_output_line_12_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_13_V_V_blk_n = tancalc_output_line_13_V_V_full_n;
    end else begin
        tancalc_output_line_13_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_13_V_V_write = 1'b1;
    end else begin
        tancalc_output_line_13_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_14_V_V_blk_n = tancalc_output_line_14_V_V_full_n;
    end else begin
        tancalc_output_line_14_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_14_V_V_write = 1'b1;
    end else begin
        tancalc_output_line_14_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_15_V_V_blk_n = tancalc_output_line_15_V_V_full_n;
    end else begin
        tancalc_output_line_15_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_15_V_V_write = 1'b1;
    end else begin
        tancalc_output_line_15_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_1_V_V_blk_n = tancalc_output_line_1_V_V_full_n;
    end else begin
        tancalc_output_line_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_1_V_V_write = 1'b1;
    end else begin
        tancalc_output_line_1_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_2_V_V_blk_n = tancalc_output_line_2_V_V_full_n;
    end else begin
        tancalc_output_line_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_2_V_V_write = 1'b1;
    end else begin
        tancalc_output_line_2_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_3_V_V_blk_n = tancalc_output_line_3_V_V_full_n;
    end else begin
        tancalc_output_line_3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_3_V_V_write = 1'b1;
    end else begin
        tancalc_output_line_3_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_4_V_V_blk_n = tancalc_output_line_4_V_V_full_n;
    end else begin
        tancalc_output_line_4_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_4_V_V_write = 1'b1;
    end else begin
        tancalc_output_line_4_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_5_V_V_blk_n = tancalc_output_line_5_V_V_full_n;
    end else begin
        tancalc_output_line_5_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_5_V_V_write = 1'b1;
    end else begin
        tancalc_output_line_5_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_6_V_V_blk_n = tancalc_output_line_6_V_V_full_n;
    end else begin
        tancalc_output_line_6_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_6_V_V_write = 1'b1;
    end else begin
        tancalc_output_line_6_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_7_V_V_blk_n = tancalc_output_line_7_V_V_full_n;
    end else begin
        tancalc_output_line_7_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_7_V_V_write = 1'b1;
    end else begin
        tancalc_output_line_7_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_8_V_V_blk_n = tancalc_output_line_8_V_V_full_n;
    end else begin
        tancalc_output_line_8_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_8_V_V_write = 1'b1;
    end else begin
        tancalc_output_line_8_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_9_V_V_blk_n = tancalc_output_line_9_V_V_full_n;
    end else begin
        tancalc_output_line_9_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln88_reg_1987 == 1'd0))) begin
        tancalc_output_line_9_V_V_write = 1'b1;
    end else begin
        tancalc_output_line_9_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln85_fu_675_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((m_axi_tancalc_input_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln26_fu_716_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln26_fu_716_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln88_fu_1628_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln88_fu_1628_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((~((ap_enable_reg_pp1_iter3 == 1'b0) & (1'b0 == ap_block_pp1_stage1_subdone) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter3 == 1'b0) & (1'b0 == ap_block_pp1_stage1_subdone) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln219_1_fu_1650_p2 = (zext_ln90_fu_1646_p1 + zext_ln71_reg_1905);

assign add_ln219_2_fu_1670_p2 = (zext_ln219_1_fu_1666_p1 + zext_ln71_reg_1905);

assign add_ln219_fu_705_p2 = (zext_ln219_fu_701_p1 + zext_ln71_reg_1905);

assign add_ln700_10_fu_885_p2 = (zext_ln791_8_fu_845_p1 + zext_ln700_9_fu_849_p1);

assign add_ln700_11_fu_891_p2 = (add_ln700_10_fu_885_p2 + zext_ln791_7_fu_841_p1);

assign add_ln700_12_fu_901_p2 = (zext_ln700_12_fu_897_p1 + zext_ln700_11_fu_881_p1);

assign add_ln700_13_fu_911_p2 = (zext_ln700_13_fu_907_p1 + add_ln700_8_fu_869_p2);

assign add_ln700_14_fu_1351_p2 = (zext_ln700_14_fu_1345_p1 + zext_ln700_15_fu_1348_p1);

assign add_ln700_15_fu_1185_p2 = (zext_ln700_16_fu_1177_p1 + zext_ln700_17_fu_1181_p1);

assign add_ln700_16_fu_1191_p2 = (add_ln700_15_fu_1185_p2 + zext_ln791_9_fu_1173_p1);

assign add_ln700_17_fu_1217_p2 = (zext_ln700_18_fu_1197_p1 + zext_ln700_19_fu_1201_p1);

assign add_ln700_18_fu_1223_p2 = (zext_ln791_11_fu_1209_p1 + zext_ln700_20_fu_1213_p1);

assign add_ln700_19_fu_1229_p2 = (add_ln700_18_fu_1223_p2 + zext_ln791_10_fu_1205_p1);

assign add_ln700_1_fu_763_p2 = (add_ln700_fu_757_p2 + zext_ln791_fu_745_p1);

assign add_ln700_20_fu_1239_p2 = (zext_ln700_21_fu_1235_p1 + add_ln700_17_fu_1217_p2);

assign add_ln700_21_fu_1281_p2 = (zext_ln700_22_fu_1245_p1 + zext_ln700_23_fu_1249_p1);

assign add_ln700_22_fu_1287_p2 = (zext_ln791_12_fu_1253_p1 + zext_ln791_13_fu_1257_p1);

assign add_ln700_23_fu_1297_p2 = (zext_ln700_25_fu_1293_p1 + add_ln700_21_fu_1281_p2);

assign add_ln700_24_fu_1303_p2 = (zext_ln791_14_fu_1261_p1 + zext_ln791_15_fu_1265_p1);

assign add_ln700_25_fu_1313_p2 = (zext_ln791_17_fu_1273_p1 + zext_ln700_24_fu_1277_p1);

assign add_ln700_26_fu_1319_p2 = (add_ln700_25_fu_1313_p2 + zext_ln791_16_fu_1269_p1);

assign add_ln700_27_fu_1329_p2 = (zext_ln700_27_fu_1325_p1 + zext_ln700_26_fu_1309_p1);

assign add_ln700_28_fu_1339_p2 = (zext_ln700_28_fu_1335_p1 + add_ln700_23_fu_1297_p2);

assign add_ln700_29_fu_1495_p2 = (zext_ln700_29_fu_1489_p1 + zext_ln700_30_fu_1492_p1);

assign add_ln700_2_fu_789_p2 = (zext_ln700_3_fu_769_p1 + zext_ln700_4_fu_773_p1);

assign add_ln700_3_fu_795_p2 = (zext_ln791_2_fu_781_p1 + zext_ln700_5_fu_785_p1);

assign add_ln700_4_fu_801_p2 = (add_ln700_3_fu_795_p2 + zext_ln791_1_fu_777_p1);

assign add_ln700_5_fu_811_p2 = (zext_ln700_6_fu_807_p1 + add_ln700_2_fu_789_p2);

assign add_ln700_6_fu_853_p2 = (zext_ln700_7_fu_817_p1 + zext_ln700_8_fu_821_p1);

assign add_ln700_7_fu_859_p2 = (zext_ln791_3_fu_825_p1 + zext_ln791_4_fu_829_p1);

assign add_ln700_8_fu_869_p2 = (zext_ln700_10_fu_865_p1 + add_ln700_6_fu_853_p2);

assign add_ln700_9_fu_875_p2 = (zext_ln791_5_fu_833_p1 + zext_ln791_6_fu_837_p1);

assign add_ln700_fu_757_p2 = (zext_ln700_1_fu_749_p1 + zext_ln700_2_fu_753_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_tancalc_input_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_tancalc_input_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state17_io) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((m_axi_tancalc_input_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (icmp_ln88_reg_1987_pp1_iter3_reg == 1'd0)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state17_io) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((m_axi_tancalc_input_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (icmp_ln88_reg_1987_pp1_iter3_reg == 1'd0)));
end

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_01001 = (((m_axi_tancalc_input_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (icmp_ln88_reg_1987_pp1_iter4_reg == 1'd0)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (((tancalc_output_line_15_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_14_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_13_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_12_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_11_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_10_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_9_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_8_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_7_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_6_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_5_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_4_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_3_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_2_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_1_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp1_stage1_11001 = (((m_axi_tancalc_input_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (icmp_ln88_reg_1987_pp1_iter4_reg == 1'd0)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state16_io) | ((tancalc_output_line_15_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_14_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_13_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_12_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_11_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_10_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_9_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_8_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_7_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_6_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_5_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_4_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_3_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_2_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_1_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = (((m_axi_tancalc_input_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (icmp_ln88_reg_1987_pp1_iter4_reg == 1'd0)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & ((1'b1 == ap_block_state16_io) | ((tancalc_output_line_15_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_14_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_13_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_12_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_11_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_10_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_9_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_8_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_7_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_6_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_5_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_4_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_3_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_2_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_1_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter1 = (m_axi_tancalc_input_V_RVALID == 1'b0);
end

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_io = ((m_axi_tancalc_input_V_ARREADY == 1'b0) & (icmp_ln88_reg_1987 == 1'd0));
end

always @ (*) begin
    ap_block_state16_pp1_stage1_iter0 = (((tancalc_output_line_15_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_14_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_13_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_12_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_11_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_10_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_9_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_8_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_7_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_6_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_5_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_4_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_3_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_2_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)) | ((tancalc_output_line_1_V_V_full_n == 1'b0) & (icmp_ln88_reg_1987 == 1'd0)));
end

always @ (*) begin
    ap_block_state17_io = ((m_axi_tancalc_input_V_ARREADY == 1'b0) & (icmp_ln88_reg_1987 == 1'd0));
end

assign ap_block_state17_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage1_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23_pp1_stage0_iter4 = ((m_axi_tancalc_input_V_RVALID == 1'b0) & (icmp_ln88_reg_1987_pp1_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_block_state24_pp1_stage1_iter4 = ((m_axi_tancalc_input_V_RVALID == 1'b0) & (icmp_ln88_reg_1987_pp1_iter4_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1399 = ((trunc_ln28_1_reg_1939_pp0_iter1_reg == 4'd10) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_condition_1402 = ((trunc_ln28_1_reg_1939_pp0_iter1_reg == 4'd11) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_condition_1405 = ((trunc_ln28_1_reg_1939_pp0_iter1_reg == 4'd12) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_condition_1408 = ((trunc_ln28_1_reg_1939_pp0_iter1_reg == 4'd13) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_condition_1411 = ((trunc_ln28_1_reg_1939_pp0_iter1_reg == 4'd14) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_condition_1414 = ((trunc_ln28_1_reg_1939_pp0_iter1_reg == 4'd15) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_condition_1417 = ((trunc_ln28_1_reg_1939_pp0_iter1_reg == 4'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_condition_1420 = ((trunc_ln28_1_reg_1939_pp0_iter1_reg == 4'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_condition_1423 = ((trunc_ln28_1_reg_1939_pp0_iter1_reg == 4'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_condition_1426 = ((trunc_ln28_1_reg_1939_pp0_iter1_reg == 4'd4) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_condition_1429 = ((trunc_ln28_1_reg_1939_pp0_iter1_reg == 4'd5) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_condition_1432 = ((trunc_ln28_1_reg_1939_pp0_iter1_reg == 4'd6) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_condition_1435 = ((trunc_ln28_1_reg_1939_pp0_iter1_reg == 4'd7) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_condition_1438 = ((trunc_ln28_1_reg_1939_pp0_iter1_reg == 4'd8) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_condition_1441 = ((trunc_ln28_1_reg_1939_pp0_iter1_reg == 4'd9) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_condition_1444 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln28_1_reg_1939_pp0_iter1_reg == 4'd0));
end

always @ (*) begin
    ap_condition_1447 = ((trunc_ln28_1_reg_1939_pp0_iter2_reg == 4'd10) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_condition_1450 = ((trunc_ln28_1_reg_1939_pp0_iter2_reg == 4'd11) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_condition_1453 = ((trunc_ln28_1_reg_1939_pp0_iter2_reg == 4'd12) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_condition_1456 = ((trunc_ln28_1_reg_1939_pp0_iter2_reg == 4'd13) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_condition_1459 = ((trunc_ln28_1_reg_1939_pp0_iter2_reg == 4'd14) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_condition_1462 = ((trunc_ln28_1_reg_1939_pp0_iter2_reg == 4'd15) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_condition_1465 = ((trunc_ln28_1_reg_1939_pp0_iter2_reg == 4'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_condition_1468 = ((trunc_ln28_1_reg_1939_pp0_iter2_reg == 4'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_condition_1471 = ((trunc_ln28_1_reg_1939_pp0_iter2_reg == 4'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_condition_1474 = ((trunc_ln28_1_reg_1939_pp0_iter2_reg == 4'd4) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_condition_1477 = ((trunc_ln28_1_reg_1939_pp0_iter2_reg == 4'd5) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_condition_1480 = ((trunc_ln28_1_reg_1939_pp0_iter2_reg == 4'd6) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_condition_1483 = ((trunc_ln28_1_reg_1939_pp0_iter2_reg == 4'd7) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_condition_1486 = ((trunc_ln28_1_reg_1939_pp0_iter2_reg == 4'd8) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_condition_1489 = ((trunc_ln28_1_reg_1939_pp0_iter2_reg == 4'd9) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_condition_1492 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln28_1_reg_1939_pp0_iter2_reg == 4'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign cmpr_chunk_num_fu_681_p2 = (cmpr_chunk_num_0_reg_516 + 3'd1);

assign cmpr_local_0_V_2_fu_1086_p3 = {{temp_input_V_reg_1945}, {data_local_temp_V_fu_1082_p1}};

assign cmpr_local_0_V_fu_742_p1 = temp_input_V_reg_1945;

assign cmprpop_local_0_V_1_fu_1542_p2 = (tmp_4_fu_1501_p18 + zext_ln700_fu_1538_p1);

assign cmprpop_local_0_V_fu_1357_p1 = add_ln700_14_fu_1351_p2;

assign data_local_temp_V_fu_1082_p1 = p_Val2_s_fu_1045_p18[15:0];

assign data_num_fu_1634_p2 = (ap_phi_mux_data_num_0_phi_fu_542_p4 + 7'd1);

assign data_part_num_fu_722_p2 = (data_part_num_0_i23_reg_527 + 6'd1);

assign grp_fu_549_p3 = temp_input_V_reg_1945[16'd0];

assign grp_fu_556_p3 = temp_input_V_reg_1945[16'd1];

assign grp_fu_563_p3 = temp_input_V_reg_1945[16'd2];

assign grp_fu_570_p3 = temp_input_V_reg_1945[16'd3];

assign grp_fu_577_p3 = temp_input_V_reg_1945[16'd4];

assign grp_fu_584_p3 = temp_input_V_reg_1945[16'd5];

assign grp_fu_591_p3 = temp_input_V_reg_1945[16'd6];

assign grp_fu_598_p3 = temp_input_V_reg_1945[16'd7];

assign grp_fu_605_p3 = temp_input_V_reg_1945[16'd8];

assign grp_fu_612_p3 = temp_input_V_reg_1945[16'd9];

assign grp_fu_619_p3 = temp_input_V_reg_1945[16'd10];

assign grp_fu_626_p3 = temp_input_V_reg_1945[16'd11];

assign grp_fu_633_p3 = temp_input_V_reg_1945[16'd12];

assign grp_fu_640_p3 = temp_input_V_reg_1945[16'd13];

assign grp_fu_647_p3 = temp_input_V_reg_1945[16'd14];

assign icmp_ln26_fu_716_p2 = ((data_part_num_0_i23_reg_527 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_675_p2 = ((cmpr_chunk_num_0_reg_516 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_1628_p2 = ((ap_phi_mux_data_num_0_phi_fu_542_p4 == 7'd64) ? 1'b1 : 1'b0);

assign m_axi_tancalc_input_V_ARBURST = 2'd0;

assign m_axi_tancalc_input_V_ARCACHE = 4'd0;

assign m_axi_tancalc_input_V_ARID = 1'd0;

assign m_axi_tancalc_input_V_ARLOCK = 2'd0;

assign m_axi_tancalc_input_V_ARPROT = 3'd0;

assign m_axi_tancalc_input_V_ARQOS = 4'd0;

assign m_axi_tancalc_input_V_ARREGION = 4'd0;

assign m_axi_tancalc_input_V_ARSIZE = 3'd0;

assign m_axi_tancalc_input_V_ARUSER = 1'd0;

assign m_axi_tancalc_input_V_AWADDR = 64'd0;

assign m_axi_tancalc_input_V_AWBURST = 2'd0;

assign m_axi_tancalc_input_V_AWCACHE = 4'd0;

assign m_axi_tancalc_input_V_AWID = 1'd0;

assign m_axi_tancalc_input_V_AWLEN = 32'd0;

assign m_axi_tancalc_input_V_AWLOCK = 2'd0;

assign m_axi_tancalc_input_V_AWPROT = 3'd0;

assign m_axi_tancalc_input_V_AWQOS = 4'd0;

assign m_axi_tancalc_input_V_AWREGION = 4'd0;

assign m_axi_tancalc_input_V_AWSIZE = 3'd0;

assign m_axi_tancalc_input_V_AWUSER = 1'd0;

assign m_axi_tancalc_input_V_AWVALID = 1'b0;

assign m_axi_tancalc_input_V_BREADY = 1'b0;

assign m_axi_tancalc_input_V_WDATA = 16'd0;

assign m_axi_tancalc_input_V_WID = 1'd0;

assign m_axi_tancalc_input_V_WLAST = 1'b0;

assign m_axi_tancalc_input_V_WSTRB = 2'd0;

assign m_axi_tancalc_input_V_WUSER = 1'd0;

assign m_axi_tancalc_input_V_WVALID = 1'b0;

assign or_ln219_fu_1661_p2 = (shl_ln90_reg_1996 | 7'd1);

assign or_ln_fu_691_p4 = {{{{1'd1}, {trunc_ln86_fu_687_p1}}}, {5'd0}};

assign shl_ln90_fu_1640_p2 = ap_phi_mux_data_num_0_phi_fu_542_p4 << 7'd1;

assign start_out = real_start;

assign tancalc_input_V_offset1_fu_661_p4 = {{tancalc_input_V_offset[63:1]}};

assign tancalc_output_line_10_V_V_din = 10'd10;

assign tancalc_output_line_11_V_V_din = 10'd11;

assign tancalc_output_line_12_V_V_din = 10'd12;

assign tancalc_output_line_13_V_V_din = 10'd13;

assign tancalc_output_line_14_V_V_din = 10'd14;

assign tancalc_output_line_15_V_V_din = 10'd15;

assign tancalc_output_line_1_V_V_din = 10'd1;

assign tancalc_output_line_2_V_V_din = 10'd2;

assign tancalc_output_line_3_V_V_din = 10'd3;

assign tancalc_output_line_4_V_V_din = 10'd4;

assign tancalc_output_line_5_V_V_din = 10'd5;

assign tancalc_output_line_6_V_V_din = 10'd6;

assign tancalc_output_line_7_V_V_din = 10'd7;

assign tancalc_output_line_8_V_V_din = 10'd8;

assign tancalc_output_line_9_V_V_din = 10'd9;

assign trunc_ln26_fu_728_p1 = data_part_num_0_i23_reg_527[0:0];

assign trunc_ln86_fu_687_p1 = cmpr_chunk_num_0_reg_516[1:0];

assign zext_ln219_1_fu_1666_p1 = or_ln219_fu_1661_p2;

assign zext_ln219_fu_701_p1 = or_ln_fu_691_p4;

assign zext_ln700_10_fu_865_p1 = add_ln700_7_fu_859_p2;

assign zext_ln700_11_fu_881_p1 = add_ln700_9_fu_875_p2;

assign zext_ln700_12_fu_897_p1 = add_ln700_11_fu_891_p2;

assign zext_ln700_13_fu_907_p1 = add_ln700_12_fu_901_p2;

assign zext_ln700_14_fu_1345_p1 = add_ln700_13_reg_1967;

assign zext_ln700_15_fu_1348_p1 = p_Result_14_i_reg_1972;

assign zext_ln700_16_fu_1177_p1 = grp_fu_556_p3;

assign zext_ln700_17_fu_1181_p1 = grp_fu_563_p3;

assign zext_ln700_18_fu_1197_p1 = add_ln700_16_fu_1191_p2;

assign zext_ln700_19_fu_1201_p1 = grp_fu_570_p3;

assign zext_ln700_1_fu_749_p1 = grp_fu_556_p3;

assign zext_ln700_20_fu_1213_p1 = grp_fu_591_p3;

assign zext_ln700_21_fu_1235_p1 = add_ln700_19_fu_1229_p2;

assign zext_ln700_22_fu_1245_p1 = add_ln700_20_fu_1239_p2;

assign zext_ln700_23_fu_1249_p1 = grp_fu_598_p3;

assign zext_ln700_24_fu_1277_p1 = grp_fu_647_p3;

assign zext_ln700_25_fu_1293_p1 = add_ln700_22_fu_1287_p2;

assign zext_ln700_26_fu_1309_p1 = add_ln700_24_fu_1303_p2;

assign zext_ln700_27_fu_1325_p1 = add_ln700_26_fu_1319_p2;

assign zext_ln700_28_fu_1335_p1 = add_ln700_27_fu_1329_p2;

assign zext_ln700_29_fu_1489_p1 = add_ln700_28_reg_1977;

assign zext_ln700_2_fu_753_p1 = grp_fu_563_p3;

assign zext_ln700_30_fu_1492_p1 = p_Result_14_i1_reg_1982;

assign zext_ln700_3_fu_769_p1 = add_ln700_1_fu_763_p2;

assign zext_ln700_4_fu_773_p1 = grp_fu_570_p3;

assign zext_ln700_5_fu_785_p1 = grp_fu_591_p3;

assign zext_ln700_6_fu_807_p1 = add_ln700_4_fu_801_p2;

assign zext_ln700_7_fu_817_p1 = add_ln700_5_fu_811_p2;

assign zext_ln700_8_fu_821_p1 = grp_fu_598_p3;

assign zext_ln700_9_fu_849_p1 = grp_fu_647_p3;

assign zext_ln700_fu_1538_p1 = add_ln700_29_fu_1495_p2;

assign zext_ln71_fu_671_p1 = tancalc_input_V_offset1_fu_661_p4;

assign zext_ln791_10_fu_1205_p1 = grp_fu_577_p3;

assign zext_ln791_11_fu_1209_p1 = grp_fu_584_p3;

assign zext_ln791_12_fu_1253_p1 = grp_fu_605_p3;

assign zext_ln791_13_fu_1257_p1 = grp_fu_612_p3;

assign zext_ln791_14_fu_1261_p1 = grp_fu_619_p3;

assign zext_ln791_15_fu_1265_p1 = grp_fu_626_p3;

assign zext_ln791_16_fu_1269_p1 = grp_fu_633_p3;

assign zext_ln791_17_fu_1273_p1 = grp_fu_640_p3;

assign zext_ln791_1_fu_777_p1 = grp_fu_577_p3;

assign zext_ln791_2_fu_781_p1 = grp_fu_584_p3;

assign zext_ln791_3_fu_825_p1 = grp_fu_605_p3;

assign zext_ln791_4_fu_829_p1 = grp_fu_612_p3;

assign zext_ln791_5_fu_833_p1 = grp_fu_619_p3;

assign zext_ln791_6_fu_837_p1 = grp_fu_626_p3;

assign zext_ln791_7_fu_841_p1 = grp_fu_633_p3;

assign zext_ln791_8_fu_845_p1 = grp_fu_640_p3;

assign zext_ln791_9_fu_1173_p1 = grp_fu_549_p3;

assign zext_ln791_fu_745_p1 = grp_fu_549_p3;

assign zext_ln90_fu_1646_p1 = shl_ln90_fu_1640_p2;

always @ (posedge ap_clk) begin
    zext_ln71_reg_1905[63] <= 1'b0;
    shl_ln90_reg_1996[0] <= 1'b0;
end

endmodule //hier_func_tancalc
