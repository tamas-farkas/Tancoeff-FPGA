-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hier_func_hier_func is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    fifo_output_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    fifo_output_V_V_TVALID : OUT STD_LOGIC;
    fifo_output_V_V_TREADY : IN STD_LOGIC );
end;


architecture behav of hier_func_hier_func is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hier_func_hier_func,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-fsgd2104-2L-e,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=2.433000,HLS_SYN_LAT=4127,HLS_SYN_TPT=4100,HLS_SYN_MEM=2,HLS_SYN_DSP=15,HLS_SYN_FF=2963,HLS_SYN_LUT=6265,HLS_VERSION=2019_1}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 40;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal tancalc_input_V : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem0_RLAST : STD_LOGIC;
    signal gmem0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal gmem0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal tancalc_U0_ap_start : STD_LOGIC;
    signal tancalc_U0_ap_done : STD_LOGIC;
    signal tancalc_U0_ap_continue : STD_LOGIC;
    signal tancalc_U0_ap_idle : STD_LOGIC;
    signal tancalc_U0_ap_ready : STD_LOGIC;
    signal tancalc_U0_start_out : STD_LOGIC;
    signal tancalc_U0_start_write : STD_LOGIC;
    signal tancalc_U0_m_axi_tancalc_input_V_AWVALID : STD_LOGIC;
    signal tancalc_U0_m_axi_tancalc_input_V_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal tancalc_U0_m_axi_tancalc_input_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal tancalc_U0_m_axi_tancalc_input_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal tancalc_U0_m_axi_tancalc_input_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal tancalc_U0_m_axi_tancalc_input_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal tancalc_U0_m_axi_tancalc_input_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal tancalc_U0_m_axi_tancalc_input_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal tancalc_U0_m_axi_tancalc_input_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal tancalc_U0_m_axi_tancalc_input_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal tancalc_U0_m_axi_tancalc_input_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal tancalc_U0_m_axi_tancalc_input_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal tancalc_U0_m_axi_tancalc_input_V_WVALID : STD_LOGIC;
    signal tancalc_U0_m_axi_tancalc_input_V_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal tancalc_U0_m_axi_tancalc_input_V_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal tancalc_U0_m_axi_tancalc_input_V_WLAST : STD_LOGIC;
    signal tancalc_U0_m_axi_tancalc_input_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal tancalc_U0_m_axi_tancalc_input_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal tancalc_U0_m_axi_tancalc_input_V_ARVALID : STD_LOGIC;
    signal tancalc_U0_m_axi_tancalc_input_V_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal tancalc_U0_m_axi_tancalc_input_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal tancalc_U0_m_axi_tancalc_input_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal tancalc_U0_m_axi_tancalc_input_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal tancalc_U0_m_axi_tancalc_input_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal tancalc_U0_m_axi_tancalc_input_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal tancalc_U0_m_axi_tancalc_input_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal tancalc_U0_m_axi_tancalc_input_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal tancalc_U0_m_axi_tancalc_input_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal tancalc_U0_m_axi_tancalc_input_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal tancalc_U0_m_axi_tancalc_input_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal tancalc_U0_m_axi_tancalc_input_V_RREADY : STD_LOGIC;
    signal tancalc_U0_m_axi_tancalc_input_V_BREADY : STD_LOGIC;
    signal tancalc_U0_tancalc_output_line_1_V_V_din : STD_LOGIC_VECTOR (9 downto 0);
    signal tancalc_U0_tancalc_output_line_1_V_V_write : STD_LOGIC;
    signal tancalc_U0_tancalc_output_line_2_V_V_din : STD_LOGIC_VECTOR (9 downto 0);
    signal tancalc_U0_tancalc_output_line_2_V_V_write : STD_LOGIC;
    signal tancalc_U0_tancalc_output_line_3_V_V_din : STD_LOGIC_VECTOR (9 downto 0);
    signal tancalc_U0_tancalc_output_line_3_V_V_write : STD_LOGIC;
    signal tancalc_U0_tancalc_output_line_4_V_V_din : STD_LOGIC_VECTOR (9 downto 0);
    signal tancalc_U0_tancalc_output_line_4_V_V_write : STD_LOGIC;
    signal tancalc_U0_tancalc_output_line_5_V_V_din : STD_LOGIC_VECTOR (9 downto 0);
    signal tancalc_U0_tancalc_output_line_5_V_V_write : STD_LOGIC;
    signal tancalc_U0_tancalc_output_line_6_V_V_din : STD_LOGIC_VECTOR (9 downto 0);
    signal tancalc_U0_tancalc_output_line_6_V_V_write : STD_LOGIC;
    signal tancalc_U0_tancalc_output_line_7_V_V_din : STD_LOGIC_VECTOR (9 downto 0);
    signal tancalc_U0_tancalc_output_line_7_V_V_write : STD_LOGIC;
    signal tancalc_U0_tancalc_output_line_8_V_V_din : STD_LOGIC_VECTOR (9 downto 0);
    signal tancalc_U0_tancalc_output_line_8_V_V_write : STD_LOGIC;
    signal tancalc_U0_tancalc_output_line_9_V_V_din : STD_LOGIC_VECTOR (9 downto 0);
    signal tancalc_U0_tancalc_output_line_9_V_V_write : STD_LOGIC;
    signal tancalc_U0_tancalc_output_line_10_V_V_din : STD_LOGIC_VECTOR (9 downto 0);
    signal tancalc_U0_tancalc_output_line_10_V_V_write : STD_LOGIC;
    signal tancalc_U0_tancalc_output_line_11_V_V_din : STD_LOGIC_VECTOR (9 downto 0);
    signal tancalc_U0_tancalc_output_line_11_V_V_write : STD_LOGIC;
    signal tancalc_U0_tancalc_output_line_12_V_V_din : STD_LOGIC_VECTOR (9 downto 0);
    signal tancalc_U0_tancalc_output_line_12_V_V_write : STD_LOGIC;
    signal tancalc_U0_tancalc_output_line_13_V_V_din : STD_LOGIC_VECTOR (9 downto 0);
    signal tancalc_U0_tancalc_output_line_13_V_V_write : STD_LOGIC;
    signal tancalc_U0_tancalc_output_line_14_V_V_din : STD_LOGIC_VECTOR (9 downto 0);
    signal tancalc_U0_tancalc_output_line_14_V_V_write : STD_LOGIC;
    signal tancalc_U0_tancalc_output_line_15_V_V_din : STD_LOGIC_VECTOR (9 downto 0);
    signal tancalc_U0_tancalc_output_line_15_V_V_write : STD_LOGIC;
    signal fifo_U0_ap_start : STD_LOGIC;
    signal fifo_U0_ap_done : STD_LOGIC;
    signal fifo_U0_ap_continue : STD_LOGIC;
    signal fifo_U0_ap_idle : STD_LOGIC;
    signal fifo_U0_ap_ready : STD_LOGIC;
    signal fifo_U0_fifo_input_line_1_V_V_read : STD_LOGIC;
    signal fifo_U0_fifo_input_line_2_V_V_read : STD_LOGIC;
    signal fifo_U0_fifo_input_line_3_V_V_read : STD_LOGIC;
    signal fifo_U0_fifo_input_line_4_V_V_read : STD_LOGIC;
    signal fifo_U0_fifo_input_line_5_V_V_read : STD_LOGIC;
    signal fifo_U0_fifo_input_line_6_V_V_read : STD_LOGIC;
    signal fifo_U0_fifo_input_line_7_V_V_read : STD_LOGIC;
    signal fifo_U0_fifo_input_line_8_V_V_read : STD_LOGIC;
    signal fifo_U0_fifo_input_line_9_V_V_read : STD_LOGIC;
    signal fifo_U0_fifo_input_line_10_V_V_read : STD_LOGIC;
    signal fifo_U0_fifo_input_line_11_V_V_read : STD_LOGIC;
    signal fifo_U0_fifo_input_line_12_V_V_read : STD_LOGIC;
    signal fifo_U0_fifo_input_line_13_V_V_read : STD_LOGIC;
    signal fifo_U0_fifo_input_line_14_V_V_read : STD_LOGIC;
    signal fifo_U0_fifo_input_line_15_V_V_read : STD_LOGIC;
    signal fifo_U0_fifo_output_V_V_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal fifo_U0_fifo_output_V_V_TVALID : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal stream_array_line_1_V_V_full_n : STD_LOGIC;
    signal stream_array_line_1_V_V_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal stream_array_line_1_V_V_empty_n : STD_LOGIC;
    signal stream_array_line_2_V_V_full_n : STD_LOGIC;
    signal stream_array_line_2_V_V_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal stream_array_line_2_V_V_empty_n : STD_LOGIC;
    signal stream_array_line_3_V_V_full_n : STD_LOGIC;
    signal stream_array_line_3_V_V_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal stream_array_line_3_V_V_empty_n : STD_LOGIC;
    signal stream_array_line_4_V_V_full_n : STD_LOGIC;
    signal stream_array_line_4_V_V_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal stream_array_line_4_V_V_empty_n : STD_LOGIC;
    signal stream_array_line_5_V_V_full_n : STD_LOGIC;
    signal stream_array_line_5_V_V_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal stream_array_line_5_V_V_empty_n : STD_LOGIC;
    signal stream_array_line_6_V_V_full_n : STD_LOGIC;
    signal stream_array_line_6_V_V_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal stream_array_line_6_V_V_empty_n : STD_LOGIC;
    signal stream_array_line_7_V_V_full_n : STD_LOGIC;
    signal stream_array_line_7_V_V_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal stream_array_line_7_V_V_empty_n : STD_LOGIC;
    signal stream_array_line_8_V_V_full_n : STD_LOGIC;
    signal stream_array_line_8_V_V_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal stream_array_line_8_V_V_empty_n : STD_LOGIC;
    signal stream_array_line_9_V_V_full_n : STD_LOGIC;
    signal stream_array_line_9_V_V_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal stream_array_line_9_V_V_empty_n : STD_LOGIC;
    signal stream_array_line_10_V_V_full_n : STD_LOGIC;
    signal stream_array_line_10_V_V_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal stream_array_line_10_V_V_empty_n : STD_LOGIC;
    signal stream_array_line_11_V_V_full_n : STD_LOGIC;
    signal stream_array_line_11_V_V_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal stream_array_line_11_V_V_empty_n : STD_LOGIC;
    signal stream_array_line_12_V_V_full_n : STD_LOGIC;
    signal stream_array_line_12_V_V_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal stream_array_line_12_V_V_empty_n : STD_LOGIC;
    signal stream_array_line_13_V_V_full_n : STD_LOGIC;
    signal stream_array_line_13_V_V_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal stream_array_line_13_V_V_empty_n : STD_LOGIC;
    signal stream_array_line_14_V_V_full_n : STD_LOGIC;
    signal stream_array_line_14_V_V_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal stream_array_line_14_V_V_empty_n : STD_LOGIC;
    signal stream_array_line_15_V_V_full_n : STD_LOGIC;
    signal stream_array_line_15_V_V_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal stream_array_line_15_V_V_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_fifo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fifo_U0_full_n : STD_LOGIC;
    signal start_for_fifo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fifo_U0_empty_n : STD_LOGIC;
    signal fifo_U0_start_full_n : STD_LOGIC;
    signal fifo_U0_start_write : STD_LOGIC;

    component hier_func_tancalc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_tancalc_input_V_AWVALID : OUT STD_LOGIC;
        m_axi_tancalc_input_V_AWREADY : IN STD_LOGIC;
        m_axi_tancalc_input_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_tancalc_input_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_tancalc_input_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_tancalc_input_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_tancalc_input_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_tancalc_input_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_tancalc_input_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_tancalc_input_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_tancalc_input_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_tancalc_input_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_tancalc_input_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_tancalc_input_V_WVALID : OUT STD_LOGIC;
        m_axi_tancalc_input_V_WREADY : IN STD_LOGIC;
        m_axi_tancalc_input_V_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_tancalc_input_V_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_tancalc_input_V_WLAST : OUT STD_LOGIC;
        m_axi_tancalc_input_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_tancalc_input_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_tancalc_input_V_ARVALID : OUT STD_LOGIC;
        m_axi_tancalc_input_V_ARREADY : IN STD_LOGIC;
        m_axi_tancalc_input_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_tancalc_input_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_tancalc_input_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_tancalc_input_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_tancalc_input_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_tancalc_input_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_tancalc_input_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_tancalc_input_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_tancalc_input_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_tancalc_input_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_tancalc_input_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_tancalc_input_V_RVALID : IN STD_LOGIC;
        m_axi_tancalc_input_V_RREADY : OUT STD_LOGIC;
        m_axi_tancalc_input_V_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_tancalc_input_V_RLAST : IN STD_LOGIC;
        m_axi_tancalc_input_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_tancalc_input_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_tancalc_input_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_tancalc_input_V_BVALID : IN STD_LOGIC;
        m_axi_tancalc_input_V_BREADY : OUT STD_LOGIC;
        m_axi_tancalc_input_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_tancalc_input_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_tancalc_input_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        tancalc_input_V_offset : IN STD_LOGIC_VECTOR (63 downto 0);
        tancalc_output_line_1_V_V_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        tancalc_output_line_1_V_V_full_n : IN STD_LOGIC;
        tancalc_output_line_1_V_V_write : OUT STD_LOGIC;
        tancalc_output_line_2_V_V_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        tancalc_output_line_2_V_V_full_n : IN STD_LOGIC;
        tancalc_output_line_2_V_V_write : OUT STD_LOGIC;
        tancalc_output_line_3_V_V_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        tancalc_output_line_3_V_V_full_n : IN STD_LOGIC;
        tancalc_output_line_3_V_V_write : OUT STD_LOGIC;
        tancalc_output_line_4_V_V_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        tancalc_output_line_4_V_V_full_n : IN STD_LOGIC;
        tancalc_output_line_4_V_V_write : OUT STD_LOGIC;
        tancalc_output_line_5_V_V_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        tancalc_output_line_5_V_V_full_n : IN STD_LOGIC;
        tancalc_output_line_5_V_V_write : OUT STD_LOGIC;
        tancalc_output_line_6_V_V_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        tancalc_output_line_6_V_V_full_n : IN STD_LOGIC;
        tancalc_output_line_6_V_V_write : OUT STD_LOGIC;
        tancalc_output_line_7_V_V_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        tancalc_output_line_7_V_V_full_n : IN STD_LOGIC;
        tancalc_output_line_7_V_V_write : OUT STD_LOGIC;
        tancalc_output_line_8_V_V_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        tancalc_output_line_8_V_V_full_n : IN STD_LOGIC;
        tancalc_output_line_8_V_V_write : OUT STD_LOGIC;
        tancalc_output_line_9_V_V_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        tancalc_output_line_9_V_V_full_n : IN STD_LOGIC;
        tancalc_output_line_9_V_V_write : OUT STD_LOGIC;
        tancalc_output_line_10_V_V_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        tancalc_output_line_10_V_V_full_n : IN STD_LOGIC;
        tancalc_output_line_10_V_V_write : OUT STD_LOGIC;
        tancalc_output_line_11_V_V_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        tancalc_output_line_11_V_V_full_n : IN STD_LOGIC;
        tancalc_output_line_11_V_V_write : OUT STD_LOGIC;
        tancalc_output_line_12_V_V_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        tancalc_output_line_12_V_V_full_n : IN STD_LOGIC;
        tancalc_output_line_12_V_V_write : OUT STD_LOGIC;
        tancalc_output_line_13_V_V_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        tancalc_output_line_13_V_V_full_n : IN STD_LOGIC;
        tancalc_output_line_13_V_V_write : OUT STD_LOGIC;
        tancalc_output_line_14_V_V_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        tancalc_output_line_14_V_V_full_n : IN STD_LOGIC;
        tancalc_output_line_14_V_V_write : OUT STD_LOGIC;
        tancalc_output_line_15_V_V_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        tancalc_output_line_15_V_V_full_n : IN STD_LOGIC;
        tancalc_output_line_15_V_V_write : OUT STD_LOGIC );
    end component;


    component hier_func_fifo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fifo_input_line_0_V_V : IN STD_LOGIC_VECTOR (9 downto 0);
        fifo_input_line_1_V_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        fifo_input_line_1_V_V_empty_n : IN STD_LOGIC;
        fifo_input_line_1_V_V_read : OUT STD_LOGIC;
        fifo_input_line_2_V_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        fifo_input_line_2_V_V_empty_n : IN STD_LOGIC;
        fifo_input_line_2_V_V_read : OUT STD_LOGIC;
        fifo_input_line_3_V_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        fifo_input_line_3_V_V_empty_n : IN STD_LOGIC;
        fifo_input_line_3_V_V_read : OUT STD_LOGIC;
        fifo_input_line_4_V_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        fifo_input_line_4_V_V_empty_n : IN STD_LOGIC;
        fifo_input_line_4_V_V_read : OUT STD_LOGIC;
        fifo_input_line_5_V_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        fifo_input_line_5_V_V_empty_n : IN STD_LOGIC;
        fifo_input_line_5_V_V_read : OUT STD_LOGIC;
        fifo_input_line_6_V_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        fifo_input_line_6_V_V_empty_n : IN STD_LOGIC;
        fifo_input_line_6_V_V_read : OUT STD_LOGIC;
        fifo_input_line_7_V_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        fifo_input_line_7_V_V_empty_n : IN STD_LOGIC;
        fifo_input_line_7_V_V_read : OUT STD_LOGIC;
        fifo_input_line_8_V_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        fifo_input_line_8_V_V_empty_n : IN STD_LOGIC;
        fifo_input_line_8_V_V_read : OUT STD_LOGIC;
        fifo_input_line_9_V_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        fifo_input_line_9_V_V_empty_n : IN STD_LOGIC;
        fifo_input_line_9_V_V_read : OUT STD_LOGIC;
        fifo_input_line_10_V_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        fifo_input_line_10_V_V_empty_n : IN STD_LOGIC;
        fifo_input_line_10_V_V_read : OUT STD_LOGIC;
        fifo_input_line_11_V_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        fifo_input_line_11_V_V_empty_n : IN STD_LOGIC;
        fifo_input_line_11_V_V_read : OUT STD_LOGIC;
        fifo_input_line_12_V_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        fifo_input_line_12_V_V_empty_n : IN STD_LOGIC;
        fifo_input_line_12_V_V_read : OUT STD_LOGIC;
        fifo_input_line_13_V_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        fifo_input_line_13_V_V_empty_n : IN STD_LOGIC;
        fifo_input_line_13_V_V_read : OUT STD_LOGIC;
        fifo_input_line_14_V_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        fifo_input_line_14_V_V_empty_n : IN STD_LOGIC;
        fifo_input_line_14_V_V_read : OUT STD_LOGIC;
        fifo_input_line_15_V_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        fifo_input_line_15_V_V_empty_n : IN STD_LOGIC;
        fifo_input_line_15_V_V_read : OUT STD_LOGIC;
        fifo_output_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        fifo_output_V_V_TVALID : OUT STD_LOGIC;
        fifo_output_V_V_TREADY : IN STD_LOGIC );
    end component;


    component hier_func_fifo_w10_d16_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hier_func_start_for_fifo_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hier_func_hier_func_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        tancalc_input_V : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component hier_func_hier_func_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    hier_func_control_s_axi_U : component hier_func_hier_func_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        tancalc_input_V => tancalc_input_V);

    hier_func_gmem0_m_axi_U : component hier_func_hier_func_gmem0_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => tancalc_U0_m_axi_tancalc_input_V_ARVALID,
        I_ARREADY => gmem0_ARREADY,
        I_ARADDR => tancalc_U0_m_axi_tancalc_input_V_ARADDR,
        I_ARID => tancalc_U0_m_axi_tancalc_input_V_ARID,
        I_ARLEN => tancalc_U0_m_axi_tancalc_input_V_ARLEN,
        I_ARSIZE => tancalc_U0_m_axi_tancalc_input_V_ARSIZE,
        I_ARLOCK => tancalc_U0_m_axi_tancalc_input_V_ARLOCK,
        I_ARCACHE => tancalc_U0_m_axi_tancalc_input_V_ARCACHE,
        I_ARQOS => tancalc_U0_m_axi_tancalc_input_V_ARQOS,
        I_ARPROT => tancalc_U0_m_axi_tancalc_input_V_ARPROT,
        I_ARUSER => tancalc_U0_m_axi_tancalc_input_V_ARUSER,
        I_ARBURST => tancalc_U0_m_axi_tancalc_input_V_ARBURST,
        I_ARREGION => tancalc_U0_m_axi_tancalc_input_V_ARREGION,
        I_RVALID => gmem0_RVALID,
        I_RREADY => tancalc_U0_m_axi_tancalc_input_V_RREADY,
        I_RDATA => gmem0_RDATA,
        I_RID => gmem0_RID,
        I_RUSER => gmem0_RUSER,
        I_RRESP => gmem0_RRESP,
        I_RLAST => gmem0_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem0_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => gmem0_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem0_BRESP,
        I_BID => gmem0_BID,
        I_BUSER => gmem0_BUSER);

    tancalc_U0 : component hier_func_tancalc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => tancalc_U0_ap_start,
        start_full_n => start_for_fifo_U0_full_n,
        ap_done => tancalc_U0_ap_done,
        ap_continue => tancalc_U0_ap_continue,
        ap_idle => tancalc_U0_ap_idle,
        ap_ready => tancalc_U0_ap_ready,
        start_out => tancalc_U0_start_out,
        start_write => tancalc_U0_start_write,
        m_axi_tancalc_input_V_AWVALID => tancalc_U0_m_axi_tancalc_input_V_AWVALID,
        m_axi_tancalc_input_V_AWREADY => ap_const_logic_0,
        m_axi_tancalc_input_V_AWADDR => tancalc_U0_m_axi_tancalc_input_V_AWADDR,
        m_axi_tancalc_input_V_AWID => tancalc_U0_m_axi_tancalc_input_V_AWID,
        m_axi_tancalc_input_V_AWLEN => tancalc_U0_m_axi_tancalc_input_V_AWLEN,
        m_axi_tancalc_input_V_AWSIZE => tancalc_U0_m_axi_tancalc_input_V_AWSIZE,
        m_axi_tancalc_input_V_AWBURST => tancalc_U0_m_axi_tancalc_input_V_AWBURST,
        m_axi_tancalc_input_V_AWLOCK => tancalc_U0_m_axi_tancalc_input_V_AWLOCK,
        m_axi_tancalc_input_V_AWCACHE => tancalc_U0_m_axi_tancalc_input_V_AWCACHE,
        m_axi_tancalc_input_V_AWPROT => tancalc_U0_m_axi_tancalc_input_V_AWPROT,
        m_axi_tancalc_input_V_AWQOS => tancalc_U0_m_axi_tancalc_input_V_AWQOS,
        m_axi_tancalc_input_V_AWREGION => tancalc_U0_m_axi_tancalc_input_V_AWREGION,
        m_axi_tancalc_input_V_AWUSER => tancalc_U0_m_axi_tancalc_input_V_AWUSER,
        m_axi_tancalc_input_V_WVALID => tancalc_U0_m_axi_tancalc_input_V_WVALID,
        m_axi_tancalc_input_V_WREADY => ap_const_logic_0,
        m_axi_tancalc_input_V_WDATA => tancalc_U0_m_axi_tancalc_input_V_WDATA,
        m_axi_tancalc_input_V_WSTRB => tancalc_U0_m_axi_tancalc_input_V_WSTRB,
        m_axi_tancalc_input_V_WLAST => tancalc_U0_m_axi_tancalc_input_V_WLAST,
        m_axi_tancalc_input_V_WID => tancalc_U0_m_axi_tancalc_input_V_WID,
        m_axi_tancalc_input_V_WUSER => tancalc_U0_m_axi_tancalc_input_V_WUSER,
        m_axi_tancalc_input_V_ARVALID => tancalc_U0_m_axi_tancalc_input_V_ARVALID,
        m_axi_tancalc_input_V_ARREADY => gmem0_ARREADY,
        m_axi_tancalc_input_V_ARADDR => tancalc_U0_m_axi_tancalc_input_V_ARADDR,
        m_axi_tancalc_input_V_ARID => tancalc_U0_m_axi_tancalc_input_V_ARID,
        m_axi_tancalc_input_V_ARLEN => tancalc_U0_m_axi_tancalc_input_V_ARLEN,
        m_axi_tancalc_input_V_ARSIZE => tancalc_U0_m_axi_tancalc_input_V_ARSIZE,
        m_axi_tancalc_input_V_ARBURST => tancalc_U0_m_axi_tancalc_input_V_ARBURST,
        m_axi_tancalc_input_V_ARLOCK => tancalc_U0_m_axi_tancalc_input_V_ARLOCK,
        m_axi_tancalc_input_V_ARCACHE => tancalc_U0_m_axi_tancalc_input_V_ARCACHE,
        m_axi_tancalc_input_V_ARPROT => tancalc_U0_m_axi_tancalc_input_V_ARPROT,
        m_axi_tancalc_input_V_ARQOS => tancalc_U0_m_axi_tancalc_input_V_ARQOS,
        m_axi_tancalc_input_V_ARREGION => tancalc_U0_m_axi_tancalc_input_V_ARREGION,
        m_axi_tancalc_input_V_ARUSER => tancalc_U0_m_axi_tancalc_input_V_ARUSER,
        m_axi_tancalc_input_V_RVALID => gmem0_RVALID,
        m_axi_tancalc_input_V_RREADY => tancalc_U0_m_axi_tancalc_input_V_RREADY,
        m_axi_tancalc_input_V_RDATA => gmem0_RDATA,
        m_axi_tancalc_input_V_RLAST => gmem0_RLAST,
        m_axi_tancalc_input_V_RID => gmem0_RID,
        m_axi_tancalc_input_V_RUSER => gmem0_RUSER,
        m_axi_tancalc_input_V_RRESP => gmem0_RRESP,
        m_axi_tancalc_input_V_BVALID => ap_const_logic_0,
        m_axi_tancalc_input_V_BREADY => tancalc_U0_m_axi_tancalc_input_V_BREADY,
        m_axi_tancalc_input_V_BRESP => ap_const_lv2_0,
        m_axi_tancalc_input_V_BID => ap_const_lv1_0,
        m_axi_tancalc_input_V_BUSER => ap_const_lv1_0,
        tancalc_input_V_offset => tancalc_input_V,
        tancalc_output_line_1_V_V_din => tancalc_U0_tancalc_output_line_1_V_V_din,
        tancalc_output_line_1_V_V_full_n => stream_array_line_1_V_V_full_n,
        tancalc_output_line_1_V_V_write => tancalc_U0_tancalc_output_line_1_V_V_write,
        tancalc_output_line_2_V_V_din => tancalc_U0_tancalc_output_line_2_V_V_din,
        tancalc_output_line_2_V_V_full_n => stream_array_line_2_V_V_full_n,
        tancalc_output_line_2_V_V_write => tancalc_U0_tancalc_output_line_2_V_V_write,
        tancalc_output_line_3_V_V_din => tancalc_U0_tancalc_output_line_3_V_V_din,
        tancalc_output_line_3_V_V_full_n => stream_array_line_3_V_V_full_n,
        tancalc_output_line_3_V_V_write => tancalc_U0_tancalc_output_line_3_V_V_write,
        tancalc_output_line_4_V_V_din => tancalc_U0_tancalc_output_line_4_V_V_din,
        tancalc_output_line_4_V_V_full_n => stream_array_line_4_V_V_full_n,
        tancalc_output_line_4_V_V_write => tancalc_U0_tancalc_output_line_4_V_V_write,
        tancalc_output_line_5_V_V_din => tancalc_U0_tancalc_output_line_5_V_V_din,
        tancalc_output_line_5_V_V_full_n => stream_array_line_5_V_V_full_n,
        tancalc_output_line_5_V_V_write => tancalc_U0_tancalc_output_line_5_V_V_write,
        tancalc_output_line_6_V_V_din => tancalc_U0_tancalc_output_line_6_V_V_din,
        tancalc_output_line_6_V_V_full_n => stream_array_line_6_V_V_full_n,
        tancalc_output_line_6_V_V_write => tancalc_U0_tancalc_output_line_6_V_V_write,
        tancalc_output_line_7_V_V_din => tancalc_U0_tancalc_output_line_7_V_V_din,
        tancalc_output_line_7_V_V_full_n => stream_array_line_7_V_V_full_n,
        tancalc_output_line_7_V_V_write => tancalc_U0_tancalc_output_line_7_V_V_write,
        tancalc_output_line_8_V_V_din => tancalc_U0_tancalc_output_line_8_V_V_din,
        tancalc_output_line_8_V_V_full_n => stream_array_line_8_V_V_full_n,
        tancalc_output_line_8_V_V_write => tancalc_U0_tancalc_output_line_8_V_V_write,
        tancalc_output_line_9_V_V_din => tancalc_U0_tancalc_output_line_9_V_V_din,
        tancalc_output_line_9_V_V_full_n => stream_array_line_9_V_V_full_n,
        tancalc_output_line_9_V_V_write => tancalc_U0_tancalc_output_line_9_V_V_write,
        tancalc_output_line_10_V_V_din => tancalc_U0_tancalc_output_line_10_V_V_din,
        tancalc_output_line_10_V_V_full_n => stream_array_line_10_V_V_full_n,
        tancalc_output_line_10_V_V_write => tancalc_U0_tancalc_output_line_10_V_V_write,
        tancalc_output_line_11_V_V_din => tancalc_U0_tancalc_output_line_11_V_V_din,
        tancalc_output_line_11_V_V_full_n => stream_array_line_11_V_V_full_n,
        tancalc_output_line_11_V_V_write => tancalc_U0_tancalc_output_line_11_V_V_write,
        tancalc_output_line_12_V_V_din => tancalc_U0_tancalc_output_line_12_V_V_din,
        tancalc_output_line_12_V_V_full_n => stream_array_line_12_V_V_full_n,
        tancalc_output_line_12_V_V_write => tancalc_U0_tancalc_output_line_12_V_V_write,
        tancalc_output_line_13_V_V_din => tancalc_U0_tancalc_output_line_13_V_V_din,
        tancalc_output_line_13_V_V_full_n => stream_array_line_13_V_V_full_n,
        tancalc_output_line_13_V_V_write => tancalc_U0_tancalc_output_line_13_V_V_write,
        tancalc_output_line_14_V_V_din => tancalc_U0_tancalc_output_line_14_V_V_din,
        tancalc_output_line_14_V_V_full_n => stream_array_line_14_V_V_full_n,
        tancalc_output_line_14_V_V_write => tancalc_U0_tancalc_output_line_14_V_V_write,
        tancalc_output_line_15_V_V_din => tancalc_U0_tancalc_output_line_15_V_V_din,
        tancalc_output_line_15_V_V_full_n => stream_array_line_15_V_V_full_n,
        tancalc_output_line_15_V_V_write => tancalc_U0_tancalc_output_line_15_V_V_write);

    fifo_U0 : component hier_func_fifo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => fifo_U0_ap_start,
        ap_done => fifo_U0_ap_done,
        ap_continue => fifo_U0_ap_continue,
        ap_idle => fifo_U0_ap_idle,
        ap_ready => fifo_U0_ap_ready,
        fifo_input_line_0_V_V => ap_const_lv10_0,
        fifo_input_line_1_V_V_dout => stream_array_line_1_V_V_dout,
        fifo_input_line_1_V_V_empty_n => stream_array_line_1_V_V_empty_n,
        fifo_input_line_1_V_V_read => fifo_U0_fifo_input_line_1_V_V_read,
        fifo_input_line_2_V_V_dout => stream_array_line_2_V_V_dout,
        fifo_input_line_2_V_V_empty_n => stream_array_line_2_V_V_empty_n,
        fifo_input_line_2_V_V_read => fifo_U0_fifo_input_line_2_V_V_read,
        fifo_input_line_3_V_V_dout => stream_array_line_3_V_V_dout,
        fifo_input_line_3_V_V_empty_n => stream_array_line_3_V_V_empty_n,
        fifo_input_line_3_V_V_read => fifo_U0_fifo_input_line_3_V_V_read,
        fifo_input_line_4_V_V_dout => stream_array_line_4_V_V_dout,
        fifo_input_line_4_V_V_empty_n => stream_array_line_4_V_V_empty_n,
        fifo_input_line_4_V_V_read => fifo_U0_fifo_input_line_4_V_V_read,
        fifo_input_line_5_V_V_dout => stream_array_line_5_V_V_dout,
        fifo_input_line_5_V_V_empty_n => stream_array_line_5_V_V_empty_n,
        fifo_input_line_5_V_V_read => fifo_U0_fifo_input_line_5_V_V_read,
        fifo_input_line_6_V_V_dout => stream_array_line_6_V_V_dout,
        fifo_input_line_6_V_V_empty_n => stream_array_line_6_V_V_empty_n,
        fifo_input_line_6_V_V_read => fifo_U0_fifo_input_line_6_V_V_read,
        fifo_input_line_7_V_V_dout => stream_array_line_7_V_V_dout,
        fifo_input_line_7_V_V_empty_n => stream_array_line_7_V_V_empty_n,
        fifo_input_line_7_V_V_read => fifo_U0_fifo_input_line_7_V_V_read,
        fifo_input_line_8_V_V_dout => stream_array_line_8_V_V_dout,
        fifo_input_line_8_V_V_empty_n => stream_array_line_8_V_V_empty_n,
        fifo_input_line_8_V_V_read => fifo_U0_fifo_input_line_8_V_V_read,
        fifo_input_line_9_V_V_dout => stream_array_line_9_V_V_dout,
        fifo_input_line_9_V_V_empty_n => stream_array_line_9_V_V_empty_n,
        fifo_input_line_9_V_V_read => fifo_U0_fifo_input_line_9_V_V_read,
        fifo_input_line_10_V_V_dout => stream_array_line_10_V_V_dout,
        fifo_input_line_10_V_V_empty_n => stream_array_line_10_V_V_empty_n,
        fifo_input_line_10_V_V_read => fifo_U0_fifo_input_line_10_V_V_read,
        fifo_input_line_11_V_V_dout => stream_array_line_11_V_V_dout,
        fifo_input_line_11_V_V_empty_n => stream_array_line_11_V_V_empty_n,
        fifo_input_line_11_V_V_read => fifo_U0_fifo_input_line_11_V_V_read,
        fifo_input_line_12_V_V_dout => stream_array_line_12_V_V_dout,
        fifo_input_line_12_V_V_empty_n => stream_array_line_12_V_V_empty_n,
        fifo_input_line_12_V_V_read => fifo_U0_fifo_input_line_12_V_V_read,
        fifo_input_line_13_V_V_dout => stream_array_line_13_V_V_dout,
        fifo_input_line_13_V_V_empty_n => stream_array_line_13_V_V_empty_n,
        fifo_input_line_13_V_V_read => fifo_U0_fifo_input_line_13_V_V_read,
        fifo_input_line_14_V_V_dout => stream_array_line_14_V_V_dout,
        fifo_input_line_14_V_V_empty_n => stream_array_line_14_V_V_empty_n,
        fifo_input_line_14_V_V_read => fifo_U0_fifo_input_line_14_V_V_read,
        fifo_input_line_15_V_V_dout => stream_array_line_15_V_V_dout,
        fifo_input_line_15_V_V_empty_n => stream_array_line_15_V_V_empty_n,
        fifo_input_line_15_V_V_read => fifo_U0_fifo_input_line_15_V_V_read,
        fifo_output_V_V_TDATA => fifo_U0_fifo_output_V_V_TDATA,
        fifo_output_V_V_TVALID => fifo_U0_fifo_output_V_V_TVALID,
        fifo_output_V_V_TREADY => fifo_output_V_V_TREADY);

    stream_array_line_1_V_V_U : component hier_func_fifo_w10_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tancalc_U0_tancalc_output_line_1_V_V_din,
        if_full_n => stream_array_line_1_V_V_full_n,
        if_write => tancalc_U0_tancalc_output_line_1_V_V_write,
        if_dout => stream_array_line_1_V_V_dout,
        if_empty_n => stream_array_line_1_V_V_empty_n,
        if_read => fifo_U0_fifo_input_line_1_V_V_read);

    stream_array_line_2_V_V_U : component hier_func_fifo_w10_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tancalc_U0_tancalc_output_line_2_V_V_din,
        if_full_n => stream_array_line_2_V_V_full_n,
        if_write => tancalc_U0_tancalc_output_line_2_V_V_write,
        if_dout => stream_array_line_2_V_V_dout,
        if_empty_n => stream_array_line_2_V_V_empty_n,
        if_read => fifo_U0_fifo_input_line_2_V_V_read);

    stream_array_line_3_V_V_U : component hier_func_fifo_w10_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tancalc_U0_tancalc_output_line_3_V_V_din,
        if_full_n => stream_array_line_3_V_V_full_n,
        if_write => tancalc_U0_tancalc_output_line_3_V_V_write,
        if_dout => stream_array_line_3_V_V_dout,
        if_empty_n => stream_array_line_3_V_V_empty_n,
        if_read => fifo_U0_fifo_input_line_3_V_V_read);

    stream_array_line_4_V_V_U : component hier_func_fifo_w10_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tancalc_U0_tancalc_output_line_4_V_V_din,
        if_full_n => stream_array_line_4_V_V_full_n,
        if_write => tancalc_U0_tancalc_output_line_4_V_V_write,
        if_dout => stream_array_line_4_V_V_dout,
        if_empty_n => stream_array_line_4_V_V_empty_n,
        if_read => fifo_U0_fifo_input_line_4_V_V_read);

    stream_array_line_5_V_V_U : component hier_func_fifo_w10_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tancalc_U0_tancalc_output_line_5_V_V_din,
        if_full_n => stream_array_line_5_V_V_full_n,
        if_write => tancalc_U0_tancalc_output_line_5_V_V_write,
        if_dout => stream_array_line_5_V_V_dout,
        if_empty_n => stream_array_line_5_V_V_empty_n,
        if_read => fifo_U0_fifo_input_line_5_V_V_read);

    stream_array_line_6_V_V_U : component hier_func_fifo_w10_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tancalc_U0_tancalc_output_line_6_V_V_din,
        if_full_n => stream_array_line_6_V_V_full_n,
        if_write => tancalc_U0_tancalc_output_line_6_V_V_write,
        if_dout => stream_array_line_6_V_V_dout,
        if_empty_n => stream_array_line_6_V_V_empty_n,
        if_read => fifo_U0_fifo_input_line_6_V_V_read);

    stream_array_line_7_V_V_U : component hier_func_fifo_w10_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tancalc_U0_tancalc_output_line_7_V_V_din,
        if_full_n => stream_array_line_7_V_V_full_n,
        if_write => tancalc_U0_tancalc_output_line_7_V_V_write,
        if_dout => stream_array_line_7_V_V_dout,
        if_empty_n => stream_array_line_7_V_V_empty_n,
        if_read => fifo_U0_fifo_input_line_7_V_V_read);

    stream_array_line_8_V_V_U : component hier_func_fifo_w10_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tancalc_U0_tancalc_output_line_8_V_V_din,
        if_full_n => stream_array_line_8_V_V_full_n,
        if_write => tancalc_U0_tancalc_output_line_8_V_V_write,
        if_dout => stream_array_line_8_V_V_dout,
        if_empty_n => stream_array_line_8_V_V_empty_n,
        if_read => fifo_U0_fifo_input_line_8_V_V_read);

    stream_array_line_9_V_V_U : component hier_func_fifo_w10_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tancalc_U0_tancalc_output_line_9_V_V_din,
        if_full_n => stream_array_line_9_V_V_full_n,
        if_write => tancalc_U0_tancalc_output_line_9_V_V_write,
        if_dout => stream_array_line_9_V_V_dout,
        if_empty_n => stream_array_line_9_V_V_empty_n,
        if_read => fifo_U0_fifo_input_line_9_V_V_read);

    stream_array_line_10_V_V_U : component hier_func_fifo_w10_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tancalc_U0_tancalc_output_line_10_V_V_din,
        if_full_n => stream_array_line_10_V_V_full_n,
        if_write => tancalc_U0_tancalc_output_line_10_V_V_write,
        if_dout => stream_array_line_10_V_V_dout,
        if_empty_n => stream_array_line_10_V_V_empty_n,
        if_read => fifo_U0_fifo_input_line_10_V_V_read);

    stream_array_line_11_V_V_U : component hier_func_fifo_w10_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tancalc_U0_tancalc_output_line_11_V_V_din,
        if_full_n => stream_array_line_11_V_V_full_n,
        if_write => tancalc_U0_tancalc_output_line_11_V_V_write,
        if_dout => stream_array_line_11_V_V_dout,
        if_empty_n => stream_array_line_11_V_V_empty_n,
        if_read => fifo_U0_fifo_input_line_11_V_V_read);

    stream_array_line_12_V_V_U : component hier_func_fifo_w10_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tancalc_U0_tancalc_output_line_12_V_V_din,
        if_full_n => stream_array_line_12_V_V_full_n,
        if_write => tancalc_U0_tancalc_output_line_12_V_V_write,
        if_dout => stream_array_line_12_V_V_dout,
        if_empty_n => stream_array_line_12_V_V_empty_n,
        if_read => fifo_U0_fifo_input_line_12_V_V_read);

    stream_array_line_13_V_V_U : component hier_func_fifo_w10_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tancalc_U0_tancalc_output_line_13_V_V_din,
        if_full_n => stream_array_line_13_V_V_full_n,
        if_write => tancalc_U0_tancalc_output_line_13_V_V_write,
        if_dout => stream_array_line_13_V_V_dout,
        if_empty_n => stream_array_line_13_V_V_empty_n,
        if_read => fifo_U0_fifo_input_line_13_V_V_read);

    stream_array_line_14_V_V_U : component hier_func_fifo_w10_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tancalc_U0_tancalc_output_line_14_V_V_din,
        if_full_n => stream_array_line_14_V_V_full_n,
        if_write => tancalc_U0_tancalc_output_line_14_V_V_write,
        if_dout => stream_array_line_14_V_V_dout,
        if_empty_n => stream_array_line_14_V_V_empty_n,
        if_read => fifo_U0_fifo_input_line_14_V_V_read);

    stream_array_line_15_V_V_U : component hier_func_fifo_w10_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tancalc_U0_tancalc_output_line_15_V_V_din,
        if_full_n => stream_array_line_15_V_V_full_n,
        if_write => tancalc_U0_tancalc_output_line_15_V_V_write,
        if_dout => stream_array_line_15_V_V_dout,
        if_empty_n => stream_array_line_15_V_V_empty_n,
        if_read => fifo_U0_fifo_input_line_15_V_V_read);

    start_for_fifo_U0_U : component hier_func_start_for_fifo_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fifo_U0_din,
        if_full_n => start_for_fifo_U0_full_n,
        if_write => tancalc_U0_start_write,
        if_dout => start_for_fifo_U0_dout,
        if_empty_n => start_for_fifo_U0_empty_n,
        if_read => fifo_U0_ap_ready);





    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;
    ap_done <= fifo_U0_ap_done;
    ap_idle <= (tancalc_U0_ap_idle and fifo_U0_ap_idle);
    ap_ready <= tancalc_U0_ap_ready;
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= fifo_U0_ap_done;
    ap_sync_ready <= tancalc_U0_ap_ready;
    fifo_U0_ap_continue <= ap_const_logic_1;
    fifo_U0_ap_start <= start_for_fifo_U0_empty_n;
    fifo_U0_start_full_n <= ap_const_logic_1;
    fifo_U0_start_write <= ap_const_logic_0;
    fifo_output_V_V_TDATA <= fifo_U0_fifo_output_V_V_TDATA;
    fifo_output_V_V_TVALID <= fifo_U0_fifo_output_V_V_TVALID;
    start_for_fifo_U0_din <= (0=>ap_const_logic_1, others=>'-');
    tancalc_U0_ap_continue <= ap_const_logic_1;
    tancalc_U0_ap_start <= ap_start;
end behav;
